
TPuP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ec4  0800d180  0800d180  0001d180  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f044  0800f044  00020210  2**0
                  CONTENTS
  4 .ARM          00000008  0800f044  0800f044  0001f044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f04c  0800f04c  00020210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f04c  0800f04c  0001f04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f050  0800f050  0001f050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800f054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000210  0800f264  00020210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  0800f264  00020ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025355  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cd8  00000000  00000000  00045595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  0004a270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b58  00000000  00000000  0004bff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8b1  00000000  00000000  0004db50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023d50  00000000  00000000  0007a401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105d7f  00000000  00000000  0009e151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a3ed0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008c9c  00000000  00000000  001a3f24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d164 	.word	0x0800d164

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	0800d164 	.word	0x0800d164

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b96e 	b.w	8000edc <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468c      	mov	ip, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	f040 8083 	bne.w	8000d2e <__udivmoddi4+0x116>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d947      	bls.n	8000cbe <__udivmoddi4+0xa6>
 8000c2e:	fab2 f282 	clz	r2, r2
 8000c32:	b142      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	f1c2 0020 	rsb	r0, r2, #32
 8000c38:	fa24 f000 	lsr.w	r0, r4, r0
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4097      	lsls	r7, r2
 8000c40:	ea40 0c01 	orr.w	ip, r0, r1
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c50:	fa1f fe87 	uxth.w	lr, r7
 8000c54:	fb08 c116 	mls	r1, r8, r6, ip
 8000c58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6a:	f080 8119 	bcs.w	8000ea0 <__udivmoddi4+0x288>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8116 	bls.w	8000ea0 <__udivmoddi4+0x288>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c80:	fb08 3310 	mls	r3, r8, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	193c      	adds	r4, r7, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8105 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f240 8102 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	443c      	add	r4, r7
 8000ca4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ca8:	eba4 040e 	sub.w	r4, r4, lr
 8000cac:	2600      	movs	r6, #0
 8000cae:	b11d      	cbz	r5, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cb8:	4631      	mov	r1, r6
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b902      	cbnz	r2, 8000cc2 <__udivmoddi4+0xaa>
 8000cc0:	deff      	udf	#255	; 0xff
 8000cc2:	fab2 f282 	clz	r2, r2
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	d150      	bne.n	8000d6c <__udivmoddi4+0x154>
 8000cca:	1bcb      	subs	r3, r1, r7
 8000ccc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cd0:	fa1f f887 	uxth.w	r8, r7
 8000cd4:	2601      	movs	r6, #1
 8000cd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cda:	0c21      	lsrs	r1, r4, #16
 8000cdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ce0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ce8:	428b      	cmp	r3, r1
 8000cea:	d907      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000cec:	1879      	adds	r1, r7, r1
 8000cee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0xe2>
 8000cf4:	428b      	cmp	r3, r1
 8000cf6:	f200 80e9 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000cfa:	4684      	mov	ip, r0
 8000cfc:	1ac9      	subs	r1, r1, r3
 8000cfe:	b2a3      	uxth	r3, r4
 8000d00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d0c:	fb08 f800 	mul.w	r8, r8, r0
 8000d10:	45a0      	cmp	r8, r4
 8000d12:	d907      	bls.n	8000d24 <__udivmoddi4+0x10c>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x10a>
 8000d1c:	45a0      	cmp	r8, r4
 8000d1e:	f200 80d9 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d22:	4618      	mov	r0, r3
 8000d24:	eba4 0408 	sub.w	r4, r4, r8
 8000d28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d2c:	e7bf      	b.n	8000cae <__udivmoddi4+0x96>
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x12e>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	f000 80b1 	beq.w	8000e9a <__udivmoddi4+0x282>
 8000d38:	2600      	movs	r6, #0
 8000d3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3e:	4630      	mov	r0, r6
 8000d40:	4631      	mov	r1, r6
 8000d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d46:	fab3 f683 	clz	r6, r3
 8000d4a:	2e00      	cmp	r6, #0
 8000d4c:	d14a      	bne.n	8000de4 <__udivmoddi4+0x1cc>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d302      	bcc.n	8000d58 <__udivmoddi4+0x140>
 8000d52:	4282      	cmp	r2, r0
 8000d54:	f200 80b8 	bhi.w	8000ec8 <__udivmoddi4+0x2b0>
 8000d58:	1a84      	subs	r4, r0, r2
 8000d5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d5e:	2001      	movs	r0, #1
 8000d60:	468c      	mov	ip, r1
 8000d62:	2d00      	cmp	r5, #0
 8000d64:	d0a8      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000d66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d6a:	e7a5      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f603 	lsr.w	r6, r0, r3
 8000d74:	4097      	lsls	r7, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7e:	40d9      	lsrs	r1, r3
 8000d80:	4330      	orrs	r0, r6
 8000d82:	0c03      	lsrs	r3, r0, #16
 8000d84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d88:	fa1f f887 	uxth.w	r8, r7
 8000d8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d94:	fb06 f108 	mul.w	r1, r6, r8
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x19c>
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000da6:	f080 808d 	bcs.w	8000ec4 <__udivmoddi4+0x2ac>
 8000daa:	4299      	cmp	r1, r3
 8000dac:	f240 808a 	bls.w	8000ec4 <__udivmoddi4+0x2ac>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	443b      	add	r3, r7
 8000db4:	1a5b      	subs	r3, r3, r1
 8000db6:	b281      	uxth	r1, r0
 8000db8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc4:	fb00 f308 	mul.w	r3, r0, r8
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x1c4>
 8000dcc:	1879      	adds	r1, r7, r1
 8000dce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd2:	d273      	bcs.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d971      	bls.n	8000ebc <__udivmoddi4+0x2a4>
 8000dd8:	3802      	subs	r0, #2
 8000dda:	4439      	add	r1, r7
 8000ddc:	1acb      	subs	r3, r1, r3
 8000dde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000de2:	e778      	b.n	8000cd6 <__udivmoddi4+0xbe>
 8000de4:	f1c6 0c20 	rsb	ip, r6, #32
 8000de8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000df0:	431c      	orrs	r4, r3
 8000df2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000df6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e02:	431f      	orrs	r7, r3
 8000e04:	0c3b      	lsrs	r3, r7, #16
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fa1f f884 	uxth.w	r8, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e16:	fb09 fa08 	mul.w	sl, r9, r8
 8000e1a:	458a      	cmp	sl, r1
 8000e1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e20:	fa00 f306 	lsl.w	r3, r0, r6
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x220>
 8000e26:	1861      	adds	r1, r4, r1
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e2c:	d248      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e2e:	458a      	cmp	sl, r1
 8000e30:	d946      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e32:	f1a9 0902 	sub.w	r9, r9, #2
 8000e36:	4421      	add	r1, r4
 8000e38:	eba1 010a 	sub.w	r1, r1, sl
 8000e3c:	b2bf      	uxth	r7, r7
 8000e3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e4a:	fb00 f808 	mul.w	r8, r0, r8
 8000e4e:	45b8      	cmp	r8, r7
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x24a>
 8000e52:	19e7      	adds	r7, r4, r7
 8000e54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e58:	d22e      	bcs.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5a:	45b8      	cmp	r8, r7
 8000e5c:	d92c      	bls.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4427      	add	r7, r4
 8000e62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e66:	eba7 0708 	sub.w	r7, r7, r8
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	454f      	cmp	r7, r9
 8000e70:	46c6      	mov	lr, r8
 8000e72:	4649      	mov	r1, r9
 8000e74:	d31a      	bcc.n	8000eac <__udivmoddi4+0x294>
 8000e76:	d017      	beq.n	8000ea8 <__udivmoddi4+0x290>
 8000e78:	b15d      	cbz	r5, 8000e92 <__udivmoddi4+0x27a>
 8000e7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e86:	40f2      	lsrs	r2, r6
 8000e88:	ea4c 0202 	orr.w	r2, ip, r2
 8000e8c:	40f7      	lsrs	r7, r6
 8000e8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e92:	2600      	movs	r6, #0
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e70b      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e9      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6fd      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000ea8:	4543      	cmp	r3, r8
 8000eaa:	d2e5      	bcs.n	8000e78 <__udivmoddi4+0x260>
 8000eac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000eb0:	eb69 0104 	sbc.w	r1, r9, r4
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7df      	b.n	8000e78 <__udivmoddi4+0x260>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	e7d2      	b.n	8000e62 <__udivmoddi4+0x24a>
 8000ebc:	4660      	mov	r0, ip
 8000ebe:	e78d      	b.n	8000ddc <__udivmoddi4+0x1c4>
 8000ec0:	4681      	mov	r9, r0
 8000ec2:	e7b9      	b.n	8000e38 <__udivmoddi4+0x220>
 8000ec4:	4666      	mov	r6, ip
 8000ec6:	e775      	b.n	8000db4 <__udivmoddi4+0x19c>
 8000ec8:	4630      	mov	r0, r6
 8000eca:	e74a      	b.n	8000d62 <__udivmoddi4+0x14a>
 8000ecc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed0:	4439      	add	r1, r7
 8000ed2:	e713      	b.n	8000cfc <__udivmoddi4+0xe4>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	443c      	add	r4, r7
 8000ed8:	e724      	b.n	8000d24 <__udivmoddi4+0x10c>
 8000eda:	bf00      	nop

08000edc <__aeabi_idiv0>:
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	f5ad 6da0 	sub.w	sp, sp, #1280	; 0x500
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee8:	f003 fdac 	bl	8004a44 <HAL_Init>

  /* USER CODE BEGIN Init */
  int *pt = (int*) 0xE0042008;
 8000eec:	4bb4      	ldr	r3, [pc, #720]	; (80011c0 <main+0x2e0>)
 8000eee:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
    *pt |= (1<<4);
 8000ef2:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f043 0210 	orr.w	r2, r3, #16
 8000efc:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000f00:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f02:	f000 f973 	bl	80011ec <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  LED_InitGreen();
 8000f06:	f009 fa1d 	bl	800a344 <LED_InitGreen>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 fda9 	bl	8001a60 <MX_GPIO_Init>
  MX_CRC_Init();
 8000f0e:	f000 fa63 	bl	80013d8 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000f12:	f000 fa83 	bl	800141c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000f16:	f000 fd53 	bl	80019c0 <MX_FMC_Init>
  MX_I2C3_Init();
 8000f1a:	f000 fab1 	bl	8001480 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000f1e:	f000 faef 	bl	8001500 <MX_LTDC_Init>
  MX_USART1_UART_Init();
 8000f22:	f000 fd1d 	bl	8001960 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000f26:	f000 fb6d 	bl	8001604 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000f2a:	f000 fbb9 	bl	80016a0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f2e:	f000 fc07 	bl	8001740 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000f32:	f000 fc55 	bl	80017e0 <MX_TIM5_Init>
  MX_ADC3_Init();
 8000f36:	f000 f9fd 	bl	8001334 <MX_ADC3_Init>
  MX_TIM7_Init();
 8000f3a:	f000 fca1 	bl	8001880 <MX_TIM7_Init>
  MX_TIM9_Init();
 8000f3e:	f000 fcd5 	bl	80018ec <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  BSP_SDRAM_Init();
 8000f42:	f003 f931 	bl	80041a8 <BSP_SDRAM_Init>

    __HAL_RCC_CRC_CLK_ENABLE();
 8000f46:	4b9f      	ldr	r3, [pc, #636]	; (80011c4 <main+0x2e4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a9e      	ldr	r2, [pc, #632]	; (80011c4 <main+0x2e4>)
 8000f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b9c      	ldr	r3, [pc, #624]	; (80011c4 <main+0x2e4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8000f5a:	1d3b      	adds	r3, r7, #4
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	681b      	ldr	r3, [r3, #0]

    BSP_TS_Init(480,272);
 8000f62:	f44f 7188 	mov.w	r1, #272	; 0x110
 8000f66:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8000f6a:	f003 fad3 	bl	8004514 <BSP_TS_Init>

    BSP_LCD_Init();
 8000f6e:	f002 fbbd 	bl	80036ec <BSP_LCD_Init>

    BSP_LCD_LayerDefaultInit(0,LCD_FB_START_ADDRESS);
 8000f72:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000f76:	2000      	movs	r0, #0
 8000f78:	f002 fc50 	bl	800381c <BSP_LCD_LayerDefaultInit>
    BSP_LCD_DisplayOn();
 8000f7c:	f002 fefc 	bl	8003d78 <BSP_LCD_DisplayOn>

    BSP_LCD_SelectLayer(0);
 8000f80:	2000      	movs	r0, #0
 8000f82:	f002 fcab 	bl	80038dc <BSP_LCD_SelectLayer>

    BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f86:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8a:	f002 fcff 	bl	800398c <BSP_LCD_Clear>

 //   BSP_LCD_DisplayStringAt(180,180,(uint8_t *) "Ca marche!!",LEFT_MODE);

    HAL_TIM_Base_Start_IT(&htim2);
 8000f8e:	488e      	ldr	r0, [pc, #568]	; (80011c8 <main+0x2e8>)
 8000f90:	f007 ff96 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim3);
 8000f94:	488d      	ldr	r0, [pc, #564]	; (80011cc <main+0x2ec>)
 8000f96:	f007 ff93 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim4);
 8000f9a:	488d      	ldr	r0, [pc, #564]	; (80011d0 <main+0x2f0>)
 8000f9c:	f007 ff90 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim5);
 8000fa0:	488c      	ldr	r0, [pc, #560]	; (80011d4 <main+0x2f4>)
 8000fa2:	f007 ff8d 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim7);
 8000fa6:	488c      	ldr	r0, [pc, #560]	; (80011d8 <main+0x2f8>)
 8000fa8:	f007 ff8a 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim9);
 8000fac:	488b      	ldr	r0, [pc, #556]	; (80011dc <main+0x2fc>)
 8000fae:	f007 ff87 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
    int freq = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(g_frameset == 1){
 8000fb8:	4b89      	ldr	r3, [pc, #548]	; (80011e0 <main+0x300>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d1fa      	bne.n	8000fb8 <main+0xd8>
		  g_frameset = 0;
 8000fc2:	4b87      	ldr	r3, [pc, #540]	; (80011e0 <main+0x300>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
		  min = 4096 ;max = 0;
 8000fc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fcc:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
		  for(i=0;i<300;i++){
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f8a7 34f4 	strh.w	r3, [r7, #1268]	; 0x4f4
 8000fdc:	e033      	b.n	8001046 <main+0x166>
			  value[i] = g_value[i];
 8000fde:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 8000fe2:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 8000fe6:	497f      	ldr	r1, [pc, #508]	; (80011e4 <main+0x304>)
 8000fe8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000fec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ff0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			  if(min > value[i]){min = value[i];}
 8000ff4:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 8000ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001000:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8001004:	429a      	cmp	r2, r3
 8001006:	d907      	bls.n	8001018 <main+0x138>
 8001008:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 800100c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001014:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
			  if(max < value[i]){max = value[i];}
 8001018:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 800101c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <main+0x15c>
 800102c:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 8001030:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001038:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
		  for(i=0;i<300;i++){
 800103c:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 8001040:	3301      	adds	r3, #1
 8001042:	f8a7 34f4 	strh.w	r3, [r7, #1268]	; 0x4f4
 8001046:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 800104a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800104e:	d3c6      	bcc.n	8000fde <main+0xfe>
		  }
		  if(value[0] > ((min+max)/2)){
 8001050:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 800105a:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 800105e:	440b      	add	r3, r1
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	429a      	cmp	r2, r3
 8001064:	d903      	bls.n	800106e <main+0x18e>
			  status = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	f887 34f7 	strb.w	r3, [r7, #1271]	; 0x4f7
 800106c:	e002      	b.n	8001074 <main+0x194>
		  }else{
			  status = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	f887 34f7 	strb.w	r3, [r7, #1271]	; 0x4f7
		  }
		  edge = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	f887 34f3 	strb.w	r3, [r7, #1267]	; 0x4f3
		  i = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	f8a7 34f4 	strh.w	r3, [r7, #1268]	; 0x4f4
		  while(edge < 3 && i < 300){
 8001080:	e074      	b.n	800116c <main+0x28c>
			  if(value[i]<((min+max)/2) && status == 1){
 8001082:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 8001086:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800108e:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 8001092:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 8001096:	440b      	add	r3, r1
 8001098:	085b      	lsrs	r3, r3, #1
 800109a:	429a      	cmp	r2, r3
 800109c:	d220      	bcs.n	80010e0 <main+0x200>
 800109e:	f897 34f7 	ldrb.w	r3, [r7, #1271]	; 0x4f7
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d11c      	bne.n	80010e0 <main+0x200>
				  status = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	f887 34f7 	strb.w	r3, [r7, #1271]	; 0x4f7
				  switch(edge){
 80010ac:	f897 34f3 	ldrb.w	r3, [r7, #1267]	; 0x4f3
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <main+0x1da>
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d005      	beq.n	80010c4 <main+0x1e4>
					  break;
				  case 2:
					  period = i - period;
					  break;
				  default:
					  break;
 80010b8:	e00c      	b.n	80010d4 <main+0x1f4>
					  period = i;
 80010ba:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 80010be:	f8a7 34f0 	strh.w	r3, [r7, #1264]	; 0x4f0
					  break;
 80010c2:	e007      	b.n	80010d4 <main+0x1f4>
					  period = i - period;
 80010c4:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 80010c8:	f8b7 34f0 	ldrh.w	r3, [r7, #1264]	; 0x4f0
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f8a7 34f0 	strh.w	r3, [r7, #1264]	; 0x4f0
					  break;
 80010d2:	bf00      	nop
				  }
				  edge++;
 80010d4:	f897 34f3 	ldrb.w	r3, [r7, #1267]	; 0x4f3
 80010d8:	3301      	adds	r3, #1
 80010da:	f887 34f3 	strb.w	r3, [r7, #1267]	; 0x4f3
 80010de:	e02d      	b.n	800113c <main+0x25c>
			  }else if(value[i]>((min+max)/2) && status == 0){
 80010e0:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010ec:	f8d7 14fc 	ldr.w	r1, [r7, #1276]	; 0x4fc
 80010f0:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 80010f4:	440b      	add	r3, r1
 80010f6:	085b      	lsrs	r3, r3, #1
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d91f      	bls.n	800113c <main+0x25c>
 80010fc:	f897 34f7 	ldrb.w	r3, [r7, #1271]	; 0x4f7
 8001100:	2b00      	cmp	r3, #0
 8001102:	d11b      	bne.n	800113c <main+0x25c>
				  status = 1;
 8001104:	2301      	movs	r3, #1
 8001106:	f887 34f7 	strb.w	r3, [r7, #1271]	; 0x4f7
				  switch(edge){
 800110a:	f897 34f3 	ldrb.w	r3, [r7, #1267]	; 0x4f3
 800110e:	2b00      	cmp	r3, #0
 8001110:	d002      	beq.n	8001118 <main+0x238>
 8001112:	2b02      	cmp	r3, #2
 8001114:	d005      	beq.n	8001122 <main+0x242>
					  break;
				  case 2:
					  period = i - period;
					  break;
				  default:
					  break;
 8001116:	e00c      	b.n	8001132 <main+0x252>
					  period = i;
 8001118:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 800111c:	f8a7 34f0 	strh.w	r3, [r7, #1264]	; 0x4f0
					  break;
 8001120:	e007      	b.n	8001132 <main+0x252>
					  period = i - period;
 8001122:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 8001126:	f8b7 34f0 	ldrh.w	r3, [r7, #1264]	; 0x4f0
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	f8a7 34f0 	strh.w	r3, [r7, #1264]	; 0x4f0
					  break;
 8001130:	bf00      	nop
				  }
				  edge++;
 8001132:	f897 34f3 	ldrb.w	r3, [r7, #1267]	; 0x4f3
 8001136:	3301      	adds	r3, #1
 8001138:	f887 34f3 	strb.w	r3, [r7, #1267]	; 0x4f3
			  }
			  if(edge > 0){
 800113c:	f897 34f3 	ldrb.w	r3, [r7, #1267]	; 0x4f3
 8001140:	2b00      	cmp	r3, #0
 8001142:	d013      	beq.n	800116c <main+0x28c>
				  mean += value[i];
 8001144:	f8b7 24f4 	ldrh.w	r2, [r7, #1268]	; 0x4f4
 8001148:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001150:	461a      	mov	r2, r3
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 800115a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800115e:	1884      	adds	r4, r0, r2
 8001160:	eb41 0503 	adc.w	r5, r1, r3
 8001164:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8001168:	e9c3 4500 	strd	r4, r5, [r3]
		  while(edge < 3 && i < 300){
 800116c:	f897 34f3 	ldrb.w	r3, [r7, #1267]	; 0x4f3
 8001170:	2b02      	cmp	r3, #2
 8001172:	d804      	bhi.n	800117e <main+0x29e>
 8001174:	f8b7 34f4 	ldrh.w	r3, [r7, #1268]	; 0x4f4
 8001178:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800117c:	d381      	bcc.n	8001082 <main+0x1a2>
			  }
		  }
		  mean = mean/period;
 800117e:	f8b7 24f0 	ldrh.w	r2, [r7, #1264]	; 0x4f0
 8001182:	f04f 0300 	mov.w	r3, #0
 8001186:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 800118a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800118e:	f7ff fd2b 	bl	8000be8 <__aeabi_uldivmod>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	f507 619d 	add.w	r1, r7, #1256	; 0x4e8
 800119a:	e9c1 2300 	strd	r2, r3, [r1]
		  sprintf(bufStr,"period:%d",period);
 800119e:	f8b7 24f0 	ldrh.w	r2, [r7, #1264]	; 0x4f0
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	4910      	ldr	r1, [pc, #64]	; (80011e8 <main+0x308>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f009 fdb1 	bl	800ad10 <siprintf>
		  BSP_LCD_DisplayStringAt(0,0,(uint8_t *) bufStr,LEFT_MODE);
 80011ae:	f107 0208 	add.w	r2, r7, #8
 80011b2:	2303      	movs	r3, #3
 80011b4:	2100      	movs	r1, #0
 80011b6:	2000      	movs	r0, #0
 80011b8:	f002 fc54 	bl	8003a64 <BSP_LCD_DisplayStringAt>
	  if(g_frameset == 1){
 80011bc:	e6fc      	b.n	8000fb8 <main+0xd8>
 80011be:	bf00      	nop
 80011c0:	e0042008 	.word	0xe0042008
 80011c4:	40023800 	.word	0x40023800
 80011c8:	20000c9c 	.word	0x20000c9c
 80011cc:	200005a0 	.word	0x200005a0
 80011d0:	200004bc 	.word	0x200004bc
 80011d4:	20000554 	.word	0x20000554
 80011d8:	20000d1c 	.word	0x20000d1c
 80011dc:	20000760 	.word	0x20000760
 80011e0:	20000230 	.word	0x20000230
 80011e4:	200007ac 	.word	0x200007ac
 80011e8:	0800d180 	.word	0x0800d180

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b0b4      	sub	sp, #208	; 0xd0
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011f6:	2230      	movs	r2, #48	; 0x30
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f009 f916 	bl	800a42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	2284      	movs	r2, #132	; 0x84
 8001216:	2100      	movs	r1, #0
 8001218:	4618      	mov	r0, r3
 800121a:	f009 f907 	bl	800a42c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800121e:	f006 fc7d 	bl	8007b1c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001222:	4b41      	ldr	r3, [pc, #260]	; (8001328 <SystemClock_Config+0x13c>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a40      	ldr	r2, [pc, #256]	; (8001328 <SystemClock_Config+0x13c>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b3e      	ldr	r3, [pc, #248]	; (8001328 <SystemClock_Config+0x13c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800123a:	4b3c      	ldr	r3, [pc, #240]	; (800132c <SystemClock_Config+0x140>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a3b      	ldr	r2, [pc, #236]	; (800132c <SystemClock_Config+0x140>)
 8001240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	4b39      	ldr	r3, [pc, #228]	; (800132c <SystemClock_Config+0x140>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001252:	2301      	movs	r3, #1
 8001254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800126a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 800126e:	2319      	movs	r3, #25
 8001270:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001274:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001278:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001282:	2309      	movs	r3, #9
 8001284:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800128c:	4618      	mov	r0, r3
 800128e:	f006 fca5 	bl	8007bdc <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001298:	f000 ff5c 	bl	8002154 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800129c:	f006 fc4e 	bl	8007b3c <HAL_PWREx_EnableOverDrive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012a6:	f000 ff55 	bl	8002154 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012aa:	230f      	movs	r3, #15
 80012ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b0:	2302      	movs	r3, #2
 80012b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012bc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80012cc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012d0:	2106      	movs	r1, #6
 80012d2:	4618      	mov	r0, r3
 80012d4:	f006 ff26 	bl	8008124 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80012de:	f000 ff39 	bl	8002154 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_USART1
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <SystemClock_Config+0x144>)
 80012e4:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80012e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012ea:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80012ec:	2305      	movs	r3, #5
 80012ee:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80012f0:	2302      	movs	r3, #2
 80012f2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80012f4:	2303      	movs	r3, #3
 80012f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80012fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001302:	2300      	movs	r3, #0
 8001304:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001306:	2300      	movs	r3, #0
 8001308:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	4618      	mov	r0, r3
 8001310:	f007 f910 	bl	8008534 <HAL_RCCEx_PeriphCLKConfig>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SystemClock_Config+0x132>
  {
    Error_Handler();
 800131a:	f000 ff1b 	bl	8002154 <Error_Handler>
  }
}
 800131e:	bf00      	nop
 8001320:	37d0      	adds	r7, #208	; 0xd0
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800
 800132c:	40007000 	.word	0x40007000
 8001330:	00010048 	.word	0x00010048

08001334 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800133a:	463b      	mov	r3, r7
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001346:	4b21      	ldr	r3, [pc, #132]	; (80013cc <MX_ADC3_Init+0x98>)
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <MX_ADC3_Init+0x9c>)
 800134a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <MX_ADC3_Init+0x98>)
 800134e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001352:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <MX_ADC3_Init+0x98>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <MX_ADC3_Init+0x98>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001360:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_ADC3_Init+0x98>)
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001366:	4b19      	ldr	r3, [pc, #100]	; (80013cc <MX_ADC3_Init+0x98>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_ADC3_Init+0x98>)
 8001370:	2200      	movs	r2, #0
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_ADC3_Init+0x98>)
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <MX_ADC3_Init+0xa0>)
 8001378:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_ADC3_Init+0x98>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_ADC3_Init+0x98>)
 8001382:	2201      	movs	r2, #1
 8001384:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_ADC3_Init+0x98>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_ADC3_Init+0x98>)
 8001390:	2201      	movs	r2, #1
 8001392:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001394:	480d      	ldr	r0, [pc, #52]	; (80013cc <MX_ADC3_Init+0x98>)
 8001396:	f003 fba7 	bl	8004ae8 <HAL_ADC_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80013a0:	f000 fed8 	bl	8002154 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80013a4:	2308      	movs	r3, #8
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	4619      	mov	r1, r3
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_ADC3_Init+0x98>)
 80013b6:	f003 fe1f 	bl	8004ff8 <HAL_ADC_ConfigChannel>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80013c0:	f000 fec8 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000694 	.word	0x20000694
 80013d0:	40012200 	.word	0x40012200
 80013d4:	0f000001 	.word	0x0f000001

080013d8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80013dc:	4b0d      	ldr	r3, [pc, #52]	; (8001414 <MX_CRC_Init+0x3c>)
 80013de:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <MX_CRC_Init+0x40>)
 80013e0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80013e2:	4b0c      	ldr	r3, [pc, #48]	; (8001414 <MX_CRC_Init+0x3c>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80013e8:	4b0a      	ldr	r3, [pc, #40]	; (8001414 <MX_CRC_Init+0x3c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <MX_CRC_Init+0x3c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013f4:	4b07      	ldr	r3, [pc, #28]	; (8001414 <MX_CRC_Init+0x3c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <MX_CRC_Init+0x3c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_CRC_Init+0x3c>)
 8001402:	f004 f929 	bl	8005658 <HAL_CRC_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800140c:	f000 fea2 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000508 	.word	0x20000508
 8001418:	40023000 	.word	0x40023000

0800141c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001422:	4a16      	ldr	r2, [pc, #88]	; (800147c <MX_DMA2D_Init+0x60>)
 8001424:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001428:	2200      	movs	r2, #0
 800142a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <MX_DMA2D_Init+0x5c>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001434:	2200      	movs	r2, #0
 8001436:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001438:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <MX_DMA2D_Init+0x5c>)
 800143a:	2200      	movs	r2, #0
 800143c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001440:	2200      	movs	r2, #0
 8001442:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001444:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001446:	2200      	movs	r2, #0
 8001448:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <MX_DMA2D_Init+0x5c>)
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001452:	f004 fba9 	bl	8005ba8 <HAL_DMA2D_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800145c:	f000 fe7a 	bl	8002154 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001460:	2101      	movs	r1, #1
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_DMA2D_Init+0x5c>)
 8001464:	f004 fe0e 	bl	8006084 <HAL_DMA2D_ConfigLayer>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800146e:	f000 fe71 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	20000c5c 	.word	0x20000c5c
 800147c:	4002b000 	.word	0x4002b000

08001480 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001484:	4b1b      	ldr	r3, [pc, #108]	; (80014f4 <MX_I2C3_Init+0x74>)
 8001486:	4a1c      	ldr	r2, [pc, #112]	; (80014f8 <MX_I2C3_Init+0x78>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_I2C3_Init+0x74>)
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <MX_I2C3_Init+0x7c>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <MX_I2C3_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_I2C3_Init+0x74>)
 8001498:	2201      	movs	r2, #1
 800149a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_I2C3_Init+0x74>)
 800149e:	2200      	movs	r2, #0
 80014a0:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014bc:	f005 fa06 	bl	80068cc <HAL_I2C_Init>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80014c6:	f000 fe45 	bl	8002154 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014ca:	2100      	movs	r1, #0
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014ce:	f005 ff15 	bl	80072fc <HAL_I2CEx_ConfigAnalogFilter>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80014d8:	f000 fe3c 	bl	8002154 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014dc:	2100      	movs	r1, #0
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_I2C3_Init+0x74>)
 80014e0:	f005 ff57 	bl	8007392 <HAL_I2CEx_ConfigDigitalFilter>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80014ea:	f000 fe33 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000444 	.word	0x20000444
 80014f8:	40005c00 	.word	0x40005c00
 80014fc:	00c0eaff 	.word	0x00c0eaff

08001500 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08e      	sub	sp, #56	; 0x38
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	2234      	movs	r2, #52	; 0x34
 800150a:	2100      	movs	r1, #0
 800150c:	4618      	mov	r0, r3
 800150e:	f008 ff8d 	bl	800a42c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001512:	4b3a      	ldr	r3, [pc, #232]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001514:	4a3a      	ldr	r2, [pc, #232]	; (8001600 <MX_LTDC_Init+0x100>)
 8001516:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001518:	4b38      	ldr	r3, [pc, #224]	; (80015fc <MX_LTDC_Init+0xfc>)
 800151a:	2200      	movs	r2, #0
 800151c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800151e:	4b37      	ldr	r3, [pc, #220]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800152a:	4b34      	ldr	r3, [pc, #208]	; (80015fc <MX_LTDC_Init+0xfc>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001532:	2228      	movs	r2, #40	; 0x28
 8001534:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001536:	4b31      	ldr	r3, [pc, #196]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001538:	2209      	movs	r2, #9
 800153a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 800153c:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <MX_LTDC_Init+0xfc>)
 800153e:	2235      	movs	r2, #53	; 0x35
 8001540:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001542:	4b2e      	ldr	r3, [pc, #184]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001544:	220b      	movs	r2, #11
 8001546:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001548:	4b2c      	ldr	r3, [pc, #176]	; (80015fc <MX_LTDC_Init+0xfc>)
 800154a:	f240 2215 	movw	r2, #533	; 0x215
 800154e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001550:	4b2a      	ldr	r3, [pc, #168]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001552:	f240 121b 	movw	r2, #283	; 0x11b
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001558:	4b28      	ldr	r3, [pc, #160]	; (80015fc <MX_LTDC_Init+0xfc>)
 800155a:	f240 2235 	movw	r2, #565	; 0x235
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001560:	4b26      	ldr	r3, [pc, #152]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001562:	f240 121d 	movw	r2, #285	; 0x11d
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001568:	4b24      	ldr	r3, [pc, #144]	; (80015fc <MX_LTDC_Init+0xfc>)
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001570:	4b22      	ldr	r3, [pc, #136]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001572:	2200      	movs	r2, #0
 8001574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001578:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_LTDC_Init+0xfc>)
 800157a:	2200      	movs	r2, #0
 800157c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001580:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_LTDC_Init+0xfc>)
 8001582:	f005 ff53 	bl	800742c <HAL_LTDC_Init>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800158c:	f000 fde2 	bl	8002154 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001594:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001598:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 800159e:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015a2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80015a4:	2302      	movs	r3, #2
 80015a6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80015a8:	23ff      	movs	r3, #255	; 0xff
 80015aa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80015b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015b4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80015b6:	2307      	movs	r3, #7
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80015ba:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80015c0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80015c6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80015ca:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_LTDC_Init+0xfc>)
 80015e6:	f006 f8b3 	bl	8007750 <HAL_LTDC_ConfigLayer>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80015f0:	f000 fdb0 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3738      	adds	r7, #56	; 0x38
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200005ec 	.word	0x200005ec
 8001600:	40016800 	.word	0x40016800

08001604 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001618:	1d3b      	adds	r3, r7, #4
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_TIM2_Init+0x98>)
 8001624:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001628:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 999;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_TIM2_Init+0x98>)
 800162c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001630:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_TIM2_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 25000;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_TIM2_Init+0x98>)
 800163a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800163e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001640:	4b16      	ldr	r3, [pc, #88]	; (800169c <MX_TIM2_Init+0x98>)
 8001642:	2200      	movs	r2, #0
 8001644:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_TIM2_Init+0x98>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164c:	4813      	ldr	r0, [pc, #76]	; (800169c <MX_TIM2_Init+0x98>)
 800164e:	f007 fbe0 	bl	8008e12 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001658:	f000 fd7c 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <MX_TIM2_Init+0x98>)
 800166a:	f007 fdc1 	bl	80091f0 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001674:	f000 fd6e 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001680:	1d3b      	adds	r3, r7, #4
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_TIM2_Init+0x98>)
 8001686:	f007 ffdb 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001690:	f000 fd60 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3720      	adds	r7, #32
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000c9c 	.word	0x20000c9c

080016a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016a6:	f107 0310 	add.w	r3, r7, #16
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80016be:	4b1e      	ldr	r3, [pc, #120]	; (8001738 <MX_TIM3_Init+0x98>)
 80016c0:	4a1e      	ldr	r2, [pc, #120]	; (800173c <MX_TIM3_Init+0x9c>)
 80016c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80016c4:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_TIM3_Init+0x98>)
 80016c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_TIM3_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_TIM3_Init+0x98>)
 80016d4:	f242 7210 	movw	r2, #10000	; 0x2710
 80016d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <MX_TIM3_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e0:	4b15      	ldr	r3, [pc, #84]	; (8001738 <MX_TIM3_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016e6:	4814      	ldr	r0, [pc, #80]	; (8001738 <MX_TIM3_Init+0x98>)
 80016e8:	f007 fb93 	bl	8008e12 <HAL_TIM_Base_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80016f2:	f000 fd2f 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016fc:	f107 0310 	add.w	r3, r7, #16
 8001700:	4619      	mov	r1, r3
 8001702:	480d      	ldr	r0, [pc, #52]	; (8001738 <MX_TIM3_Init+0x98>)
 8001704:	f007 fd74 	bl	80091f0 <HAL_TIM_ConfigClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800170e:	f000 fd21 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	4619      	mov	r1, r3
 800171e:	4806      	ldr	r0, [pc, #24]	; (8001738 <MX_TIM3_Init+0x98>)
 8001720:	f007 ff8e 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800172a:	f000 fd13 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	3720      	adds	r7, #32
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200005a0 	.word	0x200005a0
 800173c:	40000400 	.word	0x40000400

08001740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800175e:	4b1e      	ldr	r3, [pc, #120]	; (80017d8 <MX_TIM4_Init+0x98>)
 8001760:	4a1e      	ldr	r2, [pc, #120]	; (80017dc <MX_TIM4_Init+0x9c>)
 8001762:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001764:	4b1c      	ldr	r3, [pc, #112]	; (80017d8 <MX_TIM4_Init+0x98>)
 8001766:	f240 32e7 	movw	r2, #999	; 0x3e7
 800176a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <MX_TIM4_Init+0x98>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <MX_TIM4_Init+0x98>)
 8001774:	f242 7210 	movw	r2, #10000	; 0x2710
 8001778:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <MX_TIM4_Init+0x98>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001780:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <MX_TIM4_Init+0x98>)
 8001782:	2200      	movs	r2, #0
 8001784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001786:	4814      	ldr	r0, [pc, #80]	; (80017d8 <MX_TIM4_Init+0x98>)
 8001788:	f007 fb43 	bl	8008e12 <HAL_TIM_Base_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001792:	f000 fcdf 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001796:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800179a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800179c:	f107 0310 	add.w	r3, r7, #16
 80017a0:	4619      	mov	r1, r3
 80017a2:	480d      	ldr	r0, [pc, #52]	; (80017d8 <MX_TIM4_Init+0x98>)
 80017a4:	f007 fd24 	bl	80091f0 <HAL_TIM_ConfigClockSource>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 80017ae:	f000 fcd1 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4806      	ldr	r0, [pc, #24]	; (80017d8 <MX_TIM4_Init+0x98>)
 80017c0:	f007 ff3e 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 80017ca:	f000 fcc3 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	3720      	adds	r7, #32
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	200004bc 	.word	0x200004bc
 80017dc:	40000800 	.word	0x40000800

080017e0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b088      	sub	sp, #32
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017fe:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM5_Init+0x98>)
 8001800:	4a1e      	ldr	r2, [pc, #120]	; (800187c <MX_TIM5_Init+0x9c>)
 8001802:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9999;
 8001804:	4b1c      	ldr	r3, [pc, #112]	; (8001878 <MX_TIM5_Init+0x98>)
 8001806:	f242 720f 	movw	r2, #9999	; 0x270f
 800180a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM5_Init+0x98>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001812:	4b19      	ldr	r3, [pc, #100]	; (8001878 <MX_TIM5_Init+0x98>)
 8001814:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001818:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_TIM5_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_TIM5_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001826:	4814      	ldr	r0, [pc, #80]	; (8001878 <MX_TIM5_Init+0x98>)
 8001828:	f007 faf3 	bl	8008e12 <HAL_TIM_Base_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001832:	f000 fc8f 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_TIM5_Init+0x98>)
 8001844:	f007 fcd4 	bl	80091f0 <HAL_TIM_ConfigClockSource>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800184e:	f000 fc81 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	4619      	mov	r1, r3
 800185e:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_TIM5_Init+0x98>)
 8001860:	f007 feee 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800186a:	f000 fc73 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800186e:	bf00      	nop
 8001870:	3720      	adds	r7, #32
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000554 	.word	0x20000554
 800187c:	40000c00 	.word	0x40000c00

08001880 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	1d3b      	adds	r3, r7, #4
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]
 800188e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001890:	4b14      	ldr	r3, [pc, #80]	; (80018e4 <MX_TIM7_Init+0x64>)
 8001892:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <MX_TIM7_Init+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 20;
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_TIM7_Init+0x64>)
 8001898:	2214      	movs	r2, #20
 800189a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <MX_TIM7_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9921;
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018a4:	f242 62c1 	movw	r2, #9921	; 0x26c1
 80018a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018b2:	f007 faae 	bl	8008e12 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80018bc:	f000 fc4a 	bl	8002154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018c8:	1d3b      	adds	r3, r7, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018ce:	f007 feb7 	bl	8009640 <HAL_TIMEx_MasterConfigSynchronization>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018d8:	f000 fc3c 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20000d1c 	.word	0x20000d1c
 80018e8:	40001400 	.word	0x40001400

080018ec <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018fe:	4b16      	ldr	r3, [pc, #88]	; (8001958 <MX_TIM9_Init+0x6c>)
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <MX_TIM9_Init+0x70>)
 8001902:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 9999;
 8001904:	4b14      	ldr	r3, [pc, #80]	; (8001958 <MX_TIM9_Init+0x6c>)
 8001906:	f242 720f 	movw	r2, #9999	; 0x270f
 800190a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <MX_TIM9_Init+0x6c>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 9;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <MX_TIM9_Init+0x6c>)
 8001914:	2209      	movs	r2, #9
 8001916:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001918:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <MX_TIM9_Init+0x6c>)
 800191a:	2200      	movs	r2, #0
 800191c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <MX_TIM9_Init+0x6c>)
 8001920:	2200      	movs	r2, #0
 8001922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001924:	480c      	ldr	r0, [pc, #48]	; (8001958 <MX_TIM9_Init+0x6c>)
 8001926:	f007 fa74 	bl	8008e12 <HAL_TIM_Base_Init>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001930:	f000 fc10 	bl	8002154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001938:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	4806      	ldr	r0, [pc, #24]	; (8001958 <MX_TIM9_Init+0x6c>)
 8001940:	f007 fc56 	bl	80091f0 <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800194a:	f000 fc03 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000760 	.word	0x20000760
 800195c:	40014000 	.word	0x40014000

08001960 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001964:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <MX_USART1_UART_Init+0x5c>)
 8001968:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800196a:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 800196c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001970:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 8001986:	220c      	movs	r2, #12
 8001988:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001990:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 8001998:	2200      	movs	r2, #0
 800199a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800199c:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 800199e:	2200      	movs	r2, #0
 80019a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019a2:	4805      	ldr	r0, [pc, #20]	; (80019b8 <MX_USART1_UART_Init+0x58>)
 80019a4:	f007 fef8 	bl	8009798 <HAL_UART_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80019ae:	f000 fbd1 	bl	8002154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	200006dc 	.word	0x200006dc
 80019bc:	40011000 	.word	0x40011000

080019c0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]
 80019d4:	615a      	str	r2, [r3, #20]
 80019d6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80019d8:	4b1f      	ldr	r3, [pc, #124]	; (8001a58 <MX_FMC_Init+0x98>)
 80019da:	4a20      	ldr	r2, [pc, #128]	; (8001a5c <MX_FMC_Init+0x9c>)
 80019dc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80019de:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_FMC_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	; (8001a58 <MX_FMC_Init+0x98>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_FMC_Init+0x98>)
 80019ec:	2204      	movs	r2, #4
 80019ee:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80019f0:	4b19      	ldr	r3, [pc, #100]	; (8001a58 <MX_FMC_Init+0x98>)
 80019f2:	2210      	movs	r2, #16
 80019f4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_FMC_Init+0x98>)
 80019f8:	2240      	movs	r2, #64	; 0x40
 80019fa:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_FMC_Init+0x98>)
 80019fe:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001a02:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_FMC_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_FMC_Init+0x98>)
 8001a0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a10:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_FMC_Init+0x98>)
 8001a14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a18:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_FMC_Init+0x98>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001a20:	2302      	movs	r3, #2
 8001a22:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001a24:	2307      	movs	r3, #7
 8001a26:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001a30:	2303      	movs	r3, #3
 8001a32:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001a34:	2302      	movs	r3, #2
 8001a36:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001a3c:	1d3b      	adds	r3, r7, #4
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_FMC_Init+0x98>)
 8001a42:	f007 f967 	bl	8008d14 <HAL_SDRAM_Init>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001a4c:	f000 fb82 	bl	8002154 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001a50:	bf00      	nop
 8001a52:	3720      	adds	r7, #32
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000ce8 	.word	0x20000ce8
 8001a5c:	a0000140 	.word	0xa0000140

08001a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b090      	sub	sp, #64	; 0x40
 8001a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
 8001a74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a76:	4bae      	ldr	r3, [pc, #696]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4aad      	ldr	r2, [pc, #692]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001a7c:	f043 0310 	orr.w	r3, r3, #16
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4bab      	ldr	r3, [pc, #684]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a8e:	4ba8      	ldr	r3, [pc, #672]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4aa7      	ldr	r2, [pc, #668]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4ba5      	ldr	r3, [pc, #660]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4ba2      	ldr	r3, [pc, #648]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4aa1      	ldr	r2, [pc, #644]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001aac:	f043 0302 	orr.w	r3, r3, #2
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b9f      	ldr	r3, [pc, #636]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
 8001abc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001abe:	4b9c      	ldr	r3, [pc, #624]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a9b      	ldr	r2, [pc, #620]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b99      	ldr	r3, [pc, #612]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	61fb      	str	r3, [r7, #28]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad6:	4b96      	ldr	r3, [pc, #600]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a95      	ldr	r2, [pc, #596]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001adc:	f043 0304 	orr.w	r3, r3, #4
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b93      	ldr	r3, [pc, #588]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f003 0304 	and.w	r3, r3, #4
 8001aea:	61bb      	str	r3, [r7, #24]
 8001aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aee:	4b90      	ldr	r3, [pc, #576]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a8f      	ldr	r2, [pc, #572]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b8d      	ldr	r3, [pc, #564]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001b06:	4b8a      	ldr	r3, [pc, #552]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a89      	ldr	r2, [pc, #548]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b87      	ldr	r3, [pc, #540]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001b1e:	4b84      	ldr	r3, [pc, #528]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a83      	ldr	r2, [pc, #524]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b81      	ldr	r3, [pc, #516]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001b36:	4b7e      	ldr	r3, [pc, #504]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3a:	4a7d      	ldr	r2, [pc, #500]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b40:	6313      	str	r3, [r2, #48]	; 0x30
 8001b42:	4b7b      	ldr	r3, [pc, #492]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4a:	60bb      	str	r3, [r7, #8]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b4e:	4b78      	ldr	r3, [pc, #480]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	4a77      	ldr	r2, [pc, #476]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b54:	f043 0320 	orr.w	r3, r3, #32
 8001b58:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5a:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	f003 0320 	and.w	r3, r3, #32
 8001b62:	607b      	str	r3, [r7, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b66:	4b72      	ldr	r3, [pc, #456]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a71      	ldr	r2, [pc, #452]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b6f      	ldr	r3, [pc, #444]	; (8001d30 <MX_GPIO_Init+0x2d0>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2120      	movs	r1, #32
 8001b82:	486c      	ldr	r0, [pc, #432]	; (8001d34 <MX_GPIO_Init+0x2d4>)
 8001b84:	f004 fe64 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1, GPIO_PIN_RESET);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	210e      	movs	r1, #14
 8001b8c:	486a      	ldr	r0, [pc, #424]	; (8001d38 <MX_GPIO_Init+0x2d8>)
 8001b8e:	f004 fe5f 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001b92:	2201      	movs	r2, #1
 8001b94:	2108      	movs	r1, #8
 8001b96:	4869      	ldr	r0, [pc, #420]	; (8001d3c <MX_GPIO_Init+0x2dc>)
 8001b98:	f004 fe5a 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba2:	4865      	ldr	r0, [pc, #404]	; (8001d38 <MX_GPIO_Init+0x2d8>)
 8001ba4:	f004 fe54 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bae:	4864      	ldr	r0, [pc, #400]	; (8001d40 <MX_GPIO_Init+0x2e0>)
 8001bb0:	f004 fe4e 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001bba:	4862      	ldr	r0, [pc, #392]	; (8001d44 <MX_GPIO_Init+0x2e4>)
 8001bbc:	f004 fe48 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	21c8      	movs	r1, #200	; 0xc8
 8001bc4:	4860      	ldr	r0, [pc, #384]	; (8001d48 <MX_GPIO_Init+0x2e8>)
 8001bc6:	f004 fe43 	bl	8006850 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001bca:	2308      	movs	r3, #8
 8001bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001bd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485b      	ldr	r0, [pc, #364]	; (8001d4c <MX_GPIO_Init+0x2ec>)
 8001bde:	f004 fb7f 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_D2_Pin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001be2:	2304      	movs	r3, #4
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bf2:	2309      	movs	r3, #9
 8001bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4853      	ldr	r0, [pc, #332]	; (8001d4c <MX_GPIO_Init+0x2ec>)
 8001bfe:	f004 fb6f 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001c02:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c14:	230b      	movs	r3, #11
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	484a      	ldr	r0, [pc, #296]	; (8001d48 <MX_GPIO_Init+0x2e8>)
 8001c20:	f004 fb5e 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
  GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001c24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2a:	2312      	movs	r3, #18
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c36:	2304      	movs	r3, #4
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4843      	ldr	r0, [pc, #268]	; (8001d50 <MX_GPIO_Init+0x2f0>)
 8001c42:	f004 fb4d 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8001c46:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c58:	230a      	movs	r3, #10
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	483b      	ldr	r0, [pc, #236]	; (8001d50 <MX_GPIO_Init+0x2f0>)
 8001c64:	f004 fb3c 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPDIF_RX0_Pin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001c68:	2380      	movs	r3, #128	; 0x80
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001c78:	2308      	movs	r3, #8
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	482c      	ldr	r0, [pc, #176]	; (8001d34 <MX_GPIO_Init+0x2d4>)
 8001c84:	f004 fb2c 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_CK_Pin SDMMC_D3_Pin SDMMC_D2_Pin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001c88:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	482b      	ldr	r0, [pc, #172]	; (8001d54 <MX_GPIO_Init+0x2f4>)
 8001ca6:	f004 fb1b 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
  GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8001caa:	2360      	movs	r3, #96	; 0x60
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cba:	230d      	movs	r3, #13
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4821      	ldr	r0, [pc, #132]	; (8001d4c <MX_GPIO_Init+0x2ec>)
 8001cc6:	f004 fb0b 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : QSPI_NCS_Pin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001cca:	2340      	movs	r3, #64	; 0x40
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cda:	230a      	movs	r3, #10
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481a      	ldr	r0, [pc, #104]	; (8001d50 <MX_GPIO_Init+0x2f0>)
 8001ce6:	f004 fafb 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4816      	ldr	r0, [pc, #88]	; (8001d58 <MX_GPIO_Init+0x2f8>)
 8001d00:	f004 faee 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001d04:	2340      	movs	r3, #64	; 0x40
 8001d06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001d08:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_GPIO_Init+0x2fc>)
 8001d0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d14:	4619      	mov	r1, r3
 8001d16:	4807      	ldr	r0, [pc, #28]	; (8001d34 <MX_GPIO_Init+0x2d4>)
 8001d18:	f004 fae2 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8001d1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d2e:	e017      	b.n	8001d60 <MX_GPIO_Init+0x300>
 8001d30:	40023800 	.word	0x40023800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022800 	.word	0x40022800
 8001d40:	40021c00 	.word	0x40021c00
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
 8001d58:	40022400 	.word	0x40022400
 8001d5c:	10120000 	.word	0x10120000
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d60:	230a      	movs	r3, #10
 8001d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d68:	4619      	mov	r1, r3
 8001d6a:	48bb      	ldr	r0, [pc, #748]	; (8002058 <MX_GPIO_Init+0x5f8>)
 8001d6c:	f004 fab8 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI2_MCLKA_Pin SAI2_SCKA_Pin SAI2_FSA_Pin SAI2_SDA_Pin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001d70:	23f0      	movs	r3, #240	; 0xf0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001d80:	230a      	movs	r3, #10
 8001d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	48b4      	ldr	r0, [pc, #720]	; (800205c <MX_GPIO_Init+0x5fc>)
 8001d8c:	f004 faa8 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SAI2_SDB_Pin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8001d90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d96:	2302      	movs	r3, #2
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001da2:	230a      	movs	r3, #10
 8001da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001daa:	4619      	mov	r1, r3
 8001dac:	48ac      	ldr	r0, [pc, #688]	; (8002060 <MX_GPIO_Init+0x600>)
 8001dae:	f004 fa97 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001db2:	2320      	movs	r3, #32
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db6:	2301      	movs	r3, #1
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001dc2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	48a6      	ldr	r0, [pc, #664]	; (8002064 <MX_GPIO_Init+0x604>)
 8001dca:	f004 fa89 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_D5_Pin */
  GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001dce:	2308      	movs	r3, #8
 8001dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001dde:	230d      	movs	r3, #13
 8001de0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001de6:	4619      	mov	r1, r3
 8001de8:	489e      	ldr	r0, [pc, #632]	; (8002064 <MX_GPIO_Init+0x604>)
 8001dea:	f004 fa79 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin PI1 LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|GPIO_PIN_1|LCD_DISP_Pin;
 8001dee:	f241 030e 	movw	r3, #4110	; 0x100e
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df4:	2301      	movs	r3, #1
 8001df6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001e00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e04:	4619      	mov	r1, r3
 8001e06:	4895      	ldr	r0, [pc, #596]	; (800205c <MX_GPIO_Init+0x5fc>)
 8001e08:	f004 fa6a 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001e0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e16:	2300      	movs	r3, #0
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001e1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4891      	ldr	r0, [pc, #580]	; (8002068 <MX_GPIO_Init+0x608>)
 8001e22:	f004 fa5d 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001e26:	2308      	movs	r3, #8
 8001e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	488b      	ldr	r0, [pc, #556]	; (800206c <MX_GPIO_Init+0x60c>)
 8001e3e:	f004 fa4f 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_VSYNC_Pin */
  GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001e54:	230d      	movs	r3, #13
 8001e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4880      	ldr	r0, [pc, #512]	; (8002060 <MX_GPIO_Init+0x600>)
 8001e60:	f004 fa3e 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001e64:	2310      	movs	r3, #16
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e74:	4619      	mov	r1, r3
 8001e76:	487b      	ldr	r0, [pc, #492]	; (8002064 <MX_GPIO_Init+0x604>)
 8001e78:	f004 fa32 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e8c:	230c      	movs	r3, #12
 8001e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e94:	4619      	mov	r1, r3
 8001e96:	4873      	ldr	r0, [pc, #460]	; (8002064 <MX_GPIO_Init+0x604>)
 8001e98:	f004 fa22 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001e9c:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eae:	4619      	mov	r1, r3
 8001eb0:	486f      	ldr	r0, [pc, #444]	; (8002070 <MX_GPIO_Init+0x610>)
 8001eb2:	f004 fa15 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4868      	ldr	r0, [pc, #416]	; (8002070 <MX_GPIO_Init+0x610>)
 8001ed0:	f004 fa06 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
                           DCMI_D1_Pin */
  GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin
 8001ed4:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |DCMI_D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eda:	2302      	movs	r3, #2
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001ee6:	230d      	movs	r3, #13
 8001ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001eee:	4619      	mov	r1, r3
 8001ef0:	485f      	ldr	r0, [pc, #380]	; (8002070 <MX_GPIO_Init+0x610>)
 8001ef2:	f004 f9f5 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001ef6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001efc:	4b5d      	ldr	r3, [pc, #372]	; (8002074 <MX_GPIO_Init+0x614>)
 8001efe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f08:	4619      	mov	r1, r3
 8001f0a:	4854      	ldr	r0, [pc, #336]	; (800205c <MX_GPIO_Init+0x5fc>)
 8001f0c:	f004 f9e8 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f26:	4619      	mov	r1, r3
 8001f28:	484b      	ldr	r0, [pc, #300]	; (8002058 <MX_GPIO_Init+0x5f8>)
 8001f2a:	f004 f9d9 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f34:	4b50      	ldr	r3, [pc, #320]	; (8002078 <MX_GPIO_Init+0x618>)
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001f3c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f40:	4619      	mov	r1, r3
 8001f42:	4846      	ldr	r0, [pc, #280]	; (800205c <MX_GPIO_Init+0x5fc>)
 8001f44:	f004 f9cc 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
  GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8001f48:	23c0      	movs	r3, #192	; 0xc0
 8001f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f58:	2308      	movs	r3, #8
 8001f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f60:	4619      	mov	r1, r3
 8001f62:	4841      	ldr	r0, [pc, #260]	; (8002068 <MX_GPIO_Init+0x608>)
 8001f64:	f004 f9bc 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001f68:	2310      	movs	r3, #16
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001f78:	230a      	movs	r3, #10
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	483b      	ldr	r0, [pc, #236]	; (8002070 <MX_GPIO_Init+0x610>)
 8001f84:	f004 f9ac 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001f88:	23c8      	movs	r3, #200	; 0xc8
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	2300      	movs	r3, #0
 8001f92:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f94:	2300      	movs	r3, #0
 8001f96:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001f98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4830      	ldr	r0, [pc, #192]	; (8002060 <MX_GPIO_Init+0x600>)
 8001fa0:	f004 f99e 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	2300      	movs	r3, #0
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482a      	ldr	r0, [pc, #168]	; (8002068 <MX_GPIO_Init+0x608>)
 8001fc0:	f004 f98e 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fc4:	2332      	movs	r3, #50	; 0x32
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4822      	ldr	r0, [pc, #136]	; (8002068 <MX_GPIO_Init+0x608>)
 8001fe0:	f004 f97e 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001fe4:	2304      	movs	r3, #4
 8001fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001ff4:	2309      	movs	r3, #9
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	481f      	ldr	r0, [pc, #124]	; (800207c <MX_GPIO_Init+0x61c>)
 8002000:	f004 f96e 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8002004:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002016:	2309      	movs	r3, #9
 8002018:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800201e:	4619      	mov	r1, r3
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <MX_GPIO_Init+0x604>)
 8002022:	f004 f95d 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8002026:	2304      	movs	r3, #4
 8002028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202a:	2300      	movs	r3, #0
 800202c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002036:	4619      	mov	r1, r3
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <MX_GPIO_Init+0x600>)
 800203a:	f004 f951 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800203e:	2386      	movs	r3, #134	; 0x86
 8002040:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002046:	2300      	movs	r3, #0
 8002048:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204a:	2303      	movs	r3, #3
 800204c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800204e:	230b      	movs	r3, #11
 8002050:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002052:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002056:	e013      	b.n	8002080 <MX_GPIO_Init+0x620>
 8002058:	40020000 	.word	0x40020000
 800205c:	40022000 	.word	0x40022000
 8002060:	40021800 	.word	0x40021800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40020800 	.word	0x40020800
 800206c:	40022800 	.word	0x40022800
 8002070:	40021c00 	.word	0x40021c00
 8002074:	10110000 	.word	0x10110000
 8002078:	10120000 	.word	0x10120000
 800207c:	40020400 	.word	0x40020400
 8002080:	4619      	mov	r1, r3
 8002082:	4828      	ldr	r0, [pc, #160]	; (8002124 <MX_GPIO_Init+0x6c4>)
 8002084:	f004 f92c 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
  GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8002088:	2350      	movs	r3, #80	; 0x50
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002098:	230d      	movs	r3, #13
 800209a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a0:	4619      	mov	r1, r3
 80020a2:	4820      	ldr	r0, [pc, #128]	; (8002124 <MX_GPIO_Init+0x6c4>)
 80020a4:	f004 f91c 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80020a8:	2328      	movs	r3, #40	; 0x28
 80020aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b4:	2303      	movs	r3, #3
 80020b6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80020b8:	230a      	movs	r3, #10
 80020ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020c0:	4619      	mov	r1, r3
 80020c2:	4818      	ldr	r0, [pc, #96]	; (8002124 <MX_GPIO_Init+0x6c4>)
 80020c4:	f004 f90c 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80020c8:	2340      	movs	r3, #64	; 0x40
 80020ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80020d8:	2309      	movs	r3, #9
 80020da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80020dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020e0:	4619      	mov	r1, r3
 80020e2:	4811      	ldr	r0, [pc, #68]	; (8002128 <MX_GPIO_Init+0x6c8>)
 80020e4:	f004 f8fc 	bl	80062e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80020e8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80020ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020fa:	2305      	movs	r3, #5
 80020fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002102:	4619      	mov	r1, r3
 8002104:	4809      	ldr	r0, [pc, #36]	; (800212c <MX_GPIO_Init+0x6cc>)
 8002106:	f004 f8eb 	bl	80062e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2100      	movs	r1, #0
 800210e:	2028      	movs	r0, #40	; 0x28
 8002110:	f003 fa78 	bl	8005604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002114:	2028      	movs	r0, #40	; 0x28
 8002116:	f003 fa91 	bl	800563c <HAL_NVIC_EnableIRQ>

}
 800211a:	bf00      	nop
 800211c:	3740      	adds	r7, #64	; 0x40
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40020000 	.word	0x40020000
 8002128:	40021c00 	.word	0x40021c00
 800212c:	40020400 	.word	0x40020400

08002130 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002142:	f002 fc8d 	bl	8004a60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	40001000 	.word	0x40001000

08002154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002158:	b672      	cpsid	i
}
 800215a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800215c:	e7fe      	b.n	800215c <Error_Handler+0x8>
	...

08002160 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_MspInit+0x44>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_MspInit+0x44>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002170:	6413      	str	r3, [r2, #64]	; 0x40
 8002172:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_MspInit+0x44>)
 8002174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217a:	607b      	str	r3, [r7, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217e:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_MspInit+0x44>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a08      	ldr	r2, [pc, #32]	; (80021a4 <HAL_MspInit+0x44>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_MspInit+0x44>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800

080021a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
 80021be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a25      	ldr	r2, [pc, #148]	; (800225c <HAL_ADC_MspInit+0xb4>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d144      	bne.n	8002254 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021ca:	4b25      	ldr	r3, [pc, #148]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4a24      	ldr	r2, [pc, #144]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d4:	6453      	str	r3, [r2, #68]	; 0x44
 80021d6:	4b22      	ldr	r3, [pc, #136]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021de:	613b      	str	r3, [r7, #16]
 80021e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80021e2:	4b1f      	ldr	r3, [pc, #124]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a1e      	ldr	r2, [pc, #120]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021e8:	f043 0320 	orr.w	r3, r3, #32
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021fa:	4b19      	ldr	r3, [pc, #100]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	4a18      	ldr	r2, [pc, #96]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	; 0x30
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_ADC_MspInit+0xb8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60bb      	str	r3, [r7, #8]
 8002210:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin
 8002212:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8002216:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002218:	2303      	movs	r3, #3
 800221a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	480f      	ldr	r0, [pc, #60]	; (8002264 <HAL_ADC_MspInit+0xbc>)
 8002228:	f004 f85a 	bl	80062e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 800222c:	2301      	movs	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002230:	2303      	movs	r3, #3
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002234:	2300      	movs	r3, #0
 8002236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	4619      	mov	r1, r3
 800223e:	480a      	ldr	r0, [pc, #40]	; (8002268 <HAL_ADC_MspInit+0xc0>)
 8002240:	f004 f84e 	bl	80062e0 <HAL_GPIO_Init>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002244:	2200      	movs	r2, #0
 8002246:	2100      	movs	r1, #0
 8002248:	2012      	movs	r0, #18
 800224a:	f003 f9db 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800224e:	2012      	movs	r0, #18
 8002250:	f003 f9f4 	bl	800563c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40012200 	.word	0x40012200
 8002260:	40023800 	.word	0x40023800
 8002264:	40021400 	.word	0x40021400
 8002268:	40020000 	.word	0x40020000

0800226c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	; (80022a4 <HAL_CRC_MspInit+0x38>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d10b      	bne.n	8002296 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800227e:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_CRC_MspInit+0x3c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_CRC_MspInit+0x3c>)
 8002284:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002288:	6313      	str	r3, [r2, #48]	; 0x30
 800228a:	4b07      	ldr	r3, [pc, #28]	; (80022a8 <HAL_CRC_MspInit+0x3c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8002296:	bf00      	nop
 8002298:	3714      	adds	r7, #20
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023000 	.word	0x40023000
 80022a8:	40023800 	.word	0x40023800

080022ac <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0d      	ldr	r2, [pc, #52]	; (80022f0 <HAL_DMA2D_MspInit+0x44>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d113      	bne.n	80022e6 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <HAL_DMA2D_MspInit+0x48>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a0c      	ldr	r2, [pc, #48]	; (80022f4 <HAL_DMA2D_MspInit+0x48>)
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <HAL_DMA2D_MspInit+0x48>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	205a      	movs	r0, #90	; 0x5a
 80022dc:	f003 f992 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80022e0:	205a      	movs	r0, #90	; 0x5a
 80022e2:	f003 f9ab 	bl	800563c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80022e6:	bf00      	nop
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	4002b000 	.word	0x4002b000
 80022f4:	40023800 	.word	0x40023800

080022f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a17      	ldr	r2, [pc, #92]	; (8002374 <HAL_I2C_MspInit+0x7c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d128      	bne.n	800236c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800231a:	4b17      	ldr	r3, [pc, #92]	; (8002378 <HAL_I2C_MspInit+0x80>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a16      	ldr	r2, [pc, #88]	; (8002378 <HAL_I2C_MspInit+0x80>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b14      	ldr	r3, [pc, #80]	; (8002378 <HAL_I2C_MspInit+0x80>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8002332:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8002336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002338:	2312      	movs	r3, #18
 800233a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800233c:	2301      	movs	r3, #1
 800233e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002340:	2303      	movs	r3, #3
 8002342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002344:	2304      	movs	r3, #4
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	4619      	mov	r1, r3
 800234e:	480b      	ldr	r0, [pc, #44]	; (800237c <HAL_I2C_MspInit+0x84>)
 8002350:	f003 ffc6 	bl	80062e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	; (8002378 <HAL_I2C_MspInit+0x80>)
 8002356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002358:	4a07      	ldr	r2, [pc, #28]	; (8002378 <HAL_I2C_MspInit+0x80>)
 800235a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800235e:	6413      	str	r3, [r2, #64]	; 0x40
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_I2C_MspInit+0x80>)
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40005c00 	.word	0x40005c00
 8002378:	40023800 	.word	0x40023800
 800237c:	40021c00 	.word	0x40021c00

08002380 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <HAL_I2C_MspDeInit+0x38>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10e      	bne.n	80023b0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8002392:	4b0a      	ldr	r3, [pc, #40]	; (80023bc <HAL_I2C_MspDeInit+0x3c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a09      	ldr	r2, [pc, #36]	; (80023bc <HAL_I2C_MspDeInit+0x3c>)
 8002398:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 800239e:	2180      	movs	r1, #128	; 0x80
 80023a0:	4807      	ldr	r0, [pc, #28]	; (80023c0 <HAL_I2C_MspDeInit+0x40>)
 80023a2:	f004 f949 	bl	8006638 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80023a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <HAL_I2C_MspDeInit+0x40>)
 80023ac:	f004 f944 	bl	8006638 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80023b0:	bf00      	nop
 80023b2:	3708      	adds	r7, #8
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40005c00 	.word	0x40005c00
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40021c00 	.word	0x40021c00

080023c4 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08e      	sub	sp, #56	; 0x38
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a55      	ldr	r2, [pc, #340]	; (8002538 <HAL_LTDC_MspInit+0x174>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	f040 80a3 	bne.w	800252e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80023e8:	4b54      	ldr	r3, [pc, #336]	; (800253c <HAL_LTDC_MspInit+0x178>)
 80023ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ec:	4a53      	ldr	r2, [pc, #332]	; (800253c <HAL_LTDC_MspInit+0x178>)
 80023ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023f2:	6453      	str	r3, [r2, #68]	; 0x44
 80023f4:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_LTDC_MspInit+0x178>)
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80023fc:	623b      	str	r3, [r7, #32]
 80023fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002400:	4b4e      	ldr	r3, [pc, #312]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	4a4d      	ldr	r2, [pc, #308]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002406:	f043 0310 	orr.w	r3, r3, #16
 800240a:	6313      	str	r3, [r2, #48]	; 0x30
 800240c:	4b4b      	ldr	r3, [pc, #300]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f003 0310 	and.w	r3, r3, #16
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002418:	4b48      	ldr	r3, [pc, #288]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	4a47      	ldr	r2, [pc, #284]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800241e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002422:	6313      	str	r3, [r2, #48]	; 0x30
 8002424:	4b45      	ldr	r3, [pc, #276]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002430:	4b42      	ldr	r3, [pc, #264]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002434:	4a41      	ldr	r2, [pc, #260]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002436:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800243a:	6313      	str	r3, [r2, #48]	; 0x30
 800243c:	4b3f      	ldr	r3, [pc, #252]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800243e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002440:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002448:	4b3c      	ldr	r3, [pc, #240]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a3b      	ldr	r2, [pc, #236]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800244e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002452:	6313      	str	r3, [r2, #48]	; 0x30
 8002454:	4b39      	ldr	r3, [pc, #228]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a35      	ldr	r2, [pc, #212]	; (800253c <HAL_LTDC_MspInit+0x178>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b33      	ldr	r3, [pc, #204]	; (800253c <HAL_LTDC_MspInit+0x178>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8002478:	2310      	movs	r3, #16
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002484:	2300      	movs	r3, #0
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002488:	230e      	movs	r3, #14
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	482b      	ldr	r0, [pc, #172]	; (8002540 <HAL_LTDC_MspInit+0x17c>)
 8002494:	f003 ff24 	bl	80062e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8002498:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800249c:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800249e:	2302      	movs	r3, #2
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024aa:	230e      	movs	r3, #14
 80024ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80024ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024b2:	4619      	mov	r1, r3
 80024b4:	4823      	ldr	r0, [pc, #140]	; (8002544 <HAL_LTDC_MspInit+0x180>)
 80024b6:	f003 ff13 	bl	80062e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80024ba:	23f7      	movs	r3, #247	; 0xf7
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024be:	2302      	movs	r3, #2
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c2:	2300      	movs	r3, #0
 80024c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c6:	2300      	movs	r3, #0
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ca:	230e      	movs	r3, #14
 80024cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80024ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	481c      	ldr	r0, [pc, #112]	; (8002548 <HAL_LTDC_MspInit+0x184>)
 80024d6:	f003 ff03 	bl	80062e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80024da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e0:	2302      	movs	r3, #2
 80024e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80024ec:	2309      	movs	r3, #9
 80024ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f4:	4619      	mov	r1, r3
 80024f6:	4815      	ldr	r0, [pc, #84]	; (800254c <HAL_LTDC_MspInit+0x188>)
 80024f8:	f003 fef2 	bl	80062e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80024fc:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800250e:	230e      	movs	r3, #14
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002516:	4619      	mov	r1, r3
 8002518:	480d      	ldr	r0, [pc, #52]	; (8002550 <HAL_LTDC_MspInit+0x18c>)
 800251a:	f003 fee1 	bl	80062e0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	2058      	movs	r0, #88	; 0x58
 8002524:	f003 f86e 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002528:	2058      	movs	r0, #88	; 0x58
 800252a:	f003 f887 	bl	800563c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3738      	adds	r7, #56	; 0x38
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40016800 	.word	0x40016800
 800253c:	40023800 	.word	0x40023800
 8002540:	40021000 	.word	0x40021000
 8002544:	40022400 	.word	0x40022400
 8002548:	40022800 	.word	0x40022800
 800254c:	40021800 	.word	0x40021800
 8002550:	40022000 	.word	0x40022000

08002554 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b090      	sub	sp, #64	; 0x40
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d131      	bne.n	80025da <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002576:	4b77      	ldr	r3, [pc, #476]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a76      	ldr	r2, [pc, #472]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b74      	ldr	r3, [pc, #464]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	62bb      	str	r3, [r7, #40]	; 0x28
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b71      	ldr	r3, [pc, #452]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a70      	ldr	r2, [pc, #448]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b6e      	ldr	r3, [pc, #440]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80025a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025b8:	2301      	movs	r3, #1
 80025ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 80025bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c0:	4619      	mov	r1, r3
 80025c2:	4865      	ldr	r0, [pc, #404]	; (8002758 <HAL_TIM_Base_MspInit+0x204>)
 80025c4:	f003 fe8c 	bl	80062e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2102      	movs	r1, #2
 80025cc:	201c      	movs	r0, #28
 80025ce:	f003 f819 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025d2:	201c      	movs	r0, #28
 80025d4:	f003 f832 	bl	800563c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80025d8:	e0b8      	b.n	800274c <HAL_TIM_Base_MspInit+0x1f8>
  else if(htim_base->Instance==TIM3)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a5f      	ldr	r2, [pc, #380]	; (800275c <HAL_TIM_Base_MspInit+0x208>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d130      	bne.n	8002646 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e4:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	4a5a      	ldr	r2, [pc, #360]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	6413      	str	r3, [r2, #64]	; 0x40
 80025f0:	4b58      	ldr	r3, [pc, #352]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b55      	ldr	r3, [pc, #340]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80025fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002600:	4a54      	ldr	r2, [pc, #336]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	6313      	str	r3, [r2, #48]	; 0x30
 8002608:	4b52      	ldr	r3, [pc, #328]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800260a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	61fb      	str	r3, [r7, #28]
 8002612:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 8002614:	2310      	movs	r3, #16
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002624:	2302      	movs	r3, #2
 8002626:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262c:	4619      	mov	r1, r3
 800262e:	484c      	ldr	r0, [pc, #304]	; (8002760 <HAL_TIM_Base_MspInit+0x20c>)
 8002630:	f003 fe56 	bl	80062e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002634:	2200      	movs	r2, #0
 8002636:	2101      	movs	r1, #1
 8002638:	201d      	movs	r0, #29
 800263a:	f002 ffe3 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800263e:	201d      	movs	r0, #29
 8002640:	f002 fffc 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 8002644:	e082      	b.n	800274c <HAL_TIM_Base_MspInit+0x1f8>
  else if(htim_base->Instance==TIM4)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_TIM_Base_MspInit+0x210>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d114      	bne.n	800267a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6413      	str	r3, [r2, #64]	; 0x40
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	f003 0304 	and.w	r3, r3, #4
 8002664:	61bb      	str	r3, [r7, #24]
 8002666:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002668:	2200      	movs	r2, #0
 800266a:	2100      	movs	r1, #0
 800266c:	201e      	movs	r0, #30
 800266e:	f002 ffc9 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002672:	201e      	movs	r0, #30
 8002674:	f002 ffe2 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 8002678:	e068      	b.n	800274c <HAL_TIM_Base_MspInit+0x1f8>
  else if(htim_base->Instance==TIM5)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a3a      	ldr	r2, [pc, #232]	; (8002768 <HAL_TIM_Base_MspInit+0x214>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d130      	bne.n	80026e6 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002684:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002688:	4a32      	ldr	r2, [pc, #200]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800268a:	f043 0308 	orr.w	r3, r3, #8
 800268e:	6413      	str	r3, [r2, #64]	; 0x40
 8002690:	4b30      	ldr	r3, [pc, #192]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	617b      	str	r3, [r7, #20]
 800269a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800269c:	4b2d      	ldr	r3, [pc, #180]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800269e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a0:	4a2c      	ldr	r2, [pc, #176]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6313      	str	r3, [r2, #48]	; 0x30
 80026a8:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80026b4:	2301      	movs	r3, #1
 80026b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80026c4:	2302      	movs	r3, #2
 80026c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80026c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026cc:	4619      	mov	r1, r3
 80026ce:	4827      	ldr	r0, [pc, #156]	; (800276c <HAL_TIM_Base_MspInit+0x218>)
 80026d0:	f003 fe06 	bl	80062e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	2032      	movs	r0, #50	; 0x32
 80026da:	f002 ff93 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80026de:	2032      	movs	r0, #50	; 0x32
 80026e0:	f002 ffac 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 80026e4:	e032      	b.n	800274c <HAL_TIM_Base_MspInit+0x1f8>
  else if(htim_base->Instance==TIM7)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a21      	ldr	r2, [pc, #132]	; (8002770 <HAL_TIM_Base_MspInit+0x21c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d114      	bne.n	800271a <HAL_TIM_Base_MspInit+0x1c6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	4a17      	ldr	r2, [pc, #92]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80026f6:	f043 0320 	orr.w	r3, r3, #32
 80026fa:	6413      	str	r3, [r2, #64]	; 0x40
 80026fc:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2037      	movs	r0, #55	; 0x37
 800270e:	f002 ff79 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002712:	2037      	movs	r0, #55	; 0x37
 8002714:	f002 ff92 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 8002718:	e018      	b.n	800274c <HAL_TIM_Base_MspInit+0x1f8>
  else if(htim_base->Instance==TIM9)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a15      	ldr	r2, [pc, #84]	; (8002774 <HAL_TIM_Base_MspInit+0x220>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d113      	bne.n	800274c <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	4a0a      	ldr	r2, [pc, #40]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800272e:	6453      	str	r3, [r2, #68]	; 0x44
 8002730:	4b08      	ldr	r3, [pc, #32]	; (8002754 <HAL_TIM_Base_MspInit+0x200>)
 8002732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002738:	60bb      	str	r3, [r7, #8]
 800273a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800273c:	2200      	movs	r2, #0
 800273e:	2100      	movs	r1, #0
 8002740:	2018      	movs	r0, #24
 8002742:	f002 ff5f 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002746:	2018      	movs	r0, #24
 8002748:	f002 ff78 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 800274c:	bf00      	nop
 800274e:	3740      	adds	r7, #64	; 0x40
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	40000400 	.word	0x40000400
 8002760:	40020400 	.word	0x40020400
 8002764:	40000800 	.word	0x40000800
 8002768:	40000c00 	.word	0x40000c00
 800276c:	40022000 	.word	0x40022000
 8002770:	40001400 	.word	0x40001400
 8002774:	40014000 	.word	0x40014000

08002778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 0314 	add.w	r3, r7, #20
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <HAL_UART_MspInit+0xb4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d144      	bne.n	8002824 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800279a:	4b25      	ldr	r3, [pc, #148]	; (8002830 <HAL_UART_MspInit+0xb8>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a24      	ldr	r2, [pc, #144]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027a0:	f043 0310 	orr.w	r3, r3, #16
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b22      	ldr	r3, [pc, #136]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f003 0310 	and.w	r3, r3, #16
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	4a1e      	ldr	r2, [pc, #120]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027b8:	f043 0302 	orr.w	r3, r3, #2
 80027bc:	6313      	str	r3, [r2, #48]	; 0x30
 80027be:	4b1c      	ldr	r3, [pc, #112]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ca:	4b19      	ldr	r3, [pc, #100]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ce:	4a18      	ldr	r2, [pc, #96]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	6313      	str	r3, [r2, #48]	; 0x30
 80027d6:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_UART_MspInit+0xb8>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	60bb      	str	r3, [r7, #8]
 80027e0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e6:	2302      	movs	r3, #2
 80027e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ee:	2300      	movs	r3, #0
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f2:	2307      	movs	r3, #7
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 0314 	add.w	r3, r7, #20
 80027fa:	4619      	mov	r1, r3
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <HAL_UART_MspInit+0xbc>)
 80027fe:	f003 fd6f 	bl	80062e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8002802:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002808:	2302      	movs	r3, #2
 800280a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280c:	2300      	movs	r3, #0
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002814:	2307      	movs	r3, #7
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8002818:	f107 0314 	add.w	r3, r7, #20
 800281c:	4619      	mov	r1, r3
 800281e:	4806      	ldr	r0, [pc, #24]	; (8002838 <HAL_UART_MspInit+0xc0>)
 8002820:	f003 fd5e 	bl	80062e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40011000 	.word	0x40011000
 8002830:	40023800 	.word	0x40023800
 8002834:	40020400 	.word	0x40020400
 8002838:	40020000 	.word	0x40020000

0800283c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002850:	4b3a      	ldr	r3, [pc, #232]	; (800293c <HAL_FMC_MspInit+0x100>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d16d      	bne.n	8002934 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8002858:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_FMC_MspInit+0x100>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_FMC_MspInit+0x104>)
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	4a37      	ldr	r2, [pc, #220]	; (8002940 <HAL_FMC_MspInit+0x104>)
 8002864:	f043 0301 	orr.w	r3, r3, #1
 8002868:	6393      	str	r3, [r2, #56]	; 0x38
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_FMC_MspInit+0x104>)
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	603b      	str	r3, [r7, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8002876:	f64f 7383 	movw	r3, #65411	; 0xff83
 800287a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002884:	2303      	movs	r3, #3
 8002886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002888:	230c      	movs	r3, #12
 800288a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	4619      	mov	r1, r3
 8002890:	482c      	ldr	r0, [pc, #176]	; (8002944 <HAL_FMC_MspInit+0x108>)
 8002892:	f003 fd25 	bl	80062e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8002896:	f248 1333 	movw	r3, #33075	; 0x8133
 800289a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a4:	2303      	movs	r3, #3
 80028a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028a8:	230c      	movs	r3, #12
 80028aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80028ac:	1d3b      	adds	r3, r7, #4
 80028ae:	4619      	mov	r1, r3
 80028b0:	4825      	ldr	r0, [pc, #148]	; (8002948 <HAL_FMC_MspInit+0x10c>)
 80028b2:	f003 fd15 	bl	80062e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 80028b6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80028ba:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028bc:	2302      	movs	r3, #2
 80028be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028c8:	230c      	movs	r3, #12
 80028ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	4619      	mov	r1, r3
 80028d0:	481e      	ldr	r0, [pc, #120]	; (800294c <HAL_FMC_MspInit+0x110>)
 80028d2:	f003 fd05 	bl	80062e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 80028d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80028da:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028dc:	2302      	movs	r3, #2
 80028de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028e4:	2303      	movs	r3, #3
 80028e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80028e8:	230c      	movs	r3, #12
 80028ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	4619      	mov	r1, r3
 80028f0:	4817      	ldr	r0, [pc, #92]	; (8002950 <HAL_FMC_MspInit+0x114>)
 80028f2:	f003 fcf5 	bl	80062e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 80028f6:	2328      	movs	r3, #40	; 0x28
 80028f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fa:	2302      	movs	r3, #2
 80028fc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002902:	2303      	movs	r3, #3
 8002904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002906:	230c      	movs	r3, #12
 8002908:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	4619      	mov	r1, r3
 800290e:	4811      	ldr	r0, [pc, #68]	; (8002954 <HAL_FMC_MspInit+0x118>)
 8002910:	f003 fce6 	bl	80062e0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8002914:	2308      	movs	r3, #8
 8002916:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002920:	2303      	movs	r3, #3
 8002922:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002924:	230c      	movs	r3, #12
 8002926:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	4619      	mov	r1, r3
 800292c:	480a      	ldr	r0, [pc, #40]	; (8002958 <HAL_FMC_MspInit+0x11c>)
 800292e:	f003 fcd7 	bl	80062e0 <HAL_GPIO_Init>
 8002932:	e000      	b.n	8002936 <HAL_FMC_MspInit+0xfa>
    return;
 8002934:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	20000234 	.word	0x20000234
 8002940:	40023800 	.word	0x40023800
 8002944:	40021000 	.word	0x40021000
 8002948:	40021800 	.word	0x40021800
 800294c:	40020c00 	.word	0x40020c00
 8002950:	40021400 	.word	0x40021400
 8002954:	40021c00 	.word	0x40021c00
 8002958:	40020800 	.word	0x40020800

0800295c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002964:	f7ff ff6a 	bl	800283c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08c      	sub	sp, #48	; 0x30
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002980:	2200      	movs	r2, #0
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	2036      	movs	r0, #54	; 0x36
 8002986:	f002 fe3d 	bl	8005604 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800298a:	2036      	movs	r0, #54	; 0x36
 800298c:	f002 fe56 	bl	800563c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_InitTick+0xa0>)
 8002992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002994:	4a1e      	ldr	r2, [pc, #120]	; (8002a10 <HAL_InitTick+0xa0>)
 8002996:	f043 0310 	orr.w	r3, r3, #16
 800299a:	6413      	str	r3, [r2, #64]	; 0x40
 800299c:	4b1c      	ldr	r3, [pc, #112]	; (8002a10 <HAL_InitTick+0xa0>)
 800299e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a0:	f003 0310 	and.w	r3, r3, #16
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a8:	f107 0210 	add.w	r2, r7, #16
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4611      	mov	r1, r2
 80029b2:	4618      	mov	r0, r3
 80029b4:	f005 fd8c 	bl	80084d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029b8:	f005 fd62 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 80029bc:	4603      	mov	r3, r0
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c4:	4a13      	ldr	r2, [pc, #76]	; (8002a14 <HAL_InitTick+0xa4>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9b      	lsrs	r3, r3, #18
 80029cc:	3b01      	subs	r3, #1
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029d0:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_InitTick+0xa8>)
 80029d2:	4a12      	ldr	r2, [pc, #72]	; (8002a1c <HAL_InitTick+0xac>)
 80029d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_InitTick+0xa8>)
 80029d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029dc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029de:	4a0e      	ldr	r2, [pc, #56]	; (8002a18 <HAL_InitTick+0xa8>)
 80029e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_InitTick+0xa8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_InitTick+0xa8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029f0:	4809      	ldr	r0, [pc, #36]	; (8002a18 <HAL_InitTick+0xa8>)
 80029f2:	f006 fa0e 	bl	8008e12 <HAL_TIM_Base_Init>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029fc:	4806      	ldr	r0, [pc, #24]	; (8002a18 <HAL_InitTick+0xa8>)
 80029fe:	f006 fa5f 	bl	8008ec0 <HAL_TIM_Base_Start_IT>
 8002a02:	4603      	mov	r3, r0
 8002a04:	e000      	b.n	8002a08 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3730      	adds	r7, #48	; 0x30
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	40023800 	.word	0x40023800
 8002a14:	431bde83 	.word	0x431bde83
 8002a18:	20000d68 	.word	0x20000d68
 8002a1c:	40001000 	.word	0x40001000

08002a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <NMI_Handler+0x4>

08002a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a2a:	e7fe      	b.n	8002a2a <HardFault_Handler+0x4>

08002a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a30:	e7fe      	b.n	8002a30 <MemManage_Handler+0x4>

08002a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a32:	b480      	push	{r7}
 8002a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a36:	e7fe      	b.n	8002a36 <BusFault_Handler+0x4>

08002a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <UsageFault_Handler+0x4>

08002a3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a42:	bf00      	nop
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a5e:	bf00      	nop
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a6c:	bf00      	nop
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
	...

08002a78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */
	uint32_t val=HAL_ADC_GetValue(&hadc3);
 8002a7e:	4814      	ldr	r0, [pc, #80]	; (8002ad0 <ADC_IRQHandler+0x58>)
 8002a80:	f002 fa8f 	bl	8004fa2 <HAL_ADC_GetValue>
 8002a84:	6078      	str	r0, [r7, #4]
	newpoint(val, time);
 8002a86:	4b13      	ldr	r3, [pc, #76]	; (8002ad4 <ADC_IRQHandler+0x5c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f007 fbe9 	bl	800a264 <newpoint>
	g_value[time] = val;
 8002a92:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <ADC_IRQHandler+0x5c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4910      	ldr	r1, [pc, #64]	; (8002ad8 <ADC_IRQHandler+0x60>)
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if(time < 299){
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <ADC_IRQHandler+0x5c>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8002aa6:	dc05      	bgt.n	8002ab4 <ADC_IRQHandler+0x3c>
		time++;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <ADC_IRQHandler+0x5c>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3301      	adds	r3, #1
 8002aae:	4a09      	ldr	r2, [pc, #36]	; (8002ad4 <ADC_IRQHandler+0x5c>)
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	e005      	b.n	8002ac0 <ADC_IRQHandler+0x48>
	}else{
		time = 0;
 8002ab4:	4b07      	ldr	r3, [pc, #28]	; (8002ad4 <ADC_IRQHandler+0x5c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
		g_frameset = 1;
 8002aba:	4b08      	ldr	r3, [pc, #32]	; (8002adc <ADC_IRQHandler+0x64>)
 8002abc:	2201      	movs	r2, #1
 8002abe:	701a      	strb	r2, [r3, #0]
	value+=100;
	newpoint(value, time);
	//newpoint((uint16_t)(val)/(10^16)+100, time);

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002ac0:	4803      	ldr	r0, [pc, #12]	; (8002ad0 <ADC_IRQHandler+0x58>)
 8002ac2:	f002 f92d 	bl	8004d20 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	20000694 	.word	0x20000694
 8002ad4:	20000238 	.word	0x20000238
 8002ad8:	200007ac 	.word	0x200007ac
 8002adc:	20000230 	.word	0x20000230

08002ae0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */
	//freqcount++;
  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002ae4:	4802      	ldr	r0, [pc, #8]	; (8002af0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002ae6:	f006 fa63 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	20000760 	.word	0x20000760

08002af4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	LED_DispGreen((LED_NbTimes++)%2);
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <TIM2_IRQHandler+0x28>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	4907      	ldr	r1, [pc, #28]	; (8002b1c <TIM2_IRQHandler+0x28>)
 8002b00:	600a      	str	r2, [r1, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	bfb8      	it	lt
 8002b0a:	425b      	neglt	r3, r3
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f007 fc2d 	bl	800a36c <LED_DispGreen>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b12:	4803      	ldr	r0, [pc, #12]	; (8002b20 <TIM2_IRQHandler+0x2c>)
 8002b14:	f006 fa4c 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000438 	.word	0x20000438
 8002b20:	20000c9c 	.word	0x20000c9c

08002b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	//sprintf(str,"Temps = %.1f s",(temps++)/10);
	//BSP_LCD_DisplayStringAtLine(3,str );
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b28:	4802      	ldr	r0, [pc, #8]	; (8002b34 <TIM3_IRQHandler+0x10>)
 8002b2a:	f006 fa41 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	200005a0 	.word	0x200005a0

08002b38 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	if(boucle%2 == 0){
 8002b3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ba8 <TIM4_IRQHandler+0x70>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d126      	bne.n	8002b98 <TIM4_IRQHandler+0x60>
		BSP_TS_GetState(&g_ts);
 8002b4a:	4818      	ldr	r0, [pc, #96]	; (8002bac <TIM4_IRQHandler+0x74>)
 8002b4c:	f001 fd22 	bl	8004594 <BSP_TS_GetState>
		if(g_ts.touchDetected > 0){
 8002b50:	4b16      	ldr	r3, [pc, #88]	; (8002bac <TIM4_IRQHandler+0x74>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01f      	beq.n	8002b98 <TIM4_IRQHandler+0x60>
			if(g_ts.touchX[0] > 240){
 8002b58:	4b14      	ldr	r3, [pc, #80]	; (8002bac <TIM4_IRQHandler+0x74>)
 8002b5a:	885b      	ldrh	r3, [r3, #2]
 8002b5c:	2bf0      	cmp	r3, #240	; 0xf0
 8002b5e:	d903      	bls.n	8002b68 <TIM4_IRQHandler+0x30>
				LED_SetFreqGreen(1);
 8002b60:	2001      	movs	r0, #1
 8002b62:	f007 fc1f 	bl	800a3a4 <LED_SetFreqGreen>
 8002b66:	e002      	b.n	8002b6e <TIM4_IRQHandler+0x36>
			}else{
				LED_SetFreqGreen(4);
 8002b68:	2004      	movs	r0, #4
 8002b6a:	f007 fc1b 	bl	800a3a4 <LED_SetFreqGreen>
			}
			int freq = g_ts.touchX[0]*100/480;
 8002b6e:	4b0f      	ldr	r3, [pc, #60]	; (8002bac <TIM4_IRQHandler+0x74>)
 8002b70:	885b      	ldrh	r3, [r3, #2]
 8002b72:	461a      	mov	r2, r3
 8002b74:	2364      	movs	r3, #100	; 0x64
 8002b76:	fb03 f302 	mul.w	r3, r3, r2
 8002b7a:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <TIM4_IRQHandler+0x78>)
 8002b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8002b80:	441a      	add	r2, r3
 8002b82:	1212      	asrs	r2, r2, #8
 8002b84:	17db      	asrs	r3, r3, #31
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	607b      	str	r3, [r7, #4]

					GENE_SetFreqPin(freq);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f007 fb50 	bl	800a230 <GENE_SetFreqPin>
					//sprintf(str,"frequence = %d Hz ",(freq));
					BSP_LCD_DisplayStringAtLine(5,str );
 8002b90:	4908      	ldr	r1, [pc, #32]	; (8002bb4 <TIM4_IRQHandler+0x7c>)
 8002b92:	2005      	movs	r0, #5
 8002b94:	f001 f82e 	bl	8003bf4 <BSP_LCD_DisplayStringAtLine>
		}

	}
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b98:	4807      	ldr	r0, [pc, #28]	; (8002bb8 <TIM4_IRQHandler+0x80>)
 8002b9a:	f006 fa09 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	2000022c 	.word	0x2000022c
 8002bac:	20000490 	.word	0x20000490
 8002bb0:	88888889 	.word	0x88888889
 8002bb4:	20000e94 	.word	0x20000e94
 8002bb8:	200004bc 	.word	0x200004bc

08002bbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if(__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <EXTI15_10_IRQHandler+0x28>)
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d004      	beq.n	8002bd6 <EXTI15_10_IRQHandler+0x1a>
		boucle++;
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <EXTI15_10_IRQHandler+0x2c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	4a05      	ldr	r2, [pc, #20]	; (8002be8 <EXTI15_10_IRQHandler+0x2c>)
 8002bd4:	6013      	str	r3, [r2, #0]
	  }
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002bd6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002bda:	f003 fe53 	bl	8006884 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40013c00 	.word	0x40013c00
 8002be8:	2000022c 	.word	0x2000022c

08002bec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	GENE_TogglePin();
 8002bf0:	f007 fafe 	bl	800a1f0 <GENE_TogglePin>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002bf4:	4802      	ldr	r0, [pc, #8]	; (8002c00 <TIM5_IRQHandler+0x14>)
 8002bf6:	f006 f9db 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002bfa:	bf00      	nop
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	20000554 	.word	0x20000554

08002c04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c08:	4802      	ldr	r0, [pc, #8]	; (8002c14 <TIM6_DAC_IRQHandler+0x10>)
 8002c0a:	f006 f9d1 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	20000d68 	.word	0x20000d68

08002c18 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	HAL_ADC_Start_IT(&hadc3);
 8002c1c:	4803      	ldr	r0, [pc, #12]	; (8002c2c <TIM7_IRQHandler+0x14>)
 8002c1e:	f001 ffa7 	bl	8004b70 <HAL_ADC_Start_IT>

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c22:	4803      	ldr	r0, [pc, #12]	; (8002c30 <TIM7_IRQHandler+0x18>)
 8002c24:	f006 f9c4 	bl	8008fb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20000694 	.word	0x20000694
 8002c30:	20000d1c 	.word	0x20000d1c

08002c34 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002c38:	4802      	ldr	r0, [pc, #8]	; (8002c44 <LTDC_IRQHandler+0x10>)
 8002c3a:	f004 fcc7 	bl	80075cc <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200005ec 	.word	0x200005ec

08002c48 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <DMA2D_IRQHandler+0x10>)
 8002c4e:	f003 f909 	bl	8005e64 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000c5c 	.word	0x20000c5c

08002c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
	return 1;
 8002c60:	2301      	movs	r3, #1
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <_kill>:

int _kill(int pid, int sig)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c76:	f007 fbaf 	bl	800a3d8 <__errno>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2216      	movs	r2, #22
 8002c7e:	601a      	str	r2, [r3, #0]
	return -1;
 8002c80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <_exit>:

void _exit (int status)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7ff ffe7 	bl	8002c6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c9e:	e7fe      	b.n	8002c9e <_exit+0x12>

08002ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cac:	2300      	movs	r3, #0
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	e00a      	b.n	8002cc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002cb2:	f3af 8000 	nop.w
 8002cb6:	4601      	mov	r1, r0
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	1c5a      	adds	r2, r3, #1
 8002cbc:	60ba      	str	r2, [r7, #8]
 8002cbe:	b2ca      	uxtb	r2, r1
 8002cc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	dbf0      	blt.n	8002cb2 <_read+0x12>
	}

return len;
 8002cd0:	687b      	ldr	r3, [r7, #4]
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}

08002cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002cda:	b580      	push	{r7, lr}
 8002cdc:	b086      	sub	sp, #24
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	60f8      	str	r0, [r7, #12]
 8002ce2:	60b9      	str	r1, [r7, #8]
 8002ce4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
 8002cea:	e009      	b.n	8002d00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	60ba      	str	r2, [r7, #8]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	697a      	ldr	r2, [r7, #20]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	dbf1      	blt.n	8002cec <_write+0x12>
	}
	return len;
 8002d08:	687b      	ldr	r3, [r7, #4]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <_close>:

int _close(int file)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
	return -1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d3a:	605a      	str	r2, [r3, #4]
	return 0;
 8002d3c:	2300      	movs	r3, #0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr

08002d4a <_isatty>:

int _isatty(int file)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
	return 1;
 8002d52:	2301      	movs	r3, #1
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
	return 0;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d84:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <_sbrk+0x5c>)
 8002d86:	4b15      	ldr	r3, [pc, #84]	; (8002ddc <_sbrk+0x60>)
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d90:	4b13      	ldr	r3, [pc, #76]	; (8002de0 <_sbrk+0x64>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d102      	bne.n	8002d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d98:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <_sbrk+0x64>)
 8002d9a:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <_sbrk+0x68>)
 8002d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <_sbrk+0x64>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d207      	bcs.n	8002dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dac:	f007 fb14 	bl	800a3d8 <__errno>
 8002db0:	4603      	mov	r3, r0
 8002db2:	220c      	movs	r2, #12
 8002db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002db6:	f04f 33ff 	mov.w	r3, #4294967295
 8002dba:	e009      	b.n	8002dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <_sbrk+0x64>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dc2:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <_sbrk+0x64>)
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <_sbrk+0x64>)
 8002dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002dce:	68fb      	ldr	r3, [r7, #12]
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3718      	adds	r7, #24
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	20050000 	.word	0x20050000
 8002ddc:	00000400 	.word	0x00000400
 8002de0:	2000023c 	.word	0x2000023c
 8002de4:	20000ef8 	.word	0x20000ef8

08002de8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002dec:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <SystemInit+0x20>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <SystemInit+0x20>)
 8002df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e10:	480d      	ldr	r0, [pc, #52]	; (8002e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e12:	490e      	ldr	r1, [pc, #56]	; (8002e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e14:	4a0e      	ldr	r2, [pc, #56]	; (8002e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e18:	e002      	b.n	8002e20 <LoopCopyDataInit>

08002e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1e:	3304      	adds	r3, #4

08002e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e24:	d3f9      	bcc.n	8002e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e26:	4a0b      	ldr	r2, [pc, #44]	; (8002e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e28:	4c0b      	ldr	r4, [pc, #44]	; (8002e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e2c:	e001      	b.n	8002e32 <LoopFillZerobss>

08002e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e30:	3204      	adds	r2, #4

08002e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e34:	d3fb      	bcc.n	8002e2e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e36:	f7ff ffd7 	bl	8002de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e3a:	f007 fad3 	bl	800a3e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e3e:	f7fe f84f 	bl	8000ee0 <main>
  bx  lr    
 8002e42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e44:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e4c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8002e50:	0800f054 	.word	0x0800f054
  ldr r2, =_sbss
 8002e54:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8002e58:	20000ef4 	.word	0x20000ef4

08002e5c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e5c:	e7fe      	b.n	8002e5c <CAN1_RX0_IRQHandler>

08002e5e <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b082      	sub	sp, #8
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8002e68:	20c8      	movs	r0, #200	; 0xc8
 8002e6a:	f000 fc33 	bl	80036d4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002e6e:	f000 fa7b 	bl	8003368 <ft5336_I2C_InitializeIfRequired>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4603      	mov	r3, r0
 8002e98:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8002ea6:	f000 fa5f 	bl	8003368 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	73fb      	strb	r3, [r7, #15]
 8002eae:	e010      	b.n	8002ed2 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8002eb0:	88fb      	ldrh	r3, [r7, #6]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	21a8      	movs	r1, #168	; 0xa8
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fbee 	bl	8003698 <TS_IO_Read>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8002ec0:	7b7b      	ldrb	r3, [r7, #13]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b51      	cmp	r3, #81	; 0x51
 8002ec6:	d101      	bne.n	8002ecc <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	73fb      	strb	r3, [r7, #15]
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d802      	bhi.n	8002ede <ft5336_ReadID+0x4e>
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0e8      	beq.n	8002eb0 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8002ede:	7b7b      	ldrb	r3, [r7, #13]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	b29b      	uxth	r3, r3
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fa45 	bl	8003388 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f000 f933 	bl	800316c <ft5336_TS_DisableIT>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8002f1e:	88fb      	ldrh	r3, [r7, #6]
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2102      	movs	r1, #2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fbb7 	bl	8003698 <TS_IO_Read>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d901      	bls.n	8002f46 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b05      	ldr	r3, [pc, #20]	; (8002f60 <ft5336_TS_DetectTouch+0x50>)
 8002f4c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8002f4e:	4b04      	ldr	r3, [pc, #16]	; (8002f60 <ft5336_TS_DetectTouch+0x50>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8002f54:	7bfb      	ldrb	r3, [r7, #15]
 8002f56:	b2db      	uxtb	r3, r3
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3710      	adds	r7, #16
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000240 	.word	0x20000240

08002f64 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	607a      	str	r2, [r7, #4]
 8002f70:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8002f86:	4b6d      	ldr	r3, [pc, #436]	; (800313c <ft5336_TS_GetXY+0x1d8>)
 8002f88:	789a      	ldrb	r2, [r3, #2]
 8002f8a:	4b6c      	ldr	r3, [pc, #432]	; (800313c <ft5336_TS_GetXY+0x1d8>)
 8002f8c:	785b      	ldrb	r3, [r3, #1]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	f080 80cf 	bcs.w	8003132 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8002f94:	4b69      	ldr	r3, [pc, #420]	; (800313c <ft5336_TS_GetXY+0x1d8>)
 8002f96:	789b      	ldrb	r3, [r3, #2]
 8002f98:	2b09      	cmp	r3, #9
 8002f9a:	d871      	bhi.n	8003080 <ft5336_TS_GetXY+0x11c>
 8002f9c:	a201      	add	r2, pc, #4	; (adr r2, 8002fa4 <ft5336_TS_GetXY+0x40>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08002fcd 	.word	0x08002fcd
 8002fa8:	08002fdf 	.word	0x08002fdf
 8002fac:	08002ff1 	.word	0x08002ff1
 8002fb0:	08003003 	.word	0x08003003
 8002fb4:	08003015 	.word	0x08003015
 8002fb8:	08003027 	.word	0x08003027
 8002fbc:	08003039 	.word	0x08003039
 8002fc0:	0800304b 	.word	0x0800304b
 8002fc4:	0800305d 	.word	0x0800305d
 8002fc8:	0800306f 	.word	0x0800306f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8002fcc:	2304      	movs	r3, #4
 8002fce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8002fd4:	2306      	movs	r3, #6
 8002fd6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8002fd8:	2305      	movs	r3, #5
 8002fda:	753b      	strb	r3, [r7, #20]
      break;
 8002fdc:	e051      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8002fde:	230a      	movs	r3, #10
 8002fe0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8002fe2:	2309      	movs	r3, #9
 8002fe4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8002fe6:	230c      	movs	r3, #12
 8002fe8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8002fea:	230b      	movs	r3, #11
 8002fec:	753b      	strb	r3, [r7, #20]
      break;
 8002fee:	e048      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8002ff4:	230f      	movs	r3, #15
 8002ff6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8002ff8:	2312      	movs	r3, #18
 8002ffa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8002ffc:	2311      	movs	r3, #17
 8002ffe:	753b      	strb	r3, [r7, #20]
      break;
 8003000:	e03f      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8003002:	2316      	movs	r3, #22
 8003004:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8003006:	2315      	movs	r3, #21
 8003008:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800300a:	2318      	movs	r3, #24
 800300c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800300e:	2317      	movs	r3, #23
 8003010:	753b      	strb	r3, [r7, #20]
      break;
 8003012:	e036      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8003014:	231c      	movs	r3, #28
 8003016:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8003018:	231b      	movs	r3, #27
 800301a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800301c:	231e      	movs	r3, #30
 800301e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8003020:	231d      	movs	r3, #29
 8003022:	753b      	strb	r3, [r7, #20]
      break;
 8003024:	e02d      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8003026:	2322      	movs	r3, #34	; 0x22
 8003028:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800302a:	2321      	movs	r3, #33	; 0x21
 800302c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800302e:	2324      	movs	r3, #36	; 0x24
 8003030:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8003032:	2323      	movs	r3, #35	; 0x23
 8003034:	753b      	strb	r3, [r7, #20]
      break;
 8003036:	e024      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8003038:	2328      	movs	r3, #40	; 0x28
 800303a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800303c:	2327      	movs	r3, #39	; 0x27
 800303e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8003040:	232a      	movs	r3, #42	; 0x2a
 8003042:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8003044:	2329      	movs	r3, #41	; 0x29
 8003046:	753b      	strb	r3, [r7, #20]
      break;
 8003048:	e01b      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800304a:	232e      	movs	r3, #46	; 0x2e
 800304c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800304e:	232d      	movs	r3, #45	; 0x2d
 8003050:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8003052:	2330      	movs	r3, #48	; 0x30
 8003054:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8003056:	232f      	movs	r3, #47	; 0x2f
 8003058:	753b      	strb	r3, [r7, #20]
      break;
 800305a:	e012      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800305c:	2334      	movs	r3, #52	; 0x34
 800305e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8003060:	2333      	movs	r3, #51	; 0x33
 8003062:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8003064:	2336      	movs	r3, #54	; 0x36
 8003066:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8003068:	2335      	movs	r3, #53	; 0x35
 800306a:	753b      	strb	r3, [r7, #20]
      break;
 800306c:	e009      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800306e:	233a      	movs	r3, #58	; 0x3a
 8003070:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8003072:	2339      	movs	r3, #57	; 0x39
 8003074:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8003076:	233c      	movs	r3, #60	; 0x3c
 8003078:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800307a:	233b      	movs	r3, #59	; 0x3b
 800307c:	753b      	strb	r3, [r7, #20]
      break;
 800307e:	e000      	b.n	8003082 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8003080:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8003082:	89fb      	ldrh	r3, [r7, #14]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	7dfa      	ldrb	r2, [r7, #23]
 8003088:	4611      	mov	r1, r2
 800308a:	4618      	mov	r0, r3
 800308c:	f000 fb04 	bl	8003698 <TS_IO_Read>
 8003090:	4603      	mov	r3, r0
 8003092:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	b29a      	uxth	r2, r3
 800309a:	4b29      	ldr	r3, [pc, #164]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 800309c:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800309e:	89fb      	ldrh	r3, [r7, #14]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	7dba      	ldrb	r2, [r7, #22]
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 faf6 	bl	8003698 <TS_IO_Read>
 80030ac:	4603      	mov	r3, r0
 80030ae:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030ba:	b21a      	sxth	r2, r3
 80030bc:	4b20      	ldr	r3, [pc, #128]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	b21b      	sxth	r3, r3
 80030c2:	4313      	orrs	r3, r2
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 80030ca:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 80030ce:	881a      	ldrh	r2, [r3, #0]
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80030d4:	89fb      	ldrh	r3, [r7, #14]
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	7d7a      	ldrb	r2, [r7, #21]
 80030da:	4611      	mov	r1, r2
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fadb 	bl	8003698 <TS_IO_Read>
 80030e2:	4603      	mov	r3, r0
 80030e4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80030e6:	7cfb      	ldrb	r3, [r7, #19]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 80030ee:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80030f0:	89fb      	ldrh	r3, [r7, #14]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	7d3a      	ldrb	r2, [r7, #20]
 80030f6:	4611      	mov	r1, r2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f000 facd 	bl	8003698 <TS_IO_Read>
 80030fe:	4603      	mov	r3, r0
 8003100:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8003102:	7cfb      	ldrb	r3, [r7, #19]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	021b      	lsls	r3, r3, #8
 8003108:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800310c:	b21a      	sxth	r2, r3
 800310e:	4b0c      	ldr	r3, [pc, #48]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b21b      	sxth	r3, r3
 8003114:	4313      	orrs	r3, r2
 8003116:	b21b      	sxth	r3, r3
 8003118:	b29a      	uxth	r2, r3
 800311a:	4b09      	ldr	r3, [pc, #36]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 800311c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <ft5336_TS_GetXY+0x1dc>)
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8003126:	4b05      	ldr	r3, [pc, #20]	; (800313c <ft5336_TS_GetXY+0x1d8>)
 8003128:	789b      	ldrb	r3, [r3, #2]
 800312a:	3301      	adds	r3, #1
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b03      	ldr	r3, [pc, #12]	; (800313c <ft5336_TS_GetXY+0x1d8>)
 8003130:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003132:	bf00      	nop
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000240 	.word	0x20000240
 8003140:	20000244 	.word	0x20000244

08003144 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800314e:	2300      	movs	r3, #0
 8003150:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	7bfa      	ldrb	r2, [r7, #15]
 800315c:	21a4      	movs	r1, #164	; 0xa4
 800315e:	4618      	mov	r0, r3
 8003160:	f000 fa80 	bl	8003664 <TS_IO_Write>
}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8003176:	2300      	movs	r3, #0
 8003178:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800317a:	2300      	movs	r3, #0
 800317c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800317e:	88fb      	ldrh	r3, [r7, #6]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	7bfa      	ldrb	r2, [r7, #15]
 8003184:	21a4      	movs	r1, #164	; 0xa4
 8003186:	4618      	mov	r0, r3
 8003188:	f000 fa6c 	bl	8003664 <TS_IO_Write>
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	4603      	mov	r3, r0
 80031ca:	6039      	str	r1, [r7, #0]
 80031cc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2101      	movs	r1, #1
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 fa5d 	bl	8003698 <TS_IO_Read>
 80031de:	4603      	mov	r3, r0
 80031e0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	601a      	str	r2, [r3, #0]
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4603      	mov	r3, r0
 8003202:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8003210:	2300      	movs	r3, #0
 8003212:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8003214:	4b4d      	ldr	r3, [pc, #308]	; (800334c <ft5336_TS_GetTouchInfo+0x158>)
 8003216:	785b      	ldrb	r3, [r3, #1]
 8003218:	461a      	mov	r2, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	4293      	cmp	r3, r2
 800321e:	f080 8090 	bcs.w	8003342 <ft5336_TS_GetTouchInfo+0x14e>
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2b09      	cmp	r3, #9
 8003226:	d85d      	bhi.n	80032e4 <ft5336_TS_GetTouchInfo+0xf0>
 8003228:	a201      	add	r2, pc, #4	; (adr r2, 8003230 <ft5336_TS_GetTouchInfo+0x3c>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	08003259 	.word	0x08003259
 8003234:	08003267 	.word	0x08003267
 8003238:	08003275 	.word	0x08003275
 800323c:	08003283 	.word	0x08003283
 8003240:	08003291 	.word	0x08003291
 8003244:	0800329f 	.word	0x0800329f
 8003248:	080032ad 	.word	0x080032ad
 800324c:	080032bb 	.word	0x080032bb
 8003250:	080032c9 	.word	0x080032c9
 8003254:	080032d7 	.word	0x080032d7
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8003258:	2303      	movs	r3, #3
 800325a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800325c:	2307      	movs	r3, #7
 800325e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8003260:	2308      	movs	r3, #8
 8003262:	757b      	strb	r3, [r7, #21]
      break;
 8003264:	e03f      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8003266:	2309      	movs	r3, #9
 8003268:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800326a:	230d      	movs	r3, #13
 800326c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800326e:	230e      	movs	r3, #14
 8003270:	757b      	strb	r3, [r7, #21]
      break;
 8003272:	e038      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8003274:	230f      	movs	r3, #15
 8003276:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8003278:	2313      	movs	r3, #19
 800327a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800327c:	2314      	movs	r3, #20
 800327e:	757b      	strb	r3, [r7, #21]
      break;
 8003280:	e031      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8003282:	2315      	movs	r3, #21
 8003284:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8003286:	2319      	movs	r3, #25
 8003288:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800328a:	231a      	movs	r3, #26
 800328c:	757b      	strb	r3, [r7, #21]
      break;
 800328e:	e02a      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8003290:	231b      	movs	r3, #27
 8003292:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8003294:	231f      	movs	r3, #31
 8003296:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8003298:	2320      	movs	r3, #32
 800329a:	757b      	strb	r3, [r7, #21]
      break;
 800329c:	e023      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800329e:	2321      	movs	r3, #33	; 0x21
 80032a0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80032a2:	2325      	movs	r3, #37	; 0x25
 80032a4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80032a6:	2326      	movs	r3, #38	; 0x26
 80032a8:	757b      	strb	r3, [r7, #21]
      break;
 80032aa:	e01c      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80032ac:	2327      	movs	r3, #39	; 0x27
 80032ae:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80032b0:	232b      	movs	r3, #43	; 0x2b
 80032b2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80032b4:	232c      	movs	r3, #44	; 0x2c
 80032b6:	757b      	strb	r3, [r7, #21]
      break;
 80032b8:	e015      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80032ba:	232d      	movs	r3, #45	; 0x2d
 80032bc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80032be:	2331      	movs	r3, #49	; 0x31
 80032c0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80032c2:	2332      	movs	r3, #50	; 0x32
 80032c4:	757b      	strb	r3, [r7, #21]
      break;
 80032c6:	e00e      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80032c8:	2333      	movs	r3, #51	; 0x33
 80032ca:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80032cc:	2337      	movs	r3, #55	; 0x37
 80032ce:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80032d0:	2338      	movs	r3, #56	; 0x38
 80032d2:	757b      	strb	r3, [r7, #21]
      break;
 80032d4:	e007      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80032d6:	2339      	movs	r3, #57	; 0x39
 80032d8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80032da:	233d      	movs	r3, #61	; 0x3d
 80032dc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80032de:	233e      	movs	r3, #62	; 0x3e
 80032e0:	757b      	strb	r3, [r7, #21]
      break;
 80032e2:	e000      	b.n	80032e6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80032e4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	7dfa      	ldrb	r2, [r7, #23]
 80032ec:	4611      	mov	r1, r2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f9d2 	bl	8003698 <TS_IO_Read>
 80032f4:	4603      	mov	r3, r0
 80032f6:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 80032f8:	7d3b      	ldrb	r3, [r7, #20]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	119b      	asrs	r3, r3, #6
 80032fe:	f003 0203 	and.w	r2, r3, #3
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	7dba      	ldrb	r2, [r7, #22]
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f9c2 	bl	8003698 <TS_IO_Read>
 8003314:	4603      	mov	r3, r0
 8003316:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8003318:	7d3b      	ldrb	r3, [r7, #20]
 800331a:	b2db      	uxtb	r3, r3
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8003322:	89fb      	ldrh	r3, [r7, #14]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	7d7a      	ldrb	r2, [r7, #21]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 f9b4 	bl	8003698 <TS_IO_Read>
 8003330:	4603      	mov	r3, r0
 8003332:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8003334:	7d3b      	ldrb	r3, [r7, #20]
 8003336:	b2db      	uxtb	r3, r3
 8003338:	111b      	asrs	r3, r3, #4
 800333a:	f003 0204 	and.w	r2, r3, #4
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	20000240 	.word	0x20000240

08003350 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8003354:	4b03      	ldr	r3, [pc, #12]	; (8003364 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8003356:	781b      	ldrb	r3, [r3, #0]
}
 8003358:	4618      	mov	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	20000240 	.word	0x20000240

08003368 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800336c:	f7ff fff0 	bl	8003350 <ft5336_Get_I2C_InitializedStatus>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8003376:	f000 f96b 	bl	8003650 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800337a:	4b02      	ldr	r3, [pc, #8]	; (8003384 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800337c:	2201      	movs	r2, #1
 800337e:	701a      	strb	r2, [r3, #0]
  }
}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000240 	.word	0x20000240

08003388 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8003388:	b480      	push	{r7}
 800338a:	b085      	sub	sp, #20
 800338c:	af00      	add	r7, sp, #0
 800338e:	4603      	mov	r3, r0
 8003390:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8003396:	68fb      	ldr	r3, [r7, #12]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	; 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a51      	ldr	r2, [pc, #324]	; (80034f4 <I2Cx_MspInit+0x150>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d14d      	bne.n	8003450 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <I2Cx_MspInit+0x154>)
 80033b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b8:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <I2Cx_MspInit+0x154>)
 80033ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033be:	6313      	str	r3, [r2, #48]	; 0x30
 80033c0:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <I2Cx_MspInit+0x154>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033d0:	2312      	movs	r3, #18
 80033d2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80033d4:	2300      	movs	r3, #0
 80033d6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80033d8:	2302      	movs	r3, #2
 80033da:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80033dc:	2304      	movs	r3, #4
 80033de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033e0:	f107 031c 	add.w	r3, r7, #28
 80033e4:	4619      	mov	r1, r3
 80033e6:	4845      	ldr	r0, [pc, #276]	; (80034fc <I2Cx_MspInit+0x158>)
 80033e8:	f002 ff7a 	bl	80062e0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80033ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033f2:	f107 031c 	add.w	r3, r7, #28
 80033f6:	4619      	mov	r1, r3
 80033f8:	4840      	ldr	r0, [pc, #256]	; (80034fc <I2Cx_MspInit+0x158>)
 80033fa:	f002 ff71 	bl	80062e0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80033fe:	4b3e      	ldr	r3, [pc, #248]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	4a3d      	ldr	r2, [pc, #244]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003408:	6413      	str	r3, [r2, #64]	; 0x40
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <I2Cx_MspInit+0x154>)
 800340c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8003416:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a37      	ldr	r2, [pc, #220]	; (80034f8 <I2Cx_MspInit+0x154>)
 800341c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003420:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003422:	4b35      	ldr	r3, [pc, #212]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a34      	ldr	r2, [pc, #208]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003428:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800342c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	210f      	movs	r1, #15
 8003432:	2048      	movs	r0, #72	; 0x48
 8003434:	f002 f8e6 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8003438:	2048      	movs	r0, #72	; 0x48
 800343a:	f002 f8ff 	bl	800563c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800343e:	2200      	movs	r2, #0
 8003440:	210f      	movs	r1, #15
 8003442:	2049      	movs	r0, #73	; 0x49
 8003444:	f002 f8de 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8003448:	2049      	movs	r0, #73	; 0x49
 800344a:	f002 f8f7 	bl	800563c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800344e:	e04d      	b.n	80034ec <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003450:	4b29      	ldr	r3, [pc, #164]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <I2Cx_MspInit+0x154>)
 8003456:	f043 0302 	orr.w	r3, r3, #2
 800345a:	6313      	str	r3, [r2, #48]	; 0x30
 800345c:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <I2Cx_MspInit+0x154>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8003468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800346c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800346e:	2312      	movs	r3, #18
 8003470:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8003476:	2302      	movs	r3, #2
 8003478:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800347a:	2304      	movs	r3, #4
 800347c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800347e:	f107 031c 	add.w	r3, r7, #28
 8003482:	4619      	mov	r1, r3
 8003484:	481e      	ldr	r0, [pc, #120]	; (8003500 <I2Cx_MspInit+0x15c>)
 8003486:	f002 ff2b 	bl	80062e0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800348a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800348e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003490:	f107 031c 	add.w	r3, r7, #28
 8003494:	4619      	mov	r1, r3
 8003496:	481a      	ldr	r0, [pc, #104]	; (8003500 <I2Cx_MspInit+0x15c>)
 8003498:	f002 ff22 	bl	80062e0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <I2Cx_MspInit+0x154>)
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <I2Cx_MspInit+0x154>)
 80034a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034a6:	6413      	str	r3, [r2, #64]	; 0x40
 80034a8:	4b13      	ldr	r3, [pc, #76]	; (80034f8 <I2Cx_MspInit+0x154>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <I2Cx_MspInit+0x154>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	4a0f      	ldr	r2, [pc, #60]	; (80034f8 <I2Cx_MspInit+0x154>)
 80034ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034be:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80034c0:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <I2Cx_MspInit+0x154>)
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	4a0c      	ldr	r2, [pc, #48]	; (80034f8 <I2Cx_MspInit+0x154>)
 80034c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ca:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	210f      	movs	r1, #15
 80034d0:	201f      	movs	r0, #31
 80034d2:	f002 f897 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80034d6:	201f      	movs	r0, #31
 80034d8:	f002 f8b0 	bl	800563c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80034dc:	2200      	movs	r2, #0
 80034de:	210f      	movs	r1, #15
 80034e0:	2020      	movs	r0, #32
 80034e2:	f002 f88f 	bl	8005604 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80034e6:	2020      	movs	r0, #32
 80034e8:	f002 f8a8 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 80034ec:	bf00      	nop
 80034ee:	3730      	adds	r7, #48	; 0x30
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	20000248 	.word	0x20000248
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40021c00 	.word	0x40021c00
 8003500:	40020400 	.word	0x40020400

08003504 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f003 fccb 	bl	8006ea8 <HAL_I2C_GetState>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d125      	bne.n	8003564 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <I2Cx_Init+0x68>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d103      	bne.n	8003528 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a13      	ldr	r2, [pc, #76]	; (8003570 <I2Cx_Init+0x6c>)
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	e002      	b.n	800352e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a12      	ldr	r2, [pc, #72]	; (8003574 <I2Cx_Init+0x70>)
 800352c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <I2Cx_Init+0x74>)
 8003532:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ff23 	bl	80033a4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f003 f9b4 	bl	80068cc <HAL_I2C_Init>
  }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000248 	.word	0x20000248
 8003570:	40005c00 	.word	0x40005c00
 8003574:	40005400 	.word	0x40005400
 8003578:	40912732 	.word	0x40912732

0800357c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b08a      	sub	sp, #40	; 0x28
 8003580:	af04      	add	r7, sp, #16
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	4608      	mov	r0, r1
 8003586:	4611      	mov	r1, r2
 8003588:	461a      	mov	r2, r3
 800358a:	4603      	mov	r3, r0
 800358c:	72fb      	strb	r3, [r7, #11]
 800358e:	460b      	mov	r3, r1
 8003590:	813b      	strh	r3, [r7, #8]
 8003592:	4613      	mov	r3, r2
 8003594:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800359a:	7afb      	ldrb	r3, [r7, #11]
 800359c:	b299      	uxth	r1, r3
 800359e:	88f8      	ldrh	r0, [r7, #6]
 80035a0:	893a      	ldrh	r2, [r7, #8]
 80035a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035a6:	9302      	str	r3, [sp, #8]
 80035a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035aa:	9301      	str	r3, [sp, #4]
 80035ac:	6a3b      	ldr	r3, [r7, #32]
 80035ae:	9300      	str	r3, [sp, #0]
 80035b0:	4603      	mov	r3, r0
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f003 fb5e 	bl	8006c74 <HAL_I2C_Mem_Read>
 80035b8:	4603      	mov	r3, r0
 80035ba:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80035bc:	7dfb      	ldrb	r3, [r7, #23]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d004      	beq.n	80035cc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	4619      	mov	r1, r3
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f832 	bl	8003630 <I2Cx_Error>
  }
  return status;    
 80035cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b08a      	sub	sp, #40	; 0x28
 80035da:	af04      	add	r7, sp, #16
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	4608      	mov	r0, r1
 80035e0:	4611      	mov	r1, r2
 80035e2:	461a      	mov	r2, r3
 80035e4:	4603      	mov	r3, r0
 80035e6:	72fb      	strb	r3, [r7, #11]
 80035e8:	460b      	mov	r3, r1
 80035ea:	813b      	strh	r3, [r7, #8]
 80035ec:	4613      	mov	r3, r2
 80035ee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80035f4:	7afb      	ldrb	r3, [r7, #11]
 80035f6:	b299      	uxth	r1, r3
 80035f8:	88f8      	ldrh	r0, [r7, #6]
 80035fa:	893a      	ldrh	r2, [r7, #8]
 80035fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003600:	9302      	str	r3, [sp, #8]
 8003602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003604:	9301      	str	r3, [sp, #4]
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	4603      	mov	r3, r0
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f003 fa1d 	bl	8006a4c <HAL_I2C_Mem_Write>
 8003612:	4603      	mov	r3, r0
 8003614:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8003616:	7dfb      	ldrb	r3, [r7, #23]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d004      	beq.n	8003626 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800361c:	7afb      	ldrb	r3, [r7, #11]
 800361e:	4619      	mov	r1, r3
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f805 	bl	8003630 <I2Cx_Error>
  }
  return status;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
 8003638:	460b      	mov	r3, r1
 800363a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f003 f9d5 	bl	80069ec <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff ff5e 	bl	8003504 <I2Cx_Init>
}
 8003648:	bf00      	nop
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <TS_IO_Init+0x10>)
 8003656:	f7ff ff55 	bl	8003504 <I2Cx_Init>
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	20000248 	.word	0x20000248

08003664 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af02      	add	r7, sp, #8
 800366a:	4603      	mov	r3, r0
 800366c:	71fb      	strb	r3, [r7, #7]
 800366e:	460b      	mov	r3, r1
 8003670:	71bb      	strb	r3, [r7, #6]
 8003672:	4613      	mov	r3, r2
 8003674:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8003676:	79bb      	ldrb	r3, [r7, #6]
 8003678:	b29a      	uxth	r2, r3
 800367a:	79f9      	ldrb	r1, [r7, #7]
 800367c:	2301      	movs	r3, #1
 800367e:	9301      	str	r3, [sp, #4]
 8003680:	1d7b      	adds	r3, r7, #5
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	2301      	movs	r3, #1
 8003686:	4803      	ldr	r0, [pc, #12]	; (8003694 <TS_IO_Write+0x30>)
 8003688:	f7ff ffa5 	bl	80035d6 <I2Cx_WriteMultiple>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	20000248 	.word	0x20000248

08003698 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af02      	add	r7, sp, #8
 800369e:	4603      	mov	r3, r0
 80036a0:	460a      	mov	r2, r1
 80036a2:	71fb      	strb	r3, [r7, #7]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80036ac:	79bb      	ldrb	r3, [r7, #6]
 80036ae:	b29a      	uxth	r2, r3
 80036b0:	79f9      	ldrb	r1, [r7, #7]
 80036b2:	2301      	movs	r3, #1
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	f107 030f 	add.w	r3, r7, #15
 80036ba:	9300      	str	r3, [sp, #0]
 80036bc:	2301      	movs	r3, #1
 80036be:	4804      	ldr	r0, [pc, #16]	; (80036d0 <TS_IO_Read+0x38>)
 80036c0:	f7ff ff5c 	bl	800357c <I2Cx_ReadMultiple>

  return read_value;
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	20000248 	.word	0x20000248

080036d4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f001 f9df 	bl	8004aa0 <HAL_Delay>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
	...

080036ec <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80036f0:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <BSP_LCD_Init+0xcc>)
 80036f2:	2228      	movs	r2, #40	; 0x28
 80036f4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80036f6:	4b30      	ldr	r3, [pc, #192]	; (80037b8 <BSP_LCD_Init+0xcc>)
 80036f8:	2209      	movs	r2, #9
 80036fa:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80036fc:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <BSP_LCD_Init+0xcc>)
 80036fe:	2235      	movs	r2, #53	; 0x35
 8003700:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003702:	4b2d      	ldr	r3, [pc, #180]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003704:	220b      	movs	r2, #11
 8003706:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003708:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800370a:	f240 121b 	movw	r2, #283	; 0x11b
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003710:	4b29      	ldr	r3, [pc, #164]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003712:	f240 2215 	movw	r2, #533	; 0x215
 8003716:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800371a:	f240 121d 	movw	r2, #285	; 0x11d
 800371e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003720:	4b25      	ldr	r3, [pc, #148]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003722:	f240 2235 	movw	r2, #565	; 0x235
 8003726:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8003728:	2100      	movs	r1, #0
 800372a:	4823      	ldr	r0, [pc, #140]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800372c:	f000 fc1c 	bl	8003f68 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003732:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003736:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8003738:	4b1f      	ldr	r3, [pc, #124]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800373a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800373e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003740:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8003748:	4b1b      	ldr	r3, [pc, #108]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800375a:	2200      	movs	r2, #0
 800375c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003760:	2200      	movs	r2, #0
 8003762:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003766:	2200      	movs	r2, #0
 8003768:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800376a:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800376c:	2200      	movs	r2, #0
 800376e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003770:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <BSP_LCD_Init+0xd0>)
 8003774:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8003776:	4810      	ldr	r0, [pc, #64]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003778:	f004 f828 	bl	80077cc <HAL_LTDC_GetState>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003782:	2100      	movs	r1, #0
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <BSP_LCD_Init+0xcc>)
 8003786:	f000 fb15 	bl	8003db4 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800378a:	480b      	ldr	r0, [pc, #44]	; (80037b8 <BSP_LCD_Init+0xcc>)
 800378c:	f003 fe4e 	bl	800742c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003790:	2201      	movs	r2, #1
 8003792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003796:	480a      	ldr	r0, [pc, #40]	; (80037c0 <BSP_LCD_Init+0xd4>)
 8003798:	f003 f85a 	bl	8006850 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800379c:	2201      	movs	r2, #1
 800379e:	2108      	movs	r1, #8
 80037a0:	4808      	ldr	r0, [pc, #32]	; (80037c4 <BSP_LCD_Init+0xd8>)
 80037a2:	f003 f855 	bl	8006850 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80037a6:	f000 fcff 	bl	80041a8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80037aa:	4807      	ldr	r0, [pc, #28]	; (80037c8 <BSP_LCD_Init+0xdc>)
 80037ac:	f000 f8be 	bl	800392c <BSP_LCD_SetFont>
  
  return LCD_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000db4 	.word	0x20000db4
 80037bc:	40016800 	.word	0x40016800
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40022800 	.word	0x40022800
 80037c8:	20000038 	.word	0x20000038

080037cc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037d0:	4b06      	ldr	r3, [pc, #24]	; (80037ec <BSP_LCD_GetXSize+0x20>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <BSP_LCD_GetXSize+0x24>)
 80037d6:	2134      	movs	r1, #52	; 0x34
 80037d8:	fb01 f303 	mul.w	r3, r1, r3
 80037dc:	4413      	add	r3, r2
 80037de:	3360      	adds	r3, #96	; 0x60
 80037e0:	681b      	ldr	r3, [r3, #0]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	200002d4 	.word	0x200002d4
 80037f0:	20000db4 	.word	0x20000db4

080037f4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80037f8:	4b06      	ldr	r3, [pc, #24]	; (8003814 <BSP_LCD_GetYSize+0x20>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a06      	ldr	r2, [pc, #24]	; (8003818 <BSP_LCD_GetYSize+0x24>)
 80037fe:	2134      	movs	r1, #52	; 0x34
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3364      	adds	r3, #100	; 0x64
 8003808:	681b      	ldr	r3, [r3, #0]
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	200002d4 	.word	0x200002d4
 8003818:	20000db4 	.word	0x20000db4

0800381c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800381c:	b580      	push	{r7, lr}
 800381e:	b090      	sub	sp, #64	; 0x40
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8003828:	2300      	movs	r3, #0
 800382a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800382c:	f7ff ffce 	bl	80037cc <BSP_LCD_GetXSize>
 8003830:	4603      	mov	r3, r0
 8003832:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003838:	f7ff ffdc 	bl	80037f4 <BSP_LCD_GetYSize>
 800383c:	4603      	mov	r3, r0
 800383e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003840:	2300      	movs	r3, #0
 8003842:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8003848:	23ff      	movs	r3, #255	; 0xff
 800384a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800385c:	2300      	movs	r3, #0
 800385e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003862:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003866:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003868:	2307      	movs	r3, #7
 800386a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 800386c:	f7ff ffae 	bl	80037cc <BSP_LCD_GetXSize>
 8003870:	4603      	mov	r3, r0
 8003872:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003874:	f7ff ffbe 	bl	80037f4 <BSP_LCD_GetYSize>
 8003878:	4603      	mov	r3, r0
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 800387c:	88fa      	ldrh	r2, [r7, #6]
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	4619      	mov	r1, r3
 8003884:	4812      	ldr	r0, [pc, #72]	; (80038d0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8003886:	f003 ff63 	bl	8007750 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800388a:	88fa      	ldrh	r2, [r7, #6]
 800388c:	4911      	ldr	r1, [pc, #68]	; (80038d4 <BSP_LCD_LayerDefaultInit+0xb8>)
 800388e:	4613      	mov	r3, r2
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	3304      	adds	r3, #4
 800389a:	f04f 32ff 	mov.w	r2, #4294967295
 800389e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80038a0:	88fa      	ldrh	r2, [r7, #6]
 80038a2:	490c      	ldr	r1, [pc, #48]	; (80038d4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80038a4:	4613      	mov	r3, r2
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	3308      	adds	r3, #8
 80038b0:	4a09      	ldr	r2, [pc, #36]	; (80038d8 <BSP_LCD_LayerDefaultInit+0xbc>)
 80038b2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80038b4:	88fa      	ldrh	r2, [r7, #6]
 80038b6:	4907      	ldr	r1, [pc, #28]	; (80038d4 <BSP_LCD_LayerDefaultInit+0xb8>)
 80038b8:	4613      	mov	r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80038c6:	601a      	str	r2, [r3, #0]
}
 80038c8:	bf00      	nop
 80038ca:	3740      	adds	r7, #64	; 0x40
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20000db4 	.word	0x20000db4
 80038d4:	200002d8 	.word	0x200002d8
 80038d8:	20000038 	.word	0x20000038

080038dc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80038e4:	4a04      	ldr	r2, [pc, #16]	; (80038f8 <BSP_LCD_SelectLayer+0x1c>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
} 
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	200002d4 	.word	0x200002d4

080038fc <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003904:	4b07      	ldr	r3, [pc, #28]	; (8003924 <BSP_LCD_SetTextColor+0x28>)
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <BSP_LCD_SetTextColor+0x2c>)
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	601a      	str	r2, [r3, #0]
}
 8003918:	bf00      	nop
 800391a:	370c      	adds	r7, #12
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr
 8003924:	200002d4 	.word	0x200002d4
 8003928:	200002d8 	.word	0x200002d8

0800392c <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8003934:	4b08      	ldr	r3, [pc, #32]	; (8003958 <BSP_LCD_SetFont+0x2c>)
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4908      	ldr	r1, [pc, #32]	; (800395c <BSP_LCD_SetFont+0x30>)
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	3308      	adds	r3, #8
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	601a      	str	r2, [r3, #0]
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	200002d4 	.word	0x200002d4
 800395c:	200002d8 	.word	0x200002d8

08003960 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8003964:	4b07      	ldr	r3, [pc, #28]	; (8003984 <BSP_LCD_GetFont+0x24>)
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	4907      	ldr	r1, [pc, #28]	; (8003988 <BSP_LCD_GetFont+0x28>)
 800396a:	4613      	mov	r3, r2
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	3308      	adds	r3, #8
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	200002d4 	.word	0x200002d4
 8003988:	200002d8 	.word	0x200002d8

0800398c <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 800398c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800398e:	b085      	sub	sp, #20
 8003990:	af02      	add	r7, sp, #8
 8003992:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003994:	4b0f      	ldr	r3, [pc, #60]	; (80039d4 <BSP_LCD_Clear+0x48>)
 8003996:	681c      	ldr	r4, [r3, #0]
 8003998:	4b0e      	ldr	r3, [pc, #56]	; (80039d4 <BSP_LCD_Clear+0x48>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a0e      	ldr	r2, [pc, #56]	; (80039d8 <BSP_LCD_Clear+0x4c>)
 800399e:	2134      	movs	r1, #52	; 0x34
 80039a0:	fb01 f303 	mul.w	r3, r1, r3
 80039a4:	4413      	add	r3, r2
 80039a6:	335c      	adds	r3, #92	; 0x5c
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	461e      	mov	r6, r3
 80039ac:	f7ff ff0e 	bl	80037cc <BSP_LCD_GetXSize>
 80039b0:	4605      	mov	r5, r0
 80039b2:	f7ff ff1f 	bl	80037f4 <BSP_LCD_GetYSize>
 80039b6:	4602      	mov	r2, r0
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	2300      	movs	r3, #0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	4613      	mov	r3, r2
 80039c2:	462a      	mov	r2, r5
 80039c4:	4631      	mov	r1, r6
 80039c6:	4620      	mov	r0, r4
 80039c8:	f000 fba2 	bl	8004110 <LL_FillBuffer>
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039d4:	200002d4 	.word	0x200002d4
 80039d8:	20000db4 	.word	0x20000db4

080039dc <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	80fb      	strh	r3, [r7, #6]
 80039e6:	460b      	mov	r3, r1
 80039e8:	80bb      	strh	r3, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80039ee:	4b1b      	ldr	r3, [pc, #108]	; (8003a5c <BSP_LCD_DisplayChar+0x80>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	491b      	ldr	r1, [pc, #108]	; (8003a60 <BSP_LCD_DisplayChar+0x84>)
 80039f4:	4613      	mov	r3, r2
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	4413      	add	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	3308      	adds	r3, #8
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a0a:	4b14      	ldr	r3, [pc, #80]	; (8003a5c <BSP_LCD_DisplayChar+0x80>)
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	4c14      	ldr	r4, [pc, #80]	; (8003a60 <BSP_LCD_DisplayChar+0x84>)
 8003a10:	4613      	mov	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4423      	add	r3, r4
 8003a1a:	3308      	adds	r3, #8
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a20:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a24:	4b0d      	ldr	r3, [pc, #52]	; (8003a5c <BSP_LCD_DisplayChar+0x80>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	4c0d      	ldr	r4, [pc, #52]	; (8003a60 <BSP_LCD_DisplayChar+0x84>)
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4423      	add	r3, r4
 8003a34:	3308      	adds	r3, #8
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	889b      	ldrh	r3, [r3, #4]
 8003a3a:	3307      	adds	r3, #7
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	da00      	bge.n	8003a42 <BSP_LCD_DisplayChar+0x66>
 8003a40:	3307      	adds	r3, #7
 8003a42:	10db      	asrs	r3, r3, #3
 8003a44:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a48:	18ca      	adds	r2, r1, r3
 8003a4a:	88b9      	ldrh	r1, [r7, #4]
 8003a4c:	88fb      	ldrh	r3, [r7, #6]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 faa6 	bl	8003fa0 <DrawChar>
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd90      	pop	{r4, r7, pc}
 8003a5c:	200002d4 	.word	0x200002d4
 8003a60:	200002d8 	.word	0x200002d8

08003a64 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003a64:	b5b0      	push	{r4, r5, r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60ba      	str	r2, [r7, #8]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	81fb      	strh	r3, [r7, #14]
 8003a72:	460b      	mov	r3, r1
 8003a74:	81bb      	strh	r3, [r7, #12]
 8003a76:	4613      	mov	r3, r2
 8003a78:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	83fb      	strh	r3, [r7, #30]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003a82:	2300      	movs	r3, #0
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003a8e:	e002      	b.n	8003a96 <BSP_LCD_DisplayStringAt+0x32>
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	3301      	adds	r3, #1
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	617a      	str	r2, [r7, #20]
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f6      	bne.n	8003a90 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003aa2:	f7ff fe93 	bl	80037cc <BSP_LCD_GetXSize>
 8003aa6:	4601      	mov	r1, r0
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <BSP_LCD_DisplayStringAt+0x188>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	4850      	ldr	r0, [pc, #320]	; (8003bf0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003aae:	4613      	mov	r3, r2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	4403      	add	r3, r0
 8003ab8:	3308      	adds	r3, #8
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	889b      	ldrh	r3, [r3, #4]
 8003abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ac2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
 8003ac6:	2b03      	cmp	r3, #3
 8003ac8:	d01c      	beq.n	8003b04 <BSP_LCD_DisplayStringAt+0xa0>
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	dc33      	bgt.n	8003b36 <BSP_LCD_DisplayStringAt+0xd2>
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d002      	beq.n	8003ad8 <BSP_LCD_DisplayStringAt+0x74>
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d019      	beq.n	8003b0a <BSP_LCD_DisplayStringAt+0xa6>
 8003ad6:	e02e      	b.n	8003b36 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	1ad1      	subs	r1, r2, r3
 8003ade:	4b43      	ldr	r3, [pc, #268]	; (8003bec <BSP_LCD_DisplayStringAt+0x188>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4843      	ldr	r0, [pc, #268]	; (8003bf0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	4413      	add	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4403      	add	r3, r0
 8003aee:	3308      	adds	r3, #8
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	889b      	ldrh	r3, [r3, #4]
 8003af4:	fb03 f301 	mul.w	r3, r3, r1
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	89fb      	ldrh	r3, [r7, #14]
 8003afe:	4413      	add	r3, r2
 8003b00:	83fb      	strh	r3, [r7, #30]
      break;
 8003b02:	e01b      	b.n	8003b3c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003b04:	89fb      	ldrh	r3, [r7, #14]
 8003b06:	83fb      	strh	r3, [r7, #30]
      break;
 8003b08:	e018      	b.n	8003b3c <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	b299      	uxth	r1, r3
 8003b12:	4b36      	ldr	r3, [pc, #216]	; (8003bec <BSP_LCD_DisplayStringAt+0x188>)
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	4836      	ldr	r0, [pc, #216]	; (8003bf0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b18:	4613      	mov	r3, r2
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	4413      	add	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4403      	add	r3, r0
 8003b22:	3308      	adds	r3, #8
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	889b      	ldrh	r3, [r3, #4]
 8003b28:	fb11 f303 	smulbb	r3, r1, r3
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	89fb      	ldrh	r3, [r7, #14]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	83fb      	strh	r3, [r7, #30]
      break;
 8003b34:	e002      	b.n	8003b3c <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003b36:	89fb      	ldrh	r3, [r7, #14]
 8003b38:	83fb      	strh	r3, [r7, #30]
      break;
 8003b3a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003b3c:	8bfb      	ldrh	r3, [r7, #30]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d003      	beq.n	8003b4a <BSP_LCD_DisplayStringAt+0xe6>
 8003b42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	da1d      	bge.n	8003b86 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b4e:	e01a      	b.n	8003b86 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	89b9      	ldrh	r1, [r7, #12]
 8003b56:	8bfb      	ldrh	r3, [r7, #30]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7ff ff3f 	bl	80039dc <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003b5e:	4b23      	ldr	r3, [pc, #140]	; (8003bec <BSP_LCD_DisplayStringAt+0x188>)
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	4923      	ldr	r1, [pc, #140]	; (8003bf0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3308      	adds	r3, #8
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	889a      	ldrh	r2, [r3, #4]
 8003b74:	8bfb      	ldrh	r3, [r7, #30]
 8003b76:	4413      	add	r3, r2
 8003b78:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
    i++;
 8003b80:	8bbb      	ldrh	r3, [r7, #28]
 8003b82:	3301      	adds	r3, #1
 8003b84:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	781b      	ldrb	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf14      	ite	ne
 8003b8e:	2301      	movne	r3, #1
 8003b90:	2300      	moveq	r3, #0
 8003b92:	b2dc      	uxtb	r4, r3
 8003b94:	f7ff fe1a 	bl	80037cc <BSP_LCD_GetXSize>
 8003b98:	8bb9      	ldrh	r1, [r7, #28]
 8003b9a:	4b14      	ldr	r3, [pc, #80]	; (8003bec <BSP_LCD_DisplayStringAt+0x188>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	4d14      	ldr	r5, [pc, #80]	; (8003bf0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4413      	add	r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	442b      	add	r3, r5
 8003baa:	3308      	adds	r3, #8
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	889b      	ldrh	r3, [r3, #4]
 8003bb0:	fb03 f301 	mul.w	r3, r3, r1
 8003bb4:	1ac3      	subs	r3, r0, r3
 8003bb6:	b299      	uxth	r1, r3
 8003bb8:	4b0c      	ldr	r3, [pc, #48]	; (8003bec <BSP_LCD_DisplayStringAt+0x188>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4403      	add	r3, r0
 8003bc8:	3308      	adds	r3, #8
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	889b      	ldrh	r3, [r3, #4]
 8003bce:	4299      	cmp	r1, r3
 8003bd0:	bf2c      	ite	cs
 8003bd2:	2301      	movcs	r3, #1
 8003bd4:	2300      	movcc	r3, #0
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	4023      	ands	r3, r4
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1b7      	bne.n	8003b50 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3720      	adds	r7, #32
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bdb0      	pop	{r4, r5, r7, pc}
 8003bea:	bf00      	nop
 8003bec:	200002d4 	.word	0x200002d4
 8003bf0:	200002d8 	.word	0x200002d8

08003bf4 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	6039      	str	r1, [r7, #0]
 8003bfe:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003c00:	f7ff feae 	bl	8003960 <BSP_LCD_GetFont>
 8003c04:	4603      	mov	r3, r0
 8003c06:	88db      	ldrh	r3, [r3, #6]
 8003c08:	88fa      	ldrh	r2, [r7, #6]
 8003c0a:	fb12 f303 	smulbb	r3, r2, r3
 8003c0e:	b299      	uxth	r1, r3
 8003c10:	2303      	movs	r3, #3
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	2000      	movs	r0, #0
 8003c16:	f7ff ff25 	bl	8003a64 <BSP_LCD_DisplayStringAt>
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c26:	b087      	sub	sp, #28
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	80bb      	strh	r3, [r7, #4]
 8003c32:	4613      	mov	r3, r2
 8003c34:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003c3a:	4b28      	ldr	r3, [pc, #160]	; (8003cdc <BSP_LCD_DrawVLine+0xb8>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a28      	ldr	r2, [pc, #160]	; (8003ce0 <BSP_LCD_DrawVLine+0xbc>)
 8003c40:	2134      	movs	r1, #52	; 0x34
 8003c42:	fb01 f303 	mul.w	r3, r1, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	3348      	adds	r3, #72	; 0x48
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d114      	bne.n	8003c7a <BSP_LCD_DrawVLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c50:	4b22      	ldr	r3, [pc, #136]	; (8003cdc <BSP_LCD_DrawVLine+0xb8>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a22      	ldr	r2, [pc, #136]	; (8003ce0 <BSP_LCD_DrawVLine+0xbc>)
 8003c56:	2134      	movs	r1, #52	; 0x34
 8003c58:	fb01 f303 	mul.w	r3, r1, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	335c      	adds	r3, #92	; 0x5c
 8003c60:	681c      	ldr	r4, [r3, #0]
 8003c62:	f7ff fdb3 	bl	80037cc <BSP_LCD_GetXSize>
 8003c66:	4602      	mov	r2, r0
 8003c68:	88bb      	ldrh	r3, [r7, #4]
 8003c6a:	fb03 f202 	mul.w	r2, r3, r2
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	4413      	add	r3, r2
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	4423      	add	r3, r4
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e013      	b.n	8003ca2 <BSP_LCD_DrawVLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c7a:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <BSP_LCD_DrawVLine+0xb8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a18      	ldr	r2, [pc, #96]	; (8003ce0 <BSP_LCD_DrawVLine+0xbc>)
 8003c80:	2134      	movs	r1, #52	; 0x34
 8003c82:	fb01 f303 	mul.w	r3, r1, r3
 8003c86:	4413      	add	r3, r2
 8003c88:	335c      	adds	r3, #92	; 0x5c
 8003c8a:	681c      	ldr	r4, [r3, #0]
 8003c8c:	f7ff fd9e 	bl	80037cc <BSP_LCD_GetXSize>
 8003c90:	4602      	mov	r2, r0
 8003c92:	88bb      	ldrh	r3, [r7, #4]
 8003c94:	fb03 f202 	mul.w	r2, r3, r2
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	4423      	add	r3, r4
 8003ca0:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8003ca2:	4b0e      	ldr	r3, [pc, #56]	; (8003cdc <BSP_LCD_DrawVLine+0xb8>)
 8003ca4:	681c      	ldr	r4, [r3, #0]
 8003ca6:	68fd      	ldr	r5, [r7, #12]
 8003ca8:	887e      	ldrh	r6, [r7, #2]
 8003caa:	f7ff fd8f 	bl	80037cc <BSP_LCD_GetXSize>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	1e59      	subs	r1, r3, #1
 8003cb2:	4b0a      	ldr	r3, [pc, #40]	; (8003cdc <BSP_LCD_DrawVLine+0xb8>)
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	480b      	ldr	r0, [pc, #44]	; (8003ce4 <BSP_LCD_DrawVLine+0xc0>)
 8003cb8:	4613      	mov	r3, r2
 8003cba:	005b      	lsls	r3, r3, #1
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	4403      	add	r3, r0
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	9301      	str	r3, [sp, #4]
 8003cc6:	9100      	str	r1, [sp, #0]
 8003cc8:	4633      	mov	r3, r6
 8003cca:	2201      	movs	r2, #1
 8003ccc:	4629      	mov	r1, r5
 8003cce:	4620      	mov	r0, r4
 8003cd0:	f000 fa1e 	bl	8004110 <LL_FillBuffer>
}
 8003cd4:	bf00      	nop
 8003cd6:	3714      	adds	r7, #20
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cdc:	200002d4 	.word	0x200002d4
 8003ce0:	20000db4 	.word	0x20000db4
 8003ce4:	200002d8 	.word	0x200002d8

08003ce8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003ce8:	b5b0      	push	{r4, r5, r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	4603      	mov	r3, r0
 8003cf0:	603a      	str	r2, [r7, #0]
 8003cf2:	80fb      	strh	r3, [r7, #6]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <BSP_LCD_DrawPixel+0x88>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <BSP_LCD_DrawPixel+0x8c>)
 8003cfe:	2134      	movs	r1, #52	; 0x34
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	3348      	adds	r3, #72	; 0x48
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d116      	bne.n	8003d3c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <BSP_LCD_DrawPixel+0x88>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <BSP_LCD_DrawPixel+0x8c>)
 8003d14:	2134      	movs	r1, #52	; 0x34
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	335c      	adds	r3, #92	; 0x5c
 8003d1e:	681c      	ldr	r4, [r3, #0]
 8003d20:	88bd      	ldrh	r5, [r7, #4]
 8003d22:	f7ff fd53 	bl	80037cc <BSP_LCD_GetXSize>
 8003d26:	4603      	mov	r3, r0
 8003d28:	fb03 f205 	mul.w	r2, r3, r5
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	4413      	add	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4423      	add	r3, r4
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	b292      	uxth	r2, r2
 8003d38:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003d3a:	e015      	b.n	8003d68 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <BSP_LCD_DrawPixel+0x88>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a0c      	ldr	r2, [pc, #48]	; (8003d74 <BSP_LCD_DrawPixel+0x8c>)
 8003d42:	2134      	movs	r1, #52	; 0x34
 8003d44:	fb01 f303 	mul.w	r3, r1, r3
 8003d48:	4413      	add	r3, r2
 8003d4a:	335c      	adds	r3, #92	; 0x5c
 8003d4c:	681c      	ldr	r4, [r3, #0]
 8003d4e:	88bd      	ldrh	r5, [r7, #4]
 8003d50:	f7ff fd3c 	bl	80037cc <BSP_LCD_GetXSize>
 8003d54:	4603      	mov	r3, r0
 8003d56:	fb03 f205 	mul.w	r2, r3, r5
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	4423      	add	r3, r4
 8003d62:	461a      	mov	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003d70:	200002d4 	.word	0x200002d4
 8003d74:	20000db4 	.word	0x20000db4

08003d78 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003d7c:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <BSP_LCD_DisplayOn+0x30>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	4b09      	ldr	r3, [pc, #36]	; (8003da8 <BSP_LCD_DisplayOn+0x30>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003d92:	4806      	ldr	r0, [pc, #24]	; (8003dac <BSP_LCD_DisplayOn+0x34>)
 8003d94:	f002 fd5c 	bl	8006850 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003d98:	2201      	movs	r2, #1
 8003d9a:	2108      	movs	r1, #8
 8003d9c:	4804      	ldr	r0, [pc, #16]	; (8003db0 <BSP_LCD_DisplayOn+0x38>)
 8003d9e:	f002 fd57 	bl	8006850 <HAL_GPIO_WritePin>
}
 8003da2:	bf00      	nop
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000db4 	.word	0x20000db4
 8003dac:	40022000 	.word	0x40022000
 8003db0:	40022800 	.word	0x40022800

08003db4 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b090      	sub	sp, #64	; 0x40
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003dbe:	4b64      	ldr	r3, [pc, #400]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dc2:	4a63      	ldr	r2, [pc, #396]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003dc4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dca:	4b61      	ldr	r3, [pc, #388]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dd2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003dd6:	4b5e      	ldr	r3, [pc, #376]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a5d      	ldr	r2, [pc, #372]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003ddc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b5b      	ldr	r3, [pc, #364]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dee:	4b58      	ldr	r3, [pc, #352]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a57      	ldr	r2, [pc, #348]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003df4:	f043 0310 	orr.w	r3, r3, #16
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b55      	ldr	r3, [pc, #340]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0310 	and.w	r3, r3, #16
 8003e02:	623b      	str	r3, [r7, #32]
 8003e04:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003e06:	4b52      	ldr	r3, [pc, #328]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b4f      	ldr	r3, [pc, #316]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003e1e:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	4a4b      	ldr	r2, [pc, #300]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e28:	6313      	str	r3, [r2, #48]	; 0x30
 8003e2a:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	61bb      	str	r3, [r7, #24]
 8003e34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003e36:	4b46      	ldr	r3, [pc, #280]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a45      	ldr	r2, [pc, #276]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b43      	ldr	r3, [pc, #268]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003e4e:	4b40      	ldr	r3, [pc, #256]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a3f      	ldr	r2, [pc, #252]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b3d      	ldr	r3, [pc, #244]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003e66:	4b3a      	ldr	r3, [pc, #232]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a39      	ldr	r2, [pc, #228]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003e7e:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a33      	ldr	r2, [pc, #204]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e84:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b31      	ldr	r3, [pc, #196]	; (8003f50 <BSP_LCD_MspInit+0x19c>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e92:	60bb      	str	r3, [r7, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003e96:	2310      	movs	r3, #16
 8003e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003ea6:	230e      	movs	r3, #14
 8003ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003eaa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003eae:	4619      	mov	r1, r3
 8003eb0:	4828      	ldr	r0, [pc, #160]	; (8003f54 <BSP_LCD_MspInit+0x1a0>)
 8003eb2:	f002 fa15 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003eb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003ec0:	2309      	movs	r3, #9
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4823      	ldr	r0, [pc, #140]	; (8003f58 <BSP_LCD_MspInit+0x1a4>)
 8003ecc:	f002 fa08 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003ed0:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003eda:	230e      	movs	r3, #14
 8003edc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	481d      	ldr	r0, [pc, #116]	; (8003f5c <BSP_LCD_MspInit+0x1a8>)
 8003ee6:	f002 f9fb 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003eea:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003ef4:	230e      	movs	r3, #14
 8003ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003ef8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003efc:	4619      	mov	r1, r3
 8003efe:	4818      	ldr	r0, [pc, #96]	; (8003f60 <BSP_LCD_MspInit+0x1ac>)
 8003f00:	f002 f9ee 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003f04:	23f7      	movs	r3, #247	; 0xf7
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f08:	2302      	movs	r3, #2
 8003f0a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003f0c:	230e      	movs	r3, #14
 8003f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003f10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f14:	4619      	mov	r1, r3
 8003f16:	4813      	ldr	r0, [pc, #76]	; (8003f64 <BSP_LCD_MspInit+0x1b0>)
 8003f18:	f002 f9e2 	bl	80062e0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003f22:	2301      	movs	r3, #1
 8003f24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	480b      	ldr	r0, [pc, #44]	; (8003f5c <BSP_LCD_MspInit+0x1a8>)
 8003f2e:	f002 f9d7 	bl	80062e0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003f32:	2308      	movs	r3, #8
 8003f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003f36:	2301      	movs	r3, #1
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003f3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4808      	ldr	r0, [pc, #32]	; (8003f64 <BSP_LCD_MspInit+0x1b0>)
 8003f42:	f002 f9cd 	bl	80062e0 <HAL_GPIO_Init>
}
 8003f46:	bf00      	nop
 8003f48:	3740      	adds	r7, #64	; 0x40
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	40023800 	.word	0x40023800
 8003f54:	40021000 	.word	0x40021000
 8003f58:	40021800 	.word	0x40021800
 8003f5c:	40022000 	.word	0x40022000
 8003f60:	40022400 	.word	0x40022400
 8003f64:	40022800 	.word	0x40022800

08003f68 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <BSP_LCD_ClockConfig+0x34>)
 8003f74:	2208      	movs	r2, #8
 8003f76:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003f78:	4b08      	ldr	r3, [pc, #32]	; (8003f9c <BSP_LCD_ClockConfig+0x34>)
 8003f7a:	22c0      	movs	r2, #192	; 0xc0
 8003f7c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <BSP_LCD_ClockConfig+0x34>)
 8003f80:	2205      	movs	r2, #5
 8003f82:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <BSP_LCD_ClockConfig+0x34>)
 8003f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003f8c:	4803      	ldr	r0, [pc, #12]	; (8003f9c <BSP_LCD_ClockConfig+0x34>)
 8003f8e:	f004 fad1 	bl	8008534 <HAL_RCCEx_PeriphCLKConfig>
}
 8003f92:	bf00      	nop
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	200002f0 	.word	0x200002f0

08003fa0 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	603a      	str	r2, [r7, #0]
 8003faa:	80fb      	strh	r3, [r7, #6]
 8003fac:	460b      	mov	r3, r1
 8003fae:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61fb      	str	r3, [r7, #28]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003fb8:	4b53      	ldr	r3, [pc, #332]	; (8004108 <DrawChar+0x168>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4953      	ldr	r1, [pc, #332]	; (800410c <DrawChar+0x16c>)
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	3308      	adds	r3, #8
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	88db      	ldrh	r3, [r3, #6]
 8003fce:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003fd0:	4b4d      	ldr	r3, [pc, #308]	; (8004108 <DrawChar+0x168>)
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	494d      	ldr	r1, [pc, #308]	; (800410c <DrawChar+0x16c>)
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	440b      	add	r3, r1
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	889b      	ldrh	r3, [r3, #4]
 8003fe6:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003fe8:	8a3b      	ldrh	r3, [r7, #16]
 8003fea:	3307      	adds	r3, #7
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	da00      	bge.n	8003ff2 <DrawChar+0x52>
 8003ff0:	3307      	adds	r3, #7
 8003ff2:	10db      	asrs	r3, r3, #3
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	8a3b      	ldrh	r3, [r7, #16]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	61fb      	str	r3, [r7, #28]
 8004006:	e076      	b.n	80040f6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004008:	8a3b      	ldrh	r3, [r7, #16]
 800400a:	3307      	adds	r3, #7
 800400c:	2b00      	cmp	r3, #0
 800400e:	da00      	bge.n	8004012 <DrawChar+0x72>
 8004010:	3307      	adds	r3, #7
 8004012:	10db      	asrs	r3, r3, #3
 8004014:	461a      	mov	r2, r3
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fb03 f302 	mul.w	r3, r3, r2
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	4413      	add	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8004022:	8a3b      	ldrh	r3, [r7, #16]
 8004024:	3307      	adds	r3, #7
 8004026:	2b00      	cmp	r3, #0
 8004028:	da00      	bge.n	800402c <DrawChar+0x8c>
 800402a:	3307      	adds	r3, #7
 800402c:	10db      	asrs	r3, r3, #3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d002      	beq.n	8004038 <DrawChar+0x98>
 8004032:	2b02      	cmp	r3, #2
 8004034:	d004      	beq.n	8004040 <DrawChar+0xa0>
 8004036:	e00c      	b.n	8004052 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	617b      	str	r3, [r7, #20]
      break;
 800403e:	e016      	b.n	800406e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	3201      	adds	r2, #1
 800404a:	7812      	ldrb	r2, [r2, #0]
 800404c:	4313      	orrs	r3, r2
 800404e:	617b      	str	r3, [r7, #20]
      break;
 8004050:	e00d      	b.n	800406e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	041a      	lsls	r2, r3, #16
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3301      	adds	r3, #1
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	021b      	lsls	r3, r3, #8
 8004060:	4313      	orrs	r3, r2
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	3202      	adds	r2, #2
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	4313      	orrs	r3, r2
 800406a:	617b      	str	r3, [r7, #20]
      break;
 800406c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800406e:	2300      	movs	r3, #0
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e036      	b.n	80040e2 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8004074:	8a3a      	ldrh	r2, [r7, #16]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	1ad2      	subs	r2, r2, r3
 800407a:	7bfb      	ldrb	r3, [r7, #15]
 800407c:	4413      	add	r3, r2
 800407e:	3b01      	subs	r3, #1
 8004080:	2201      	movs	r2, #1
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	461a      	mov	r2, r3
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	b29a      	uxth	r2, r3
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	4413      	add	r3, r2
 8004098:	b298      	uxth	r0, r3
 800409a:	4b1b      	ldr	r3, [pc, #108]	; (8004108 <DrawChar+0x168>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	491b      	ldr	r1, [pc, #108]	; (800410c <DrawChar+0x16c>)
 80040a0:	4613      	mov	r3, r2
 80040a2:	005b      	lsls	r3, r3, #1
 80040a4:	4413      	add	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	88bb      	ldrh	r3, [r7, #4]
 80040ae:	4619      	mov	r1, r3
 80040b0:	f7ff fe1a 	bl	8003ce8 <BSP_LCD_DrawPixel>
 80040b4:	e012      	b.n	80040dc <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	4413      	add	r3, r2
 80040be:	b298      	uxth	r0, r3
 80040c0:	4b11      	ldr	r3, [pc, #68]	; (8004108 <DrawChar+0x168>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	4911      	ldr	r1, [pc, #68]	; (800410c <DrawChar+0x16c>)
 80040c6:	4613      	mov	r3, r2
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	3304      	adds	r3, #4
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	88bb      	ldrh	r3, [r7, #4]
 80040d6:	4619      	mov	r1, r3
 80040d8:	f7ff fe06 	bl	8003ce8 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3301      	adds	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	8a3b      	ldrh	r3, [r7, #16]
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d3c4      	bcc.n	8004074 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80040ea:	88bb      	ldrh	r3, [r7, #4]
 80040ec:	3301      	adds	r3, #1
 80040ee:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	3301      	adds	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	8a7b      	ldrh	r3, [r7, #18]
 80040f8:	69fa      	ldr	r2, [r7, #28]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d384      	bcc.n	8004008 <DrawChar+0x68>
  }
}
 80040fe:	bf00      	nop
 8004100:	bf00      	nop
 8004102:	3720      	adds	r7, #32
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	200002d4 	.word	0x200002d4
 800410c:	200002d8 	.word	0x200002d8

08004110 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 800411e:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <LL_FillBuffer+0x88>)
 8004120:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004124:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <LL_FillBuffer+0x8c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a1d      	ldr	r2, [pc, #116]	; (80041a0 <LL_FillBuffer+0x90>)
 800412c:	2134      	movs	r1, #52	; 0x34
 800412e:	fb01 f303 	mul.w	r3, r1, r3
 8004132:	4413      	add	r3, r2
 8004134:	3348      	adds	r3, #72	; 0x48
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b02      	cmp	r3, #2
 800413a:	d103      	bne.n	8004144 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <LL_FillBuffer+0x88>)
 800413e:	2202      	movs	r2, #2
 8004140:	609a      	str	r2, [r3, #8]
 8004142:	e002      	b.n	800414a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004144:	4b14      	ldr	r3, [pc, #80]	; (8004198 <LL_FillBuffer+0x88>)
 8004146:	2200      	movs	r2, #0
 8004148:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800414a:	4a13      	ldr	r2, [pc, #76]	; (8004198 <LL_FillBuffer+0x88>)
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <LL_FillBuffer+0x88>)
 8004152:	4a14      	ldr	r2, [pc, #80]	; (80041a4 <LL_FillBuffer+0x94>)
 8004154:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004156:	4810      	ldr	r0, [pc, #64]	; (8004198 <LL_FillBuffer+0x88>)
 8004158:	f001 fd26 	bl	8005ba8 <HAL_DMA2D_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d115      	bne.n	800418e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	480c      	ldr	r0, [pc, #48]	; (8004198 <LL_FillBuffer+0x88>)
 8004166:	f001 ff8d 	bl	8006084 <HAL_DMA2D_ConfigLayer>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10e      	bne.n	800418e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	69f9      	ldr	r1, [r7, #28]
 800417a:	4807      	ldr	r0, [pc, #28]	; (8004198 <LL_FillBuffer+0x88>)
 800417c:	f001 fd5e 	bl	8005c3c <HAL_DMA2D_Start>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004186:	210a      	movs	r1, #10
 8004188:	4803      	ldr	r0, [pc, #12]	; (8004198 <LL_FillBuffer+0x88>)
 800418a:	f001 fd82 	bl	8005c92 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 800418e:	bf00      	nop
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	20000294 	.word	0x20000294
 800419c:	200002d4 	.word	0x200002d4
 80041a0:	20000db4 	.word	0x20000db4
 80041a4:	4002b000 	.word	0x4002b000

080041a8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80041ac:	4b29      	ldr	r3, [pc, #164]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041ae:	4a2a      	ldr	r2, [pc, #168]	; (8004258 <BSP_SDRAM_Init+0xb0>)
 80041b0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80041b2:	4b2a      	ldr	r3, [pc, #168]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041b4:	2202      	movs	r2, #2
 80041b6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80041b8:	4b28      	ldr	r3, [pc, #160]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041ba:	2207      	movs	r2, #7
 80041bc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80041be:	4b27      	ldr	r3, [pc, #156]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041c0:	2204      	movs	r2, #4
 80041c2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041c6:	2207      	movs	r2, #7
 80041c8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80041ca:	4b24      	ldr	r3, [pc, #144]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041cc:	2202      	movs	r2, #2
 80041ce:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041d2:	2202      	movs	r2, #2
 80041d4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80041d6:	4b21      	ldr	r3, [pc, #132]	; (800425c <BSP_SDRAM_Init+0xb4>)
 80041d8:	2202      	movs	r2, #2
 80041da:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041de:	2200      	movs	r2, #0
 80041e0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80041e2:	4b1c      	ldr	r3, [pc, #112]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041ea:	2204      	movs	r2, #4
 80041ec:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80041ee:	4b19      	ldr	r3, [pc, #100]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041f0:	2210      	movs	r2, #16
 80041f2:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80041f4:	4b17      	ldr	r3, [pc, #92]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041f6:	2240      	movs	r2, #64	; 0x40
 80041f8:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80041fa:	4b16      	ldr	r3, [pc, #88]	; (8004254 <BSP_SDRAM_Init+0xac>)
 80041fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004200:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004202:	4b14      	ldr	r3, [pc, #80]	; (8004254 <BSP_SDRAM_Init+0xac>)
 8004204:	2200      	movs	r2, #0
 8004206:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <BSP_SDRAM_Init+0xac>)
 800420a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800420e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004210:	4b10      	ldr	r3, [pc, #64]	; (8004254 <BSP_SDRAM_Init+0xac>)
 8004212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004216:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004218:	4b0e      	ldr	r3, [pc, #56]	; (8004254 <BSP_SDRAM_Init+0xac>)
 800421a:	2200      	movs	r2, #0
 800421c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800421e:	2100      	movs	r1, #0
 8004220:	480c      	ldr	r0, [pc, #48]	; (8004254 <BSP_SDRAM_Init+0xac>)
 8004222:	f000 f87f 	bl	8004324 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004226:	490d      	ldr	r1, [pc, #52]	; (800425c <BSP_SDRAM_Init+0xb4>)
 8004228:	480a      	ldr	r0, [pc, #40]	; (8004254 <BSP_SDRAM_Init+0xac>)
 800422a:	f004 fd73 	bl	8008d14 <HAL_SDRAM_Init>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004234:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <BSP_SDRAM_Init+0xb8>)
 8004236:	2201      	movs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	e002      	b.n	8004242 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 800423c:	4b08      	ldr	r3, [pc, #32]	; (8004260 <BSP_SDRAM_Init+0xb8>)
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004242:	f240 6003 	movw	r0, #1539	; 0x603
 8004246:	f000 f80d 	bl	8004264 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <BSP_SDRAM_Init+0xb8>)
 800424c:	781b      	ldrb	r3, [r3, #0]
}
 800424e:	4618      	mov	r0, r3
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	20000e5c 	.word	0x20000e5c
 8004258:	a0000140 	.word	0xa0000140
 800425c:	20000374 	.word	0x20000374
 8004260:	2000002c 	.word	0x2000002c

08004264 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004270:	4b2a      	ldr	r3, [pc, #168]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004276:	4b29      	ldr	r3, [pc, #164]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004278:	2210      	movs	r2, #16
 800427a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800427c:	4b27      	ldr	r3, [pc, #156]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800427e:	2201      	movs	r2, #1
 8004280:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004282:	4b26      	ldr	r3, [pc, #152]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004284:	2200      	movs	r2, #0
 8004286:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004288:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800428c:	4923      	ldr	r1, [pc, #140]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800428e:	4824      	ldr	r0, [pc, #144]	; (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004290:	f004 fd74 	bl	8008d7c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004294:	2001      	movs	r0, #1
 8004296:	f000 fc03 	bl	8004aa0 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800429c:	2202      	movs	r2, #2
 800429e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042a0:	4b1e      	ldr	r3, [pc, #120]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a2:	2210      	movs	r2, #16
 80042a4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80042a6:	4b1d      	ldr	r3, [pc, #116]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80042ac:	4b1b      	ldr	r3, [pc, #108]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80042b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042b6:	4919      	ldr	r1, [pc, #100]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042b8:	4819      	ldr	r0, [pc, #100]	; (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042ba:	f004 fd5f 	bl	8008d7c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80042be:	4b17      	ldr	r3, [pc, #92]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c0:	2203      	movs	r2, #3
 80042c2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042c4:	4b15      	ldr	r3, [pc, #84]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042c6:	2210      	movs	r2, #16
 80042c8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80042ca:	4b14      	ldr	r3, [pc, #80]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042cc:	2208      	movs	r2, #8
 80042ce:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80042d0:	4b12      	ldr	r3, [pc, #72]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80042d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042da:	4910      	ldr	r1, [pc, #64]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042dc:	4810      	ldr	r0, [pc, #64]	; (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80042de:	f004 fd4d 	bl	8008d7c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80042e2:	f44f 7308 	mov.w	r3, #544	; 0x220
 80042e6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80042e8:	4b0c      	ldr	r3, [pc, #48]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042ea:	2204      	movs	r2, #4
 80042ec:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80042ee:	4b0b      	ldr	r3, [pc, #44]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f0:	2210      	movs	r2, #16
 80042f2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80042f4:	4b09      	ldr	r3, [pc, #36]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a07      	ldr	r2, [pc, #28]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 80042fe:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004304:	4905      	ldr	r1, [pc, #20]	; (800431c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004306:	4806      	ldr	r0, [pc, #24]	; (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004308:	f004 fd38 	bl	8008d7c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 800430c:	6879      	ldr	r1, [r7, #4]
 800430e:	4804      	ldr	r0, [pc, #16]	; (8004320 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004310:	f004 fd5f 	bl	8008dd2 <HAL_SDRAM_ProgramRefreshRate>
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000390 	.word	0x20000390
 8004320:	20000e5c 	.word	0x20000e5c

08004324 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004324:	b580      	push	{r7, lr}
 8004326:	b090      	sub	sp, #64	; 0x40
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800432e:	4b70      	ldr	r3, [pc, #448]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004332:	4a6f      	ldr	r2, [pc, #444]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004334:	f043 0301 	orr.w	r3, r3, #1
 8004338:	6393      	str	r3, [r2, #56]	; 0x38
 800433a:	4b6d      	ldr	r3, [pc, #436]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	62bb      	str	r3, [r7, #40]	; 0x28
 8004344:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004346:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	4a69      	ldr	r2, [pc, #420]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800434c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004350:	6313      	str	r3, [r2, #48]	; 0x30
 8004352:	4b67      	ldr	r3, [pc, #412]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800435e:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004362:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004364:	f043 0304 	orr.w	r3, r3, #4
 8004368:	6313      	str	r3, [r2, #48]	; 0x30
 800436a:	4b61      	ldr	r3, [pc, #388]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800436c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	623b      	str	r3, [r7, #32]
 8004374:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004376:	4b5e      	ldr	r3, [pc, #376]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437a:	4a5d      	ldr	r2, [pc, #372]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800437c:	f043 0308 	orr.w	r3, r3, #8
 8004380:	6313      	str	r3, [r2, #48]	; 0x30
 8004382:	4b5b      	ldr	r3, [pc, #364]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004386:	f003 0308 	and.w	r3, r3, #8
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800438e:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 8004394:	f043 0310 	orr.w	r3, r3, #16
 8004398:	6313      	str	r3, [r2, #48]	; 0x30
 800439a:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	61bb      	str	r3, [r7, #24]
 80043a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80043a6:	4b52      	ldr	r3, [pc, #328]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	4a51      	ldr	r2, [pc, #324]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043ac:	f043 0320 	orr.w	r3, r3, #32
 80043b0:	6313      	str	r3, [r2, #48]	; 0x30
 80043b2:	4b4f      	ldr	r3, [pc, #316]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b6:	f003 0320 	and.w	r3, r3, #32
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80043be:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4a4b      	ldr	r2, [pc, #300]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043c8:	6313      	str	r3, [r2, #48]	; 0x30
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043d2:	613b      	str	r3, [r7, #16]
 80043d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80043d6:	4b46      	ldr	r3, [pc, #280]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a45      	ldr	r2, [pc, #276]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <BSP_SDRAM_MspInit+0x1cc>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80043ee:	2302      	movs	r3, #2
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80043f2:	2301      	movs	r3, #1
 80043f4:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80043f6:	2302      	movs	r3, #2
 80043f8:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80043fa:	230c      	movs	r3, #12
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80043fe:	2308      	movs	r3, #8
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004402:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004406:	4619      	mov	r1, r3
 8004408:	483a      	ldr	r0, [pc, #232]	; (80044f4 <BSP_SDRAM_MspInit+0x1d0>)
 800440a:	f001 ff69 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800440e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004412:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004418:	4619      	mov	r1, r3
 800441a:	4837      	ldr	r0, [pc, #220]	; (80044f8 <BSP_SDRAM_MspInit+0x1d4>)
 800441c:	f001 ff60 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004420:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800442a:	4619      	mov	r1, r3
 800442c:	4833      	ldr	r0, [pc, #204]	; (80044fc <BSP_SDRAM_MspInit+0x1d8>)
 800442e:	f001 ff57 	bl	80062e0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004432:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004436:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800443c:	4619      	mov	r1, r3
 800443e:	4830      	ldr	r0, [pc, #192]	; (8004500 <BSP_SDRAM_MspInit+0x1dc>)
 8004440:	f001 ff4e 	bl	80062e0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004444:	f248 1333 	movw	r3, #33075	; 0x8133
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800444a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800444e:	4619      	mov	r1, r3
 8004450:	482c      	ldr	r0, [pc, #176]	; (8004504 <BSP_SDRAM_MspInit+0x1e0>)
 8004452:	f001 ff45 	bl	80062e0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004456:	2328      	movs	r3, #40	; 0x28
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800445a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445e:	4619      	mov	r1, r3
 8004460:	4829      	ldr	r0, [pc, #164]	; (8004508 <BSP_SDRAM_MspInit+0x1e4>)
 8004462:	f001 ff3d 	bl	80062e0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004466:	4b29      	ldr	r3, [pc, #164]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004468:	2200      	movs	r2, #0
 800446a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800446c:	4b27      	ldr	r3, [pc, #156]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800446e:	2280      	movs	r2, #128	; 0x80
 8004470:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004472:	4b26      	ldr	r3, [pc, #152]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004478:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800447a:	4b24      	ldr	r3, [pc, #144]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800447c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004480:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004482:	4b22      	ldr	r3, [pc, #136]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004484:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004488:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800448a:	4b20      	ldr	r3, [pc, #128]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800448c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004490:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004492:	4b1e      	ldr	r3, [pc, #120]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 8004494:	2200      	movs	r2, #0
 8004496:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004498:	4b1c      	ldr	r3, [pc, #112]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 800449a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800449e:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80044a0:	4b1a      	ldr	r3, [pc, #104]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80044a6:	4b19      	ldr	r3, [pc, #100]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044a8:	2203      	movs	r2, #3
 80044aa:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80044ac:	4b17      	ldr	r3, [pc, #92]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80044b2:	4b16      	ldr	r3, [pc, #88]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80044b8:	4b14      	ldr	r3, [pc, #80]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044ba:	4a15      	ldr	r2, [pc, #84]	; (8004510 <BSP_SDRAM_MspInit+0x1ec>)
 80044bc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a12      	ldr	r2, [pc, #72]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044c2:	631a      	str	r2, [r3, #48]	; 0x30
 80044c4:	4a11      	ldr	r2, [pc, #68]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80044ca:	4810      	ldr	r0, [pc, #64]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044cc:	f001 fa5c 	bl	8005988 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80044d0:	480e      	ldr	r0, [pc, #56]	; (800450c <BSP_SDRAM_MspInit+0x1e8>)
 80044d2:	f001 f9ab 	bl	800582c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80044d6:	2200      	movs	r2, #0
 80044d8:	210f      	movs	r1, #15
 80044da:	2038      	movs	r0, #56	; 0x38
 80044dc:	f001 f892 	bl	8005604 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80044e0:	2038      	movs	r0, #56	; 0x38
 80044e2:	f001 f8ab 	bl	800563c <HAL_NVIC_EnableIRQ>
}
 80044e6:	bf00      	nop
 80044e8:	3740      	adds	r7, #64	; 0x40
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40020800 	.word	0x40020800
 80044f8:	40020c00 	.word	0x40020c00
 80044fc:	40021000 	.word	0x40021000
 8004500:	40021400 	.word	0x40021400
 8004504:	40021800 	.word	0x40021800
 8004508:	40021c00 	.word	0x40021c00
 800450c:	200003a0 	.word	0x200003a0
 8004510:	40026410 	.word	0x40026410

08004514 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	4603      	mov	r3, r0
 800451c:	460a      	mov	r2, r1
 800451e:	80fb      	strh	r3, [r7, #6]
 8004520:	4613      	mov	r3, r2
 8004522:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <BSP_TS_Init+0x68>)
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 800452e:	4a14      	ldr	r2, [pc, #80]	; (8004580 <BSP_TS_Init+0x6c>)
 8004530:	88bb      	ldrh	r3, [r7, #4]
 8004532:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004534:	4b13      	ldr	r3, [pc, #76]	; (8004584 <BSP_TS_Init+0x70>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2070      	movs	r0, #112	; 0x70
 800453a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 800453c:	4b11      	ldr	r3, [pc, #68]	; (8004584 <BSP_TS_Init+0x70>)
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	2070      	movs	r0, #112	; 0x70
 8004542:	4798      	blx	r3
 8004544:	4603      	mov	r3, r0
 8004546:	2b51      	cmp	r3, #81	; 0x51
 8004548:	d111      	bne.n	800456e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800454a:	4b0f      	ldr	r3, [pc, #60]	; (8004588 <BSP_TS_Init+0x74>)
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <BSP_TS_Init+0x70>)
 800454e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004550:	4b0e      	ldr	r3, [pc, #56]	; (800458c <BSP_TS_Init+0x78>)
 8004552:	2270      	movs	r2, #112	; 0x70
 8004554:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004556:	4b0e      	ldr	r3, [pc, #56]	; (8004590 <BSP_TS_Init+0x7c>)
 8004558:	2208      	movs	r2, #8
 800455a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 800455c:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <BSP_TS_Init+0x74>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	4a0a      	ldr	r2, [pc, #40]	; (800458c <BSP_TS_Init+0x78>)
 8004564:	7812      	ldrb	r2, [r2, #0]
 8004566:	b292      	uxth	r2, r2
 8004568:	4610      	mov	r0, r2
 800456a:	4798      	blx	r3
 800456c:	e001      	b.n	8004572 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 800456e:	2303      	movs	r3, #3
 8004570:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004572:	7bfb      	ldrb	r3, [r7, #15]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	20000404 	.word	0x20000404
 8004580:	20000406 	.word	0x20000406
 8004584:	20000004 	.word	0x20000004
 8004588:	20000400 	.word	0x20000400
 800458c:	20000409 	.word	0x20000409
 8004590:	20000408 	.word	0x20000408

08004594 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004594:	b590      	push	{r4, r7, lr}
 8004596:	b097      	sub	sp, #92	; 0x5c
 8004598:	af02      	add	r7, sp, #8
 800459a:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80045a2:	2300      	movs	r3, #0
 80045a4:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80045ae:	4b97      	ldr	r3, [pc, #604]	; (800480c <BSP_TS_GetState+0x278>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	691b      	ldr	r3, [r3, #16]
 80045b4:	4a96      	ldr	r2, [pc, #600]	; (8004810 <BSP_TS_GetState+0x27c>)
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	b292      	uxth	r2, r2
 80045ba:	4610      	mov	r0, r2
 80045bc:	4798      	blx	r3
 80045be:	4603      	mov	r3, r0
 80045c0:	461a      	mov	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 81a8 	beq.w	8004920 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80045d4:	e197      	b.n	8004906 <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80045d6:	4b8d      	ldr	r3, [pc, #564]	; (800480c <BSP_TS_GetState+0x278>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695b      	ldr	r3, [r3, #20]
 80045dc:	4a8c      	ldr	r2, [pc, #560]	; (8004810 <BSP_TS_GetState+0x27c>)
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	b290      	uxth	r0, r2
 80045e2:	f107 0120 	add.w	r1, r7, #32
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	0052      	lsls	r2, r2, #1
 80045ea:	188c      	adds	r4, r1, r2
 80045ec:	f107 0114 	add.w	r1, r7, #20
 80045f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045f2:	0052      	lsls	r2, r2, #1
 80045f4:	440a      	add	r2, r1
 80045f6:	4621      	mov	r1, r4
 80045f8:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 80045fa:	4b86      	ldr	r3, [pc, #536]	; (8004814 <BSP_TS_GetState+0x280>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d11b      	bne.n	800463a <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800460a:	4413      	add	r3, r2
 800460c:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8004610:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004618:	440b      	add	r3, r1
 800461a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800461e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004626:	4413      	add	r3, r2
 8004628:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800462c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004634:	440b      	add	r3, r1
 8004636:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 800463a:	4b76      	ldr	r3, [pc, #472]	; (8004814 <BSP_TS_GetState+0x280>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d010      	beq.n	8004668 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 8004646:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800464e:	4413      	add	r3, r2
 8004650:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8004654:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004658:	b29a      	uxth	r2, r3
 800465a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800465c:	005b      	lsls	r3, r3, #1
 800465e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004662:	440b      	add	r3, r1
 8004664:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8004668:	4b6a      	ldr	r3, [pc, #424]	; (8004814 <BSP_TS_GetState+0x280>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f003 0304 	and.w	r3, r3, #4
 8004670:	2b00      	cmp	r3, #0
 8004672:	d010      	beq.n	8004696 <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 8004674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004676:	005b      	lsls	r3, r3, #1
 8004678:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800467c:	4413      	add	r3, r2
 800467e:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8004682:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8004686:	b29a      	uxth	r2, r3
 8004688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004690:	440b      	add	r3, r1
 8004692:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004696:	4b5f      	ldr	r3, [pc, #380]	; (8004814 <BSP_TS_GetState+0x280>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	f003 0308 	and.w	r3, r3, #8
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01b      	beq.n	80046da <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80046a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046aa:	4413      	add	r3, r2
 80046ac:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80046b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046b8:	440b      	add	r3, r1
 80046ba:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80046be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046c0:	005b      	lsls	r3, r3, #1
 80046c2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046c6:	4413      	add	r3, r2
 80046c8:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80046cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80046d4:	440b      	add	r3, r1
 80046d6:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80046da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046e2:	4413      	add	r3, r2
 80046e4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80046e8:	4619      	mov	r1, r3
 80046ea:	4a4b      	ldr	r2, [pc, #300]	; (8004818 <BSP_TS_GetState+0x284>)
 80046ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f2:	4299      	cmp	r1, r3
 80046f4:	d90e      	bls.n	8004714 <BSP_TS_GetState+0x180>
 80046f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80046fe:	4413      	add	r3, r2
 8004700:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004704:	4944      	ldr	r1, [pc, #272]	; (8004818 <BSP_TS_GetState+0x284>)
 8004706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004708:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800470c:	b29b      	uxth	r3, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	b29b      	uxth	r3, r3
 8004712:	e00d      	b.n	8004730 <BSP_TS_GetState+0x19c>
 8004714:	4a40      	ldr	r2, [pc, #256]	; (8004818 <BSP_TS_GetState+0x284>)
 8004716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	b29a      	uxth	r2, r3
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004726:	440b      	add	r3, r1
 8004728:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	b29b      	uxth	r3, r3
 8004730:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004736:	005b      	lsls	r3, r3, #1
 8004738:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800473c:	4413      	add	r3, r2
 800473e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004742:	4619      	mov	r1, r3
 8004744:	4a35      	ldr	r2, [pc, #212]	; (800481c <BSP_TS_GetState+0x288>)
 8004746:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800474c:	4299      	cmp	r1, r3
 800474e:	d90e      	bls.n	800476e <BSP_TS_GetState+0x1da>
 8004750:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004758:	4413      	add	r3, r2
 800475a:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 800475e:	492f      	ldr	r1, [pc, #188]	; (800481c <BSP_TS_GetState+0x288>)
 8004760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004762:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004766:	b29b      	uxth	r3, r3
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	b29b      	uxth	r3, r3
 800476c:	e00d      	b.n	800478a <BSP_TS_GetState+0x1f6>
 800476e:	4a2b      	ldr	r2, [pc, #172]	; (800481c <BSP_TS_GetState+0x288>)
 8004770:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004776:	b29a      	uxth	r2, r3
 8004778:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8004780:	440b      	add	r3, r1
 8004782:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	b29b      	uxth	r3, r3
 800478a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 800478e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8004792:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004796:	4413      	add	r3, r2
 8004798:	2b05      	cmp	r3, #5
 800479a:	dd17      	ble.n	80047cc <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 800479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047a4:	4413      	add	r3, r2
 80047a6:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80047aa:	4619      	mov	r1, r3
 80047ac:	4a1a      	ldr	r2, [pc, #104]	; (8004818 <BSP_TS_GetState+0x284>)
 80047ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80047b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047bc:	4413      	add	r3, r2
 80047be:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80047c2:	4619      	mov	r1, r3
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <BSP_TS_GetState+0x288>)
 80047c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80047cc:	4b10      	ldr	r3, [pc, #64]	; (8004810 <BSP_TS_GetState+0x27c>)
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	2b70      	cmp	r3, #112	; 0x70
 80047d2:	d125      	bne.n	8004820 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80047d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047dc:	4413      	add	r3, r2
 80047de:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	4413      	add	r3, r2
 80047ea:	460a      	mov	r2, r1
 80047ec:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 80047ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80047f6:	4413      	add	r3, r2
 80047f8:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004800:	3304      	adds	r3, #4
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	4413      	add	r3, r2
 8004806:	460a      	mov	r2, r1
 8004808:	809a      	strh	r2, [r3, #4]
 800480a:	e02c      	b.n	8004866 <BSP_TS_GetState+0x2d2>
 800480c:	20000400 	.word	0x20000400
 8004810:	20000409 	.word	0x20000409
 8004814:	20000408 	.word	0x20000408
 8004818:	2000040c 	.word	0x2000040c
 800481c:	20000420 	.word	0x20000420
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8004820:	4b42      	ldr	r3, [pc, #264]	; (800492c <BSP_TS_GetState+0x398>)
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	4619      	mov	r1, r3
 8004826:	4a42      	ldr	r2, [pc, #264]	; (8004930 <BSP_TS_GetState+0x39c>)
 8004828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800482e:	fb03 f301 	mul.w	r3, r3, r1
 8004832:	0b1b      	lsrs	r3, r3, #12
 8004834:	b299      	uxth	r1, r3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	460a      	mov	r2, r1
 8004840:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8004842:	4b3c      	ldr	r3, [pc, #240]	; (8004934 <BSP_TS_GetState+0x3a0>)
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	4619      	mov	r1, r3
 8004848:	4a3b      	ldr	r2, [pc, #236]	; (8004938 <BSP_TS_GetState+0x3a4>)
 800484a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004850:	fb03 f301 	mul.w	r3, r3, r1
 8004854:	0b1b      	lsrs	r3, r3, #12
 8004856:	b299      	uxth	r1, r3
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	3304      	adds	r3, #4
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	4413      	add	r3, r2
 8004862:	460a      	mov	r2, r1
 8004864:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8004866:	4b35      	ldr	r3, [pc, #212]	; (800493c <BSP_TS_GetState+0x3a8>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	b298      	uxth	r0, r3
 800486c:	f107 010c 	add.w	r1, r7, #12
 8004870:	f107 0210 	add.w	r2, r7, #16
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	9300      	str	r3, [sp, #0]
 800487a:	460b      	mov	r3, r1
 800487c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800487e:	f7fe fcb9 	bl	80031f4 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	b2d9      	uxtb	r1, r3
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800488a:	4413      	add	r3, r2
 800488c:	3316      	adds	r3, #22
 800488e:	460a      	mov	r2, r1
 8004890:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	b2d9      	uxtb	r1, r3
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800489a:	4413      	add	r3, r2
 800489c:	3320      	adds	r3, #32
 800489e:	460a      	mov	r2, r1
 80048a0:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d827      	bhi.n	80048f8 <BSP_TS_GetState+0x364>
 80048a8:	a201      	add	r2, pc, #4	; (adr r2, 80048b0 <BSP_TS_GetState+0x31c>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048cf 	.word	0x080048cf
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048eb 	.word	0x080048eb
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048c4:	4413      	add	r3, r2
 80048c6:	331b      	adds	r3, #27
 80048c8:	2201      	movs	r2, #1
 80048ca:	701a      	strb	r2, [r3, #0]
          break;
 80048cc:	e018      	b.n	8004900 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048d2:	4413      	add	r3, r2
 80048d4:	331b      	adds	r3, #27
 80048d6:	2202      	movs	r2, #2
 80048d8:	701a      	strb	r2, [r3, #0]
          break;
 80048da:	e011      	b.n	8004900 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e0:	4413      	add	r3, r2
 80048e2:	331b      	adds	r3, #27
 80048e4:	2203      	movs	r2, #3
 80048e6:	701a      	strb	r2, [r3, #0]
          break;
 80048e8:	e00a      	b.n	8004900 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ee:	4413      	add	r3, r2
 80048f0:	331b      	adds	r3, #27
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
          break;
 80048f6:	e003      	b.n	8004900 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 80048fe:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8004900:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004902:	3301      	adds	r3, #1
 8004904:	64bb      	str	r3, [r7, #72]	; 0x48
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800490e:	4293      	cmp	r3, r2
 8004910:	f4ff ae61 	bcc.w	80045d6 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 f813 	bl	8004940 <BSP_TS_Get_GestureId>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8004920:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004924:	4618      	mov	r0, r3
 8004926:	3754      	adds	r7, #84	; 0x54
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}
 800492c:	20000404 	.word	0x20000404
 8004930:	2000040c 	.word	0x2000040c
 8004934:	20000406 	.word	0x20000406
 8004938:	20000420 	.word	0x20000420
 800493c:	20000409 	.word	0x20000409

08004940 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 800494c:	2300      	movs	r3, #0
 800494e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004950:	4b3b      	ldr	r3, [pc, #236]	; (8004a40 <BSP_TS_Get_GestureId+0x100>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f107 0208 	add.w	r2, r7, #8
 800495a:	4611      	mov	r1, r2
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe fc30 	bl	80031c2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	2b49      	cmp	r3, #73	; 0x49
 8004966:	d05e      	beq.n	8004a26 <BSP_TS_Get_GestureId+0xe6>
 8004968:	2b49      	cmp	r3, #73	; 0x49
 800496a:	d860      	bhi.n	8004a2e <BSP_TS_Get_GestureId+0xee>
 800496c:	2b1c      	cmp	r3, #28
 800496e:	d83f      	bhi.n	80049f0 <BSP_TS_Get_GestureId+0xb0>
 8004970:	2b1c      	cmp	r3, #28
 8004972:	d85c      	bhi.n	8004a2e <BSP_TS_Get_GestureId+0xee>
 8004974:	a201      	add	r2, pc, #4	; (adr r2, 800497c <BSP_TS_Get_GestureId+0x3c>)
 8004976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497a:	bf00      	nop
 800497c:	080049f7 	.word	0x080049f7
 8004980:	08004a2f 	.word	0x08004a2f
 8004984:	08004a2f 	.word	0x08004a2f
 8004988:	08004a2f 	.word	0x08004a2f
 800498c:	08004a2f 	.word	0x08004a2f
 8004990:	08004a2f 	.word	0x08004a2f
 8004994:	08004a2f 	.word	0x08004a2f
 8004998:	08004a2f 	.word	0x08004a2f
 800499c:	08004a2f 	.word	0x08004a2f
 80049a0:	08004a2f 	.word	0x08004a2f
 80049a4:	08004a2f 	.word	0x08004a2f
 80049a8:	08004a2f 	.word	0x08004a2f
 80049ac:	08004a2f 	.word	0x08004a2f
 80049b0:	08004a2f 	.word	0x08004a2f
 80049b4:	08004a2f 	.word	0x08004a2f
 80049b8:	08004a2f 	.word	0x08004a2f
 80049bc:	080049ff 	.word	0x080049ff
 80049c0:	08004a2f 	.word	0x08004a2f
 80049c4:	08004a2f 	.word	0x08004a2f
 80049c8:	08004a2f 	.word	0x08004a2f
 80049cc:	08004a07 	.word	0x08004a07
 80049d0:	08004a2f 	.word	0x08004a2f
 80049d4:	08004a2f 	.word	0x08004a2f
 80049d8:	08004a2f 	.word	0x08004a2f
 80049dc:	08004a0f 	.word	0x08004a0f
 80049e0:	08004a2f 	.word	0x08004a2f
 80049e4:	08004a2f 	.word	0x08004a2f
 80049e8:	08004a2f 	.word	0x08004a2f
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	2b40      	cmp	r3, #64	; 0x40
 80049f2:	d014      	beq.n	8004a1e <BSP_TS_Get_GestureId+0xde>
 80049f4:	e01b      	b.n	8004a2e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80049fc:	e01a      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a04:	e016      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2202      	movs	r2, #2
 8004a0a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a0c:	e012      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2203      	movs	r2, #3
 8004a12:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a14:	e00e      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2204      	movs	r2, #4
 8004a1a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a1c:	e00a      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2205      	movs	r2, #5
 8004a22:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a24:	e006      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2206      	movs	r2, #6
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8004a2c:	e002      	b.n	8004a34 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	73fb      	strb	r3, [r7, #15]
      break;
 8004a32:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000409 	.word	0x20000409

08004a44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a48:	2003      	movs	r0, #3
 8004a4a:	f000 fdd0 	bl	80055ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a4e:	200f      	movs	r0, #15
 8004a50:	f7fd ff8e 	bl	8002970 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004a54:	f7fd fb84 	bl	8002160 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_IncTick+0x20>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	461a      	mov	r2, r3
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_IncTick+0x24>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4413      	add	r3, r2
 8004a70:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <HAL_IncTick+0x24>)
 8004a72:	6013      	str	r3, [r2, #0]
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20000034 	.word	0x20000034
 8004a84:	20000e90 	.word	0x20000e90

08004a88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a8c:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <HAL_GetTick+0x14>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000e90 	.word	0x20000e90

08004aa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004aa8:	f7ff ffee 	bl	8004a88 <HAL_GetTick>
 8004aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab8:	d005      	beq.n	8004ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004aba:	4b0a      	ldr	r3, [pc, #40]	; (8004ae4 <HAL_Delay+0x44>)
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004ac6:	bf00      	nop
 8004ac8:	f7ff ffde 	bl	8004a88 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d8f7      	bhi.n	8004ac8 <HAL_Delay+0x28>
  {
  }
}
 8004ad8:	bf00      	nop
 8004ada:	bf00      	nop
 8004adc:	3710      	adds	r7, #16
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000034 	.word	0x20000034

08004ae8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e031      	b.n	8004b62 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fd fb4e 	bl	80021a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 0310 	and.w	r3, r3, #16
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d116      	bne.n	8004b54 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_ADC_Init+0x84>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	f043 0202 	orr.w	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fba8 	bl	800528c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f023 0303 	bic.w	r3, r3, #3
 8004b4a:	f043 0201 	orr.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
 8004b52:	e001      	b.n	8004b58 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	ffffeefd 	.word	0xffffeefd

08004b70 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_Start_IT+0x1a>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e0b5      	b.n	8004cf6 <HAL_ADC_Start_IT+0x186>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d018      	beq.n	8004bd2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004bb0:	4b54      	ldr	r3, [pc, #336]	; (8004d04 <HAL_ADC_Start_IT+0x194>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a54      	ldr	r2, [pc, #336]	; (8004d08 <HAL_ADC_Start_IT+0x198>)
 8004bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bba:	0c9a      	lsrs	r2, r3, #18
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	4413      	add	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004bc4:	e002      	b.n	8004bcc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d1f9      	bne.n	8004bc6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d17d      	bne.n	8004cdc <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004be4:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <HAL_ADC_Start_IT+0x19c>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c06:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1a:	d106      	bne.n	8004c2a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	f023 0206 	bic.w	r2, r3, #6
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	645a      	str	r2, [r3, #68]	; 0x44
 8004c28:	e002      	b.n	8004c30 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c40:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6859      	ldr	r1, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	4b30      	ldr	r3, [pc, #192]	; (8004d10 <HAL_ADC_Start_IT+0x1a0>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004c52:	4b30      	ldr	r3, [pc, #192]	; (8004d14 <HAL_ADC_Start_IT+0x1a4>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d10f      	bne.n	8004c7e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d143      	bne.n	8004cf4 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c7a:	609a      	str	r2, [r3, #8]
 8004c7c:	e03a      	b.n	8004cf4 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <HAL_ADC_Start_IT+0x1a8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d10e      	bne.n	8004ca6 <HAL_ADC_Start_IT+0x136>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d107      	bne.n	8004ca6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ca4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_ADC_Start_IT+0x1a4>)
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f003 0310 	and.w	r3, r3, #16
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d120      	bne.n	8004cf4 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <HAL_ADC_Start_IT+0x1ac>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d11b      	bne.n	8004cf4 <HAL_ADC_Start_IT+0x184>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d114      	bne.n	8004cf4 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689a      	ldr	r2, [r3, #8]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cd8:	609a      	str	r2, [r3, #8]
 8004cda:	e00b      	b.n	8004cf4 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f043 0210 	orr.w	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cec:	f043 0201 	orr.w	r2, r3, #1
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	20000000 	.word	0x20000000
 8004d08:	431bde83 	.word	0x431bde83
 8004d0c:	fffff8fe 	.word	0xfffff8fe
 8004d10:	04000020 	.word	0x04000020
 8004d14:	40012300 	.word	0x40012300
 8004d18:	40012000 	.word	0x40012000
 8004d1c:	40012200 	.word	0x40012200

08004d20 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f003 0320 	and.w	r3, r3, #32
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	bf0c      	ite	eq
 8004d54:	2301      	moveq	r3, #1
 8004d56:	2300      	movne	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d049      	beq.n	8004df6 <HAL_ADC_IRQHandler+0xd6>
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d046      	beq.n	8004df6 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d105      	bne.n	8004d80 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d12b      	bne.n	8004de6 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d127      	bne.n	8004de6 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d006      	beq.n	8004db2 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d119      	bne.n	8004de6 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685a      	ldr	r2, [r3, #4]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0220 	bic.w	r2, r2, #32
 8004dc0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d105      	bne.n	8004de6 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0201 	orr.w	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f8e8 	bl	8004fbc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0212 	mvn.w	r2, #18
 8004df4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	bf0c      	ite	eq
 8004e04:	2301      	moveq	r3, #1
 8004e06:	2300      	movne	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	2b80      	cmp	r3, #128	; 0x80
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d057      	beq.n	8004ed8 <HAL_ADC_IRQHandler+0x1b8>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d054      	beq.n	8004ed8 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d105      	bne.n	8004e46 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d139      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d006      	beq.n	8004e70 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d12b      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d124      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x1a8>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d11d      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x1a8>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d119      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ea2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d105      	bne.n	8004ec8 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec0:	f043 0201 	orr.w	r2, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 fad9 	bl	8005480 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f06f 020c 	mvn.w	r2, #12
 8004ed6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	bf0c      	ite	eq
 8004ee6:	2301      	moveq	r3, #1
 8004ee8:	2300      	movne	r3, #0
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef8:	2b40      	cmp	r3, #64	; 0x40
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d017      	beq.n	8004f3a <HAL_ADC_IRQHandler+0x21a>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d014      	beq.n	8004f3a <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0301 	and.w	r3, r3, #1
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d10d      	bne.n	8004f3a <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f850 	bl	8004fd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0201 	mvn.w	r2, #1
 8004f38:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d015      	beq.n	8004f9a <HAL_ADC_IRQHandler+0x27a>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d012      	beq.n	8004f9a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f78:	f043 0202 	orr.w	r2, r3, #2
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0220 	mvn.w	r2, #32
 8004f88:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 f82a 	bl	8004fe4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f06f 0220 	mvn.w	r2, #32
 8004f98:	601a      	str	r2, [r3, #0]
  }
}
 8004f9a:	bf00      	nop
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004fc4:	bf00      	nop
 8004fc6:	370c      	adds	r7, #12
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b083      	sub	sp, #12
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
 8005000:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800500c:	2b01      	cmp	r3, #1
 800500e:	d101      	bne.n	8005014 <HAL_ADC_ConfigChannel+0x1c>
 8005010:	2302      	movs	r3, #2
 8005012:	e12a      	b.n	800526a <HAL_ADC_ConfigChannel+0x272>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b09      	cmp	r3, #9
 8005022:	d93a      	bls.n	800509a <HAL_ADC_ConfigChannel+0xa2>
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800502c:	d035      	beq.n	800509a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	68d9      	ldr	r1, [r3, #12]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	461a      	mov	r2, r3
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	3b1e      	subs	r3, #30
 8005044:	2207      	movs	r2, #7
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43da      	mvns	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	400a      	ands	r2, r1
 8005052:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a87      	ldr	r2, [pc, #540]	; (8005278 <HAL_ADC_ConfigChannel+0x280>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10a      	bne.n	8005074 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68d9      	ldr	r1, [r3, #12]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	061a      	lsls	r2, r3, #24
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005072:	e035      	b.n	80050e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68d9      	ldr	r1, [r3, #12]
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	b29b      	uxth	r3, r3
 8005084:	4618      	mov	r0, r3
 8005086:	4603      	mov	r3, r0
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4403      	add	r3, r0
 800508c:	3b1e      	subs	r3, #30
 800508e:	409a      	lsls	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005098:	e022      	b.n	80050e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6919      	ldr	r1, [r3, #16]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	2207      	movs	r2, #7
 80050b0:	fa02 f303 	lsl.w	r3, r2, r3
 80050b4:	43da      	mvns	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	400a      	ands	r2, r1
 80050bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6919      	ldr	r1, [r3, #16]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	4618      	mov	r0, r3
 80050d0:	4603      	mov	r3, r0
 80050d2:	005b      	lsls	r3, r3, #1
 80050d4:	4403      	add	r3, r0
 80050d6:	409a      	lsls	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b06      	cmp	r3, #6
 80050e6:	d824      	bhi.n	8005132 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	3b05      	subs	r3, #5
 80050fa:	221f      	movs	r2, #31
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43da      	mvns	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	400a      	ands	r2, r1
 8005108:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	4618      	mov	r0, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	3b05      	subs	r3, #5
 8005124:	fa00 f203 	lsl.w	r2, r0, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	635a      	str	r2, [r3, #52]	; 0x34
 8005130:	e04c      	b.n	80051cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b0c      	cmp	r3, #12
 8005138:	d824      	bhi.n	8005184 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	3b23      	subs	r3, #35	; 0x23
 800514c:	221f      	movs	r2, #31
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43da      	mvns	r2, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	400a      	ands	r2, r1
 800515a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	b29b      	uxth	r3, r3
 8005168:	4618      	mov	r0, r3
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	685a      	ldr	r2, [r3, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	3b23      	subs	r3, #35	; 0x23
 8005176:	fa00 f203 	lsl.w	r2, r0, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	631a      	str	r2, [r3, #48]	; 0x30
 8005182:	e023      	b.n	80051cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	685a      	ldr	r2, [r3, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	3b41      	subs	r3, #65	; 0x41
 8005196:	221f      	movs	r2, #31
 8005198:	fa02 f303 	lsl.w	r3, r2, r3
 800519c:	43da      	mvns	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	400a      	ands	r2, r1
 80051a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	b29b      	uxth	r3, r3
 80051b2:	4618      	mov	r0, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	4413      	add	r3, r2
 80051be:	3b41      	subs	r3, #65	; 0x41
 80051c0:	fa00 f203 	lsl.w	r2, r0, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a2a      	ldr	r2, [pc, #168]	; (800527c <HAL_ADC_ConfigChannel+0x284>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10a      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x1f4>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051de:	d105      	bne.n	80051ec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80051e0:	4b27      	ldr	r3, [pc, #156]	; (8005280 <HAL_ADC_ConfigChannel+0x288>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4a26      	ldr	r2, [pc, #152]	; (8005280 <HAL_ADC_ConfigChannel+0x288>)
 80051e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80051ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_ADC_ConfigChannel+0x284>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d109      	bne.n	800520a <HAL_ADC_ConfigChannel+0x212>
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b12      	cmp	r3, #18
 80051fc:	d105      	bne.n	800520a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80051fe:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_ADC_ConfigChannel+0x288>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	4a1f      	ldr	r2, [pc, #124]	; (8005280 <HAL_ADC_ConfigChannel+0x288>)
 8005204:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005208:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1b      	ldr	r2, [pc, #108]	; (800527c <HAL_ADC_ConfigChannel+0x284>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d125      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x268>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a17      	ldr	r2, [pc, #92]	; (8005278 <HAL_ADC_ConfigChannel+0x280>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d003      	beq.n	8005226 <HAL_ADC_ConfigChannel+0x22e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b11      	cmp	r3, #17
 8005224:	d11c      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005226:	4b16      	ldr	r3, [pc, #88]	; (8005280 <HAL_ADC_ConfigChannel+0x288>)
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	4a15      	ldr	r2, [pc, #84]	; (8005280 <HAL_ADC_ConfigChannel+0x288>)
 800522c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005230:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a10      	ldr	r2, [pc, #64]	; (8005278 <HAL_ADC_ConfigChannel+0x280>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d111      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800523c:	4b11      	ldr	r3, [pc, #68]	; (8005284 <HAL_ADC_ConfigChannel+0x28c>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a11      	ldr	r2, [pc, #68]	; (8005288 <HAL_ADC_ConfigChannel+0x290>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	0c9a      	lsrs	r2, r3, #18
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	005b      	lsls	r3, r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005252:	e002      	b.n	800525a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	3b01      	subs	r3, #1
 8005258:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f9      	bne.n	8005254 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3714      	adds	r7, #20
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	10000012 	.word	0x10000012
 800527c:	40012000 	.word	0x40012000
 8005280:	40012300 	.word	0x40012300
 8005284:	20000000 	.word	0x20000000
 8005288:	431bde83 	.word	0x431bde83

0800528c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005294:	4b78      	ldr	r3, [pc, #480]	; (8005478 <ADC_Init+0x1ec>)
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a77      	ldr	r2, [pc, #476]	; (8005478 <ADC_Init+0x1ec>)
 800529a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800529e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80052a0:	4b75      	ldr	r3, [pc, #468]	; (8005478 <ADC_Init+0x1ec>)
 80052a2:	685a      	ldr	r2, [r3, #4]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	4973      	ldr	r1, [pc, #460]	; (8005478 <ADC_Init+0x1ec>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685a      	ldr	r2, [r3, #4]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6859      	ldr	r1, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	021a      	lsls	r2, r3, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6859      	ldr	r1, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	6899      	ldr	r1, [r3, #8]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531a:	4a58      	ldr	r2, [pc, #352]	; (800547c <ADC_Init+0x1f0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d022      	beq.n	8005366 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800532e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	6899      	ldr	r1, [r3, #8]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005350:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	6899      	ldr	r1, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	430a      	orrs	r2, r1
 8005362:	609a      	str	r2, [r3, #8]
 8005364:	e00f      	b.n	8005386 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689a      	ldr	r2, [r3, #8]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005374:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005384:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0202 	bic.w	r2, r2, #2
 8005394:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6899      	ldr	r1, [r3, #8]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	005a      	lsls	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	430a      	orrs	r2, r1
 80053a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d01b      	beq.n	80053ec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80053d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	3b01      	subs	r3, #1
 80053e0:	035a      	lsls	r2, r3, #13
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	605a      	str	r2, [r3, #4]
 80053ea:	e007      	b.n	80053fc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800540a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	69db      	ldr	r3, [r3, #28]
 8005416:	3b01      	subs	r3, #1
 8005418:	051a      	lsls	r2, r3, #20
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	430a      	orrs	r2, r1
 8005420:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6899      	ldr	r1, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800543e:	025a      	lsls	r2, r3, #9
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	430a      	orrs	r2, r1
 8005446:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	689a      	ldr	r2, [r3, #8]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6899      	ldr	r1, [r3, #8]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	029a      	lsls	r2, r3, #10
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	609a      	str	r2, [r3, #8]
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	40012300 	.word	0x40012300
 800547c:	0f000001 	.word	0x0f000001

08005480 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005488:	bf00      	nop
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <__NVIC_SetPriorityGrouping+0x40>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054b0:	4013      	ands	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054bc:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <__NVIC_SetPriorityGrouping+0x44>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054c2:	4a04      	ldr	r2, [pc, #16]	; (80054d4 <__NVIC_SetPriorityGrouping+0x40>)
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	60d3      	str	r3, [r2, #12]
}
 80054c8:	bf00      	nop
 80054ca:	3714      	adds	r7, #20
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	e000ed00 	.word	0xe000ed00
 80054d8:	05fa0000 	.word	0x05fa0000

080054dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054e0:	4b04      	ldr	r3, [pc, #16]	; (80054f4 <__NVIC_GetPriorityGrouping+0x18>)
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	0a1b      	lsrs	r3, r3, #8
 80054e6:	f003 0307 	and.w	r3, r3, #7
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	e000ed00 	.word	0xe000ed00

080054f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005506:	2b00      	cmp	r3, #0
 8005508:	db0b      	blt.n	8005522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	f003 021f 	and.w	r2, r3, #31
 8005510:	4907      	ldr	r1, [pc, #28]	; (8005530 <__NVIC_EnableIRQ+0x38>)
 8005512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	2001      	movs	r0, #1
 800551a:	fa00 f202 	lsl.w	r2, r0, r2
 800551e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	e000e100 	.word	0xe000e100

08005534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	4603      	mov	r3, r0
 800553c:	6039      	str	r1, [r7, #0]
 800553e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005544:	2b00      	cmp	r3, #0
 8005546:	db0a      	blt.n	800555e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	b2da      	uxtb	r2, r3
 800554c:	490c      	ldr	r1, [pc, #48]	; (8005580 <__NVIC_SetPriority+0x4c>)
 800554e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005552:	0112      	lsls	r2, r2, #4
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	440b      	add	r3, r1
 8005558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800555c:	e00a      	b.n	8005574 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	4908      	ldr	r1, [pc, #32]	; (8005584 <__NVIC_SetPriority+0x50>)
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	3b04      	subs	r3, #4
 800556c:	0112      	lsls	r2, r2, #4
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	440b      	add	r3, r1
 8005572:	761a      	strb	r2, [r3, #24]
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000e100 	.word	0xe000e100
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005588:	b480      	push	{r7}
 800558a:	b089      	sub	sp, #36	; 0x24
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f1c3 0307 	rsb	r3, r3, #7
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	bf28      	it	cs
 80055a6:	2304      	movcs	r3, #4
 80055a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	3304      	adds	r3, #4
 80055ae:	2b06      	cmp	r3, #6
 80055b0:	d902      	bls.n	80055b8 <NVIC_EncodePriority+0x30>
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	3b03      	subs	r3, #3
 80055b6:	e000      	b.n	80055ba <NVIC_EncodePriority+0x32>
 80055b8:	2300      	movs	r3, #0
 80055ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055bc:	f04f 32ff 	mov.w	r2, #4294967295
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	43da      	mvns	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	401a      	ands	r2, r3
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055d0:	f04f 31ff 	mov.w	r1, #4294967295
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	fa01 f303 	lsl.w	r3, r1, r3
 80055da:	43d9      	mvns	r1, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055e0:	4313      	orrs	r3, r2
         );
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3724      	adds	r7, #36	; 0x24
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr

080055ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b082      	sub	sp, #8
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff ff4c 	bl	8005494 <__NVIC_SetPriorityGrouping>
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005604:	b580      	push	{r7, lr}
 8005606:	b086      	sub	sp, #24
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005612:	2300      	movs	r3, #0
 8005614:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005616:	f7ff ff61 	bl	80054dc <__NVIC_GetPriorityGrouping>
 800561a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	68b9      	ldr	r1, [r7, #8]
 8005620:	6978      	ldr	r0, [r7, #20]
 8005622:	f7ff ffb1 	bl	8005588 <NVIC_EncodePriority>
 8005626:	4602      	mov	r2, r0
 8005628:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f7ff ff80 	bl	8005534 <__NVIC_SetPriority>
}
 8005634:	bf00      	nop
 8005636:	3718      	adds	r7, #24
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	4618      	mov	r0, r3
 800564c:	f7ff ff54 	bl	80054f8 <__NVIC_EnableIRQ>
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d101      	bne.n	800566a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e054      	b.n	8005714 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	7f5b      	ldrb	r3, [r3, #29]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d105      	bne.n	8005680 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f7fc fdf6 	bl	800226c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2202      	movs	r2, #2
 8005684:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	791b      	ldrb	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10c      	bne.n	80056a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a22      	ldr	r2, [pc, #136]	; (800571c <HAL_CRC_Init+0xc4>)
 8005694:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0218 	bic.w	r2, r2, #24
 80056a4:	609a      	str	r2, [r3, #8]
 80056a6:	e00c      	b.n	80056c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6899      	ldr	r1, [r3, #8]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	461a      	mov	r2, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f834 	bl	8005720 <HAL_CRCEx_Polynomial_Set>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d001      	beq.n	80056c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e028      	b.n	8005714 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	795b      	ldrb	r3, [r3, #5]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d105      	bne.n	80056d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f04f 32ff 	mov.w	r2, #4294967295
 80056d2:	611a      	str	r2, [r3, #16]
 80056d4:	e004      	b.n	80056e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6912      	ldr	r2, [r2, #16]
 80056de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	695a      	ldr	r2, [r3, #20]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	699a      	ldr	r2, [r3, #24]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	04c11db7 	.word	0x04c11db7

08005720 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005730:	231f      	movs	r3, #31
 8005732:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005734:	bf00      	nop
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1e5a      	subs	r2, r3, #1
 800573a:	613a      	str	r2, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d009      	beq.n	8005754 <HAL_CRCEx_Polynomial_Set+0x34>
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	f003 031f 	and.w	r3, r3, #31
 8005746:	68ba      	ldr	r2, [r7, #8]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
 800574c:	f003 0301 	and.w	r3, r3, #1
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0f0      	beq.n	8005736 <HAL_CRCEx_Polynomial_Set+0x16>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b18      	cmp	r3, #24
 8005758:	d846      	bhi.n	80057e8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800575a:	a201      	add	r2, pc, #4	; (adr r2, 8005760 <HAL_CRCEx_Polynomial_Set+0x40>)
 800575c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005760:	080057ef 	.word	0x080057ef
 8005764:	080057e9 	.word	0x080057e9
 8005768:	080057e9 	.word	0x080057e9
 800576c:	080057e9 	.word	0x080057e9
 8005770:	080057e9 	.word	0x080057e9
 8005774:	080057e9 	.word	0x080057e9
 8005778:	080057e9 	.word	0x080057e9
 800577c:	080057e9 	.word	0x080057e9
 8005780:	080057dd 	.word	0x080057dd
 8005784:	080057e9 	.word	0x080057e9
 8005788:	080057e9 	.word	0x080057e9
 800578c:	080057e9 	.word	0x080057e9
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057e9 	.word	0x080057e9
 8005798:	080057e9 	.word	0x080057e9
 800579c:	080057e9 	.word	0x080057e9
 80057a0:	080057d1 	.word	0x080057d1
 80057a4:	080057e9 	.word	0x080057e9
 80057a8:	080057e9 	.word	0x080057e9
 80057ac:	080057e9 	.word	0x080057e9
 80057b0:	080057e9 	.word	0x080057e9
 80057b4:	080057e9 	.word	0x080057e9
 80057b8:	080057e9 	.word	0x080057e9
 80057bc:	080057e9 	.word	0x080057e9
 80057c0:	080057c5 	.word	0x080057c5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	2b06      	cmp	r3, #6
 80057c8:	d913      	bls.n	80057f2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80057ce:	e010      	b.n	80057f2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	2b07      	cmp	r3, #7
 80057d4:	d90f      	bls.n	80057f6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80057da:	e00c      	b.n	80057f6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	2b0f      	cmp	r3, #15
 80057e0:	d90b      	bls.n	80057fa <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80057e6:	e008      	b.n	80057fa <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	75fb      	strb	r3, [r7, #23]
      break;
 80057ec:	e006      	b.n	80057fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057ee:	bf00      	nop
 80057f0:	e004      	b.n	80057fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057f2:	bf00      	nop
 80057f4:	e002      	b.n	80057fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057f6:	bf00      	nop
 80057f8:	e000      	b.n	80057fc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80057fa:	bf00      	nop
  }
  if (status == HAL_OK)
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10d      	bne.n	800581e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f023 0118 	bic.w	r1, r3, #24
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	430a      	orrs	r2, r1
 800581c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800581e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005820:	4618      	mov	r0, r3
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005838:	f7ff f926 	bl	8004a88 <HAL_GetTick>
 800583c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e099      	b.n	800597c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0201 	bic.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005868:	e00f      	b.n	800588a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800586a:	f7ff f90d 	bl	8004a88 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b05      	cmp	r3, #5
 8005876:	d908      	bls.n	800588a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2220      	movs	r2, #32
 800587c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2203      	movs	r2, #3
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005886:	2303      	movs	r3, #3
 8005888:	e078      	b.n	800597c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0301 	and.w	r3, r3, #1
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e8      	bne.n	800586a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4b38      	ldr	r3, [pc, #224]	; (8005984 <HAL_DMA_Init+0x158>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685a      	ldr	r2, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	691b      	ldr	r3, [r3, #16]
 80058bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d107      	bne.n	80058f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ec:	4313      	orrs	r3, r2
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f023 0307 	bic.w	r3, r3, #7
 800590a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	2b04      	cmp	r3, #4
 800591c:	d117      	bne.n	800594e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00e      	beq.n	800594e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 f8bd 	bl	8005ab0 <DMA_CheckFifoParam>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2240      	movs	r2, #64	; 0x40
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800594a:	2301      	movs	r3, #1
 800594c:	e016      	b.n	800597c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f874 	bl	8005a44 <DMA_CalcBaseAndBitshift>
 800595c:	4603      	mov	r3, r0
 800595e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005964:	223f      	movs	r2, #63	; 0x3f
 8005966:	409a      	lsls	r2, r3
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	f010803f 	.word	0xf010803f

08005988 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e050      	b.n	8005a3c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d101      	bne.n	80059aa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
 80059a8:	e048      	b.n	8005a3c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2200      	movs	r2, #0
 80059c8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2200      	movs	r2, #0
 80059d0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2221      	movs	r2, #33	; 0x21
 80059e8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f82a 	bl	8005a44 <DMA_CalcBaseAndBitshift>
 80059f0:	4603      	mov	r3, r0
 80059f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f8:	223f      	movs	r2, #63	; 0x3f
 80059fa:	409a      	lsls	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	3b10      	subs	r3, #16
 8005a54:	4a13      	ldr	r2, [pc, #76]	; (8005aa4 <DMA_CalcBaseAndBitshift+0x60>)
 8005a56:	fba2 2303 	umull	r2, r3, r2, r3
 8005a5a:	091b      	lsrs	r3, r3, #4
 8005a5c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a5e:	4a12      	ldr	r2, [pc, #72]	; (8005aa8 <DMA_CalcBaseAndBitshift+0x64>)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	4413      	add	r3, r2
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	461a      	mov	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2b03      	cmp	r3, #3
 8005a70:	d908      	bls.n	8005a84 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	461a      	mov	r2, r3
 8005a78:	4b0c      	ldr	r3, [pc, #48]	; (8005aac <DMA_CalcBaseAndBitshift+0x68>)
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	1d1a      	adds	r2, r3, #4
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	659a      	str	r2, [r3, #88]	; 0x58
 8005a82:	e006      	b.n	8005a92 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	4b08      	ldr	r3, [pc, #32]	; (8005aac <DMA_CalcBaseAndBitshift+0x68>)
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	aaaaaaab 	.word	0xaaaaaaab
 8005aa8:	0800d1a4 	.word	0x0800d1a4
 8005aac:	fffffc00 	.word	0xfffffc00

08005ab0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d11f      	bne.n	8005b0a <DMA_CheckFifoParam+0x5a>
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d856      	bhi.n	8005b7e <DMA_CheckFifoParam+0xce>
 8005ad0:	a201      	add	r2, pc, #4	; (adr r2, 8005ad8 <DMA_CheckFifoParam+0x28>)
 8005ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad6:	bf00      	nop
 8005ad8:	08005ae9 	.word	0x08005ae9
 8005adc:	08005afb 	.word	0x08005afb
 8005ae0:	08005ae9 	.word	0x08005ae9
 8005ae4:	08005b7f 	.word	0x08005b7f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d046      	beq.n	8005b82 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af8:	e043      	b.n	8005b82 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b02:	d140      	bne.n	8005b86 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b08:	e03d      	b.n	8005b86 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b12:	d121      	bne.n	8005b58 <DMA_CheckFifoParam+0xa8>
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	2b03      	cmp	r3, #3
 8005b18:	d837      	bhi.n	8005b8a <DMA_CheckFifoParam+0xda>
 8005b1a:	a201      	add	r2, pc, #4	; (adr r2, 8005b20 <DMA_CheckFifoParam+0x70>)
 8005b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b37 	.word	0x08005b37
 8005b28:	08005b31 	.word	0x08005b31
 8005b2c:	08005b49 	.word	0x08005b49
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
      break;
 8005b34:	e030      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d025      	beq.n	8005b8e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b46:	e022      	b.n	8005b8e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b50:	d11f      	bne.n	8005b92 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b56:	e01c      	b.n	8005b92 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	d903      	bls.n	8005b66 <DMA_CheckFifoParam+0xb6>
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b03      	cmp	r3, #3
 8005b62:	d003      	beq.n	8005b6c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b64:	e018      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	73fb      	strb	r3, [r7, #15]
      break;
 8005b6a:	e015      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00e      	beq.n	8005b96 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b7c:	e00b      	b.n	8005b96 <DMA_CheckFifoParam+0xe6>
      break;
 8005b7e:	bf00      	nop
 8005b80:	e00a      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      break;
 8005b82:	bf00      	nop
 8005b84:	e008      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      break;
 8005b86:	bf00      	nop
 8005b88:	e006      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      break;
 8005b8a:	bf00      	nop
 8005b8c:	e004      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      break;
 8005b8e:	bf00      	nop
 8005b90:	e002      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b92:	bf00      	nop
 8005b94:	e000      	b.n	8005b98 <DMA_CheckFifoParam+0xe8>
      break;
 8005b96:	bf00      	nop
    }
  } 
  
  return status; 
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3714      	adds	r7, #20
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr
 8005ba6:	bf00      	nop

08005ba8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e039      	b.n	8005c2e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fc fb6c 	bl	80022ac <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2202      	movs	r2, #2
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	f023 0107 	bic.w	r1, r3, #7
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689a      	ldr	r2, [r3, #8]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <HAL_DMA2D_Init+0x90>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	68d1      	ldr	r1, [r2, #12]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	430b      	orrs	r3, r1
 8005c1c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	ffffc000 	.word	0xffffc000

08005c3c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b086      	sub	sp, #24
 8005c40:	af02      	add	r7, sp, #8
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
 8005c48:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_DMA2D_Start+0x1c>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e018      	b.n	8005c8a <HAL_DMA2D_Start+0x4e>
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68b9      	ldr	r1, [r7, #8]
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 fa98 	bl	80061a8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 0201 	orr.w	r2, r2, #1
 8005c86:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b086      	sub	sp, #24
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
 8005c9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d056      	beq.n	8005d5c <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cae:	f7fe feeb 	bl	8004a88 <HAL_GetTick>
 8005cb2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005cb4:	e04b      	b.n	8005d4e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d005      	beq.n	8005cde <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	f043 0202 	orr.w	r2, r3, #2
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cec:	f043 0201 	orr.w	r2, r3, #1
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2221      	movs	r2, #33	; 0x21
 8005cfa:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0a5      	b.n	8005e5c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d16:	d01a      	beq.n	8005d4e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d18:	f7fe feb6 	bl	8004a88 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d302      	bcc.n	8005d2e <HAL_DMA2D_PollForTransfer+0x9c>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10f      	bne.n	8005d4e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d32:	f043 0220 	orr.w	r2, r3, #32
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2203      	movs	r2, #3
 8005d3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e086      	b.n	8005e5c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0ac      	beq.n	8005cb6 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d061      	beq.n	8005e42 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d7e:	f7fe fe83 	bl	8004a88 <HAL_GetTick>
 8005d82:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d84:	e056      	b.n	8005e34 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d02e      	beq.n	8005df6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f003 0308 	and.w	r3, r3, #8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d005      	beq.n	8005dae <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005da6:	f043 0204 	orr.w	r2, r3, #4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f003 0320 	and.w	r3, r3, #32
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	f043 0202 	orr.w	r2, r3, #2
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd2:	f043 0201 	orr.w	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2229      	movs	r2, #41	; 0x29
 8005de0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2204      	movs	r2, #4
 8005de6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e032      	b.n	8005e5c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfc:	d01a      	beq.n	8005e34 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005dfe:	f7fe fe43 	bl	8004a88 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d302      	bcc.n	8005e14 <HAL_DMA2D_PollForTransfer+0x182>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10f      	bne.n	8005e34 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	f043 0220 	orr.w	r2, r3, #32
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2203      	movs	r2, #3
 8005e24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e013      	b.n	8005e5c <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 0310 	and.w	r3, r3, #16
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0a1      	beq.n	8005d86 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2212      	movs	r2, #18
 8005e48:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3718      	adds	r7, #24
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bd80      	pop	{r7, pc}

08005e64 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b084      	sub	sp, #16
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d026      	beq.n	8005ed4 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d021      	beq.n	8005ed4 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e9e:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ea4:	f043 0201 	orr.w	r2, r3, #1
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d003      	beq.n	8005ed4 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d026      	beq.n	8005f2c <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d021      	beq.n	8005f2c <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	681a      	ldr	r2, [r3, #0]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2220      	movs	r2, #32
 8005efe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f04:	f043 0202 	orr.w	r2, r3, #2
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2204      	movs	r2, #4
 8005f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d003      	beq.n	8005f2c <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d026      	beq.n	8005f84 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d021      	beq.n	8005f84 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2208      	movs	r2, #8
 8005f56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f5c:	f043 0204 	orr.w	r2, r3, #4
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2204      	movs	r2, #4
 8005f68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	695b      	ldr	r3, [r3, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d003      	beq.n	8005f84 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	695b      	ldr	r3, [r3, #20]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d013      	beq.n	8005fb6 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00e      	beq.n	8005fb6 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa6:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2204      	movs	r2, #4
 8005fae:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f853 	bl	800605c <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f003 0302 	and.w	r3, r3, #2
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d024      	beq.n	800600a <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01f      	beq.n	800600a <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fd8:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2202      	movs	r2, #2
 8005fe0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2201      	movs	r2, #1
 8005fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	691b      	ldr	r3, [r3, #16]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d003      	beq.n	800600a <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	691b      	ldr	r3, [r3, #16]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	d01f      	beq.n	8006054 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d01a      	beq.n	8006054 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800602c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2210      	movs	r2, #16
 8006034:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f80e 	bl	8006070 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_DMA2D_ConfigLayer+0x20>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e079      	b.n	8006198 <HAL_DMA2D_ConfigLayer+0x114>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	011b      	lsls	r3, r3, #4
 80060b8:	3318      	adds	r3, #24
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	4413      	add	r3, r2
 80060be:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	041b      	lsls	r3, r3, #16
 80060ca:	4313      	orrs	r3, r2
 80060cc:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80060ce:	4b35      	ldr	r3, [pc, #212]	; (80061a4 <HAL_DMA2D_ConfigLayer+0x120>)
 80060d0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	2b0a      	cmp	r3, #10
 80060d8:	d003      	beq.n	80060e2 <HAL_DMA2D_ConfigLayer+0x5e>
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b09      	cmp	r3, #9
 80060e0:	d107      	bne.n	80060f2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	e005      	b.n	80060fe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	061b      	lsls	r3, r3, #24
 80060f8:	697a      	ldr	r2, [r7, #20]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d120      	bne.n	8006146 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	43db      	mvns	r3, r3
 800610e:	ea02 0103 	and.w	r1, r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	430a      	orrs	r2, r1
 800611a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	6812      	ldr	r2, [r2, #0]
 8006124:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2b0a      	cmp	r3, #10
 800612c:	d003      	beq.n	8006136 <HAL_DMA2D_ConfigLayer+0xb2>
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	2b09      	cmp	r3, #9
 8006134:	d127      	bne.n	8006186 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	68da      	ldr	r2, [r3, #12]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
 8006144:	e01f      	b.n	8006186 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	69da      	ldr	r2, [r3, #28]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	43db      	mvns	r3, r3
 8006150:	ea02 0103 	and.w	r1, r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	430a      	orrs	r2, r1
 800615c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	6812      	ldr	r2, [r2, #0]
 8006166:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b0a      	cmp	r3, #10
 800616e:	d003      	beq.n	8006178 <HAL_DMA2D_ConfigLayer+0xf4>
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b09      	cmp	r3, #9
 8006176:	d106      	bne.n	8006186 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	68da      	ldr	r2, [r3, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006184:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr
 80061a4:	ff03000f 	.word	0xff03000f

080061a8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b08b      	sub	sp, #44	; 0x2c
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061bc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	041a      	lsls	r2, r3, #16
 80061c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061e0:	d174      	bne.n	80062cc <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80061e8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80061f0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80061f8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d108      	bne.n	800621a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	431a      	orrs	r2, r3
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	4313      	orrs	r3, r2
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	627b      	str	r3, [r7, #36]	; 0x24
 8006218:	e053      	b.n	80062c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d106      	bne.n	8006230 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	4313      	orrs	r3, r2
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	627b      	str	r3, [r7, #36]	; 0x24
 800622e:	e048      	b.n	80062c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d111      	bne.n	800625c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	0cdb      	lsrs	r3, r3, #19
 800623c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800623e:	69bb      	ldr	r3, [r7, #24]
 8006240:	0a9b      	lsrs	r3, r3, #10
 8006242:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	08db      	lsrs	r3, r3, #3
 8006248:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	02db      	lsls	r3, r3, #11
 8006252:	4313      	orrs	r3, r2
 8006254:	697a      	ldr	r2, [r7, #20]
 8006256:	4313      	orrs	r3, r2
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	e032      	b.n	80062c2 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	2b03      	cmp	r3, #3
 8006262:	d117      	bne.n	8006294 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	0fdb      	lsrs	r3, r3, #31
 8006268:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	0cdb      	lsrs	r3, r3, #19
 800626e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	0adb      	lsrs	r3, r3, #11
 8006274:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	08db      	lsrs	r3, r3, #3
 800627a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	029b      	lsls	r3, r3, #10
 8006284:	431a      	orrs	r2, r3
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	03db      	lsls	r3, r3, #15
 800628a:	4313      	orrs	r3, r2
 800628c:	697a      	ldr	r2, [r7, #20]
 800628e:	4313      	orrs	r3, r2
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	e016      	b.n	80062c2 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006294:	6a3b      	ldr	r3, [r7, #32]
 8006296:	0f1b      	lsrs	r3, r3, #28
 8006298:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	0d1b      	lsrs	r3, r3, #20
 800629e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	0b1b      	lsrs	r3, r3, #12
 80062a4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	091b      	lsrs	r3, r3, #4
 80062aa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	011a      	lsls	r2, r3, #4
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	431a      	orrs	r2, r3
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	031b      	lsls	r3, r3, #12
 80062ba:	4313      	orrs	r3, r2
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062c8:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80062ca:	e003      	b.n	80062d4 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68ba      	ldr	r2, [r7, #8]
 80062d2:	60da      	str	r2, [r3, #12]
}
 80062d4:	bf00      	nop
 80062d6:	372c      	adds	r7, #44	; 0x2c
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b089      	sub	sp, #36	; 0x24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
 80062e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80062f6:	2300      	movs	r3, #0
 80062f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062fa:	2300      	movs	r3, #0
 80062fc:	61fb      	str	r3, [r7, #28]
 80062fe:	e175      	b.n	80065ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006300:	2201      	movs	r2, #1
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	fa02 f303 	lsl.w	r3, r2, r3
 8006308:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4013      	ands	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	429a      	cmp	r2, r3
 800631a:	f040 8164 	bne.w	80065e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d00b      	beq.n	800633e <HAL_GPIO_Init+0x5e>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d007      	beq.n	800633e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006332:	2b11      	cmp	r3, #17
 8006334:	d003      	beq.n	800633e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b12      	cmp	r3, #18
 800633c:	d130      	bne.n	80063a0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	005b      	lsls	r3, r3, #1
 8006348:	2203      	movs	r2, #3
 800634a:	fa02 f303 	lsl.w	r3, r2, r3
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68da      	ldr	r2, [r3, #12]
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	fa02 f303 	lsl.w	r3, r2, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4313      	orrs	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006374:	2201      	movs	r2, #1
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	fa02 f303 	lsl.w	r3, r2, r3
 800637c:	43db      	mvns	r3, r3
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	4013      	ands	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 0201 	and.w	r2, r3, #1
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	fa02 f303 	lsl.w	r3, r2, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4313      	orrs	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	69ba      	ldr	r2, [r7, #24]
 800639e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	2203      	movs	r2, #3
 80063ac:	fa02 f303 	lsl.w	r3, r2, r3
 80063b0:	43db      	mvns	r3, r3
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	4013      	ands	r3, r2
 80063b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689a      	ldr	r2, [r3, #8]
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d003      	beq.n	80063e0 <HAL_GPIO_Init+0x100>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b12      	cmp	r3, #18
 80063de:	d123      	bne.n	8006428 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	08da      	lsrs	r2, r3, #3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3208      	adds	r2, #8
 80063e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	220f      	movs	r2, #15
 80063f8:	fa02 f303 	lsl.w	r3, r2, r3
 80063fc:	43db      	mvns	r3, r3
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	4013      	ands	r3, r2
 8006402:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	691a      	ldr	r2, [r3, #16]
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	f003 0307 	and.w	r3, r3, #7
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	fa02 f303 	lsl.w	r3, r2, r3
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4313      	orrs	r3, r2
 8006418:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800641a:	69fb      	ldr	r3, [r7, #28]
 800641c:	08da      	lsrs	r2, r3, #3
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3208      	adds	r2, #8
 8006422:	69b9      	ldr	r1, [r7, #24]
 8006424:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	005b      	lsls	r3, r3, #1
 8006432:	2203      	movs	r2, #3
 8006434:	fa02 f303 	lsl.w	r3, r2, r3
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f003 0203 	and.w	r2, r3, #3
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	005b      	lsls	r3, r3, #1
 800644c:	fa02 f303 	lsl.w	r3, r2, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4313      	orrs	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69ba      	ldr	r2, [r7, #24]
 800645a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80be 	beq.w	80065e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800646a:	4b66      	ldr	r3, [pc, #408]	; (8006604 <HAL_GPIO_Init+0x324>)
 800646c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800646e:	4a65      	ldr	r2, [pc, #404]	; (8006604 <HAL_GPIO_Init+0x324>)
 8006470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006474:	6453      	str	r3, [r2, #68]	; 0x44
 8006476:	4b63      	ldr	r3, [pc, #396]	; (8006604 <HAL_GPIO_Init+0x324>)
 8006478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800647e:	60fb      	str	r3, [r7, #12]
 8006480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006482:	4a61      	ldr	r2, [pc, #388]	; (8006608 <HAL_GPIO_Init+0x328>)
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	089b      	lsrs	r3, r3, #2
 8006488:	3302      	adds	r3, #2
 800648a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800648e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	220f      	movs	r2, #15
 800649a:	fa02 f303 	lsl.w	r3, r2, r3
 800649e:	43db      	mvns	r3, r3
 80064a0:	69ba      	ldr	r2, [r7, #24]
 80064a2:	4013      	ands	r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a58      	ldr	r2, [pc, #352]	; (800660c <HAL_GPIO_Init+0x32c>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d037      	beq.n	800651e <HAL_GPIO_Init+0x23e>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a57      	ldr	r2, [pc, #348]	; (8006610 <HAL_GPIO_Init+0x330>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d031      	beq.n	800651a <HAL_GPIO_Init+0x23a>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a56      	ldr	r2, [pc, #344]	; (8006614 <HAL_GPIO_Init+0x334>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d02b      	beq.n	8006516 <HAL_GPIO_Init+0x236>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a55      	ldr	r2, [pc, #340]	; (8006618 <HAL_GPIO_Init+0x338>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d025      	beq.n	8006512 <HAL_GPIO_Init+0x232>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a54      	ldr	r2, [pc, #336]	; (800661c <HAL_GPIO_Init+0x33c>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d01f      	beq.n	800650e <HAL_GPIO_Init+0x22e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a53      	ldr	r2, [pc, #332]	; (8006620 <HAL_GPIO_Init+0x340>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d019      	beq.n	800650a <HAL_GPIO_Init+0x22a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a52      	ldr	r2, [pc, #328]	; (8006624 <HAL_GPIO_Init+0x344>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d013      	beq.n	8006506 <HAL_GPIO_Init+0x226>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a51      	ldr	r2, [pc, #324]	; (8006628 <HAL_GPIO_Init+0x348>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00d      	beq.n	8006502 <HAL_GPIO_Init+0x222>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a50      	ldr	r2, [pc, #320]	; (800662c <HAL_GPIO_Init+0x34c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <HAL_GPIO_Init+0x21e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a4f      	ldr	r2, [pc, #316]	; (8006630 <HAL_GPIO_Init+0x350>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d101      	bne.n	80064fa <HAL_GPIO_Init+0x21a>
 80064f6:	2309      	movs	r3, #9
 80064f8:	e012      	b.n	8006520 <HAL_GPIO_Init+0x240>
 80064fa:	230a      	movs	r3, #10
 80064fc:	e010      	b.n	8006520 <HAL_GPIO_Init+0x240>
 80064fe:	2308      	movs	r3, #8
 8006500:	e00e      	b.n	8006520 <HAL_GPIO_Init+0x240>
 8006502:	2307      	movs	r3, #7
 8006504:	e00c      	b.n	8006520 <HAL_GPIO_Init+0x240>
 8006506:	2306      	movs	r3, #6
 8006508:	e00a      	b.n	8006520 <HAL_GPIO_Init+0x240>
 800650a:	2305      	movs	r3, #5
 800650c:	e008      	b.n	8006520 <HAL_GPIO_Init+0x240>
 800650e:	2304      	movs	r3, #4
 8006510:	e006      	b.n	8006520 <HAL_GPIO_Init+0x240>
 8006512:	2303      	movs	r3, #3
 8006514:	e004      	b.n	8006520 <HAL_GPIO_Init+0x240>
 8006516:	2302      	movs	r3, #2
 8006518:	e002      	b.n	8006520 <HAL_GPIO_Init+0x240>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <HAL_GPIO_Init+0x240>
 800651e:	2300      	movs	r3, #0
 8006520:	69fa      	ldr	r2, [r7, #28]
 8006522:	f002 0203 	and.w	r2, r2, #3
 8006526:	0092      	lsls	r2, r2, #2
 8006528:	4093      	lsls	r3, r2
 800652a:	69ba      	ldr	r2, [r7, #24]
 800652c:	4313      	orrs	r3, r2
 800652e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006530:	4935      	ldr	r1, [pc, #212]	; (8006608 <HAL_GPIO_Init+0x328>)
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	3302      	adds	r3, #2
 8006538:	69ba      	ldr	r2, [r7, #24]
 800653a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800653e:	4b3d      	ldr	r3, [pc, #244]	; (8006634 <HAL_GPIO_Init+0x354>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	43db      	mvns	r3, r3
 8006548:	69ba      	ldr	r2, [r7, #24]
 800654a:	4013      	ands	r3, r2
 800654c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4313      	orrs	r3, r2
 8006560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006562:	4a34      	ldr	r2, [pc, #208]	; (8006634 <HAL_GPIO_Init+0x354>)
 8006564:	69bb      	ldr	r3, [r7, #24]
 8006566:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006568:	4b32      	ldr	r3, [pc, #200]	; (8006634 <HAL_GPIO_Init+0x354>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	43db      	mvns	r3, r3
 8006572:	69ba      	ldr	r2, [r7, #24]
 8006574:	4013      	ands	r3, r2
 8006576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006584:	69ba      	ldr	r2, [r7, #24]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800658c:	4a29      	ldr	r2, [pc, #164]	; (8006634 <HAL_GPIO_Init+0x354>)
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006592:	4b28      	ldr	r3, [pc, #160]	; (8006634 <HAL_GPIO_Init+0x354>)
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	43db      	mvns	r3, r3
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	4013      	ands	r3, r2
 80065a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80065ae:	69ba      	ldr	r2, [r7, #24]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80065b6:	4a1f      	ldr	r2, [pc, #124]	; (8006634 <HAL_GPIO_Init+0x354>)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80065bc:	4b1d      	ldr	r3, [pc, #116]	; (8006634 <HAL_GPIO_Init+0x354>)
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	43db      	mvns	r3, r3
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	4013      	ands	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80065e0:	4a14      	ldr	r2, [pc, #80]	; (8006634 <HAL_GPIO_Init+0x354>)
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	f67f ae86 	bls.w	8006300 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop
 80065f8:	3724      	adds	r7, #36	; 0x24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40023800 	.word	0x40023800
 8006608:	40013800 	.word	0x40013800
 800660c:	40020000 	.word	0x40020000
 8006610:	40020400 	.word	0x40020400
 8006614:	40020800 	.word	0x40020800
 8006618:	40020c00 	.word	0x40020c00
 800661c:	40021000 	.word	0x40021000
 8006620:	40021400 	.word	0x40021400
 8006624:	40021800 	.word	0x40021800
 8006628:	40021c00 	.word	0x40021c00
 800662c:	40022000 	.word	0x40022000
 8006630:	40022400 	.word	0x40022400
 8006634:	40013c00 	.word	0x40013c00

08006638 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006646:	2300      	movs	r3, #0
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800664a:	2300      	movs	r3, #0
 800664c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
 8006652:	e0d9      	b.n	8006808 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006654:	2201      	movs	r2, #1
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	fa02 f303 	lsl.w	r3, r2, r3
 800665c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800665e:	683a      	ldr	r2, [r7, #0]
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	429a      	cmp	r2, r3
 800666c:	f040 80c9 	bne.w	8006802 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006670:	4a6b      	ldr	r2, [pc, #428]	; (8006820 <HAL_GPIO_DeInit+0x1e8>)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	089b      	lsrs	r3, r3, #2
 8006676:	3302      	adds	r3, #2
 8006678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	220f      	movs	r2, #15
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	4013      	ands	r3, r2
 8006690:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a63      	ldr	r2, [pc, #396]	; (8006824 <HAL_GPIO_DeInit+0x1ec>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d037      	beq.n	800670a <HAL_GPIO_DeInit+0xd2>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a62      	ldr	r2, [pc, #392]	; (8006828 <HAL_GPIO_DeInit+0x1f0>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d031      	beq.n	8006706 <HAL_GPIO_DeInit+0xce>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a61      	ldr	r2, [pc, #388]	; (800682c <HAL_GPIO_DeInit+0x1f4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02b      	beq.n	8006702 <HAL_GPIO_DeInit+0xca>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	4a60      	ldr	r2, [pc, #384]	; (8006830 <HAL_GPIO_DeInit+0x1f8>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d025      	beq.n	80066fe <HAL_GPIO_DeInit+0xc6>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a5f      	ldr	r2, [pc, #380]	; (8006834 <HAL_GPIO_DeInit+0x1fc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d01f      	beq.n	80066fa <HAL_GPIO_DeInit+0xc2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a5e      	ldr	r2, [pc, #376]	; (8006838 <HAL_GPIO_DeInit+0x200>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d019      	beq.n	80066f6 <HAL_GPIO_DeInit+0xbe>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a5d      	ldr	r2, [pc, #372]	; (800683c <HAL_GPIO_DeInit+0x204>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_GPIO_DeInit+0xba>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a5c      	ldr	r2, [pc, #368]	; (8006840 <HAL_GPIO_DeInit+0x208>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d00d      	beq.n	80066ee <HAL_GPIO_DeInit+0xb6>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a5b      	ldr	r2, [pc, #364]	; (8006844 <HAL_GPIO_DeInit+0x20c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d007      	beq.n	80066ea <HAL_GPIO_DeInit+0xb2>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a5a      	ldr	r2, [pc, #360]	; (8006848 <HAL_GPIO_DeInit+0x210>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d101      	bne.n	80066e6 <HAL_GPIO_DeInit+0xae>
 80066e2:	2309      	movs	r3, #9
 80066e4:	e012      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066e6:	230a      	movs	r3, #10
 80066e8:	e010      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066ea:	2308      	movs	r3, #8
 80066ec:	e00e      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066ee:	2307      	movs	r3, #7
 80066f0:	e00c      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066f2:	2306      	movs	r3, #6
 80066f4:	e00a      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066f6:	2305      	movs	r3, #5
 80066f8:	e008      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066fa:	2304      	movs	r3, #4
 80066fc:	e006      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 80066fe:	2303      	movs	r3, #3
 8006700:	e004      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 8006702:	2302      	movs	r3, #2
 8006704:	e002      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 8006706:	2301      	movs	r3, #1
 8006708:	e000      	b.n	800670c <HAL_GPIO_DeInit+0xd4>
 800670a:	2300      	movs	r3, #0
 800670c:	697a      	ldr	r2, [r7, #20]
 800670e:	f002 0203 	and.w	r2, r2, #3
 8006712:	0092      	lsls	r2, r2, #2
 8006714:	4093      	lsls	r3, r2
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	429a      	cmp	r2, r3
 800671a:	d132      	bne.n	8006782 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800671c:	4b4b      	ldr	r3, [pc, #300]	; (800684c <HAL_GPIO_DeInit+0x214>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	43db      	mvns	r3, r3
 8006724:	4949      	ldr	r1, [pc, #292]	; (800684c <HAL_GPIO_DeInit+0x214>)
 8006726:	4013      	ands	r3, r2
 8006728:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800672a:	4b48      	ldr	r3, [pc, #288]	; (800684c <HAL_GPIO_DeInit+0x214>)
 800672c:	685a      	ldr	r2, [r3, #4]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	43db      	mvns	r3, r3
 8006732:	4946      	ldr	r1, [pc, #280]	; (800684c <HAL_GPIO_DeInit+0x214>)
 8006734:	4013      	ands	r3, r2
 8006736:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006738:	4b44      	ldr	r3, [pc, #272]	; (800684c <HAL_GPIO_DeInit+0x214>)
 800673a:	689a      	ldr	r2, [r3, #8]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	43db      	mvns	r3, r3
 8006740:	4942      	ldr	r1, [pc, #264]	; (800684c <HAL_GPIO_DeInit+0x214>)
 8006742:	4013      	ands	r3, r2
 8006744:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006746:	4b41      	ldr	r3, [pc, #260]	; (800684c <HAL_GPIO_DeInit+0x214>)
 8006748:	68da      	ldr	r2, [r3, #12]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	43db      	mvns	r3, r3
 800674e:	493f      	ldr	r1, [pc, #252]	; (800684c <HAL_GPIO_DeInit+0x214>)
 8006750:	4013      	ands	r3, r2
 8006752:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f003 0303 	and.w	r3, r3, #3
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	220f      	movs	r2, #15
 800675e:	fa02 f303 	lsl.w	r3, r2, r3
 8006762:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006764:	4a2e      	ldr	r2, [pc, #184]	; (8006820 <HAL_GPIO_DeInit+0x1e8>)
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	089b      	lsrs	r3, r3, #2
 800676a:	3302      	adds	r3, #2
 800676c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	43da      	mvns	r2, r3
 8006774:	482a      	ldr	r0, [pc, #168]	; (8006820 <HAL_GPIO_DeInit+0x1e8>)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	089b      	lsrs	r3, r3, #2
 800677a:	400a      	ands	r2, r1
 800677c:	3302      	adds	r3, #2
 800677e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	2103      	movs	r1, #3
 800678c:	fa01 f303 	lsl.w	r3, r1, r3
 8006790:	43db      	mvns	r3, r3
 8006792:	401a      	ands	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	08da      	lsrs	r2, r3, #3
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3208      	adds	r2, #8
 80067a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	f003 0307 	and.w	r3, r3, #7
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	220f      	movs	r2, #15
 80067ae:	fa02 f303 	lsl.w	r3, r2, r3
 80067b2:	43db      	mvns	r3, r3
 80067b4:	697a      	ldr	r2, [r7, #20]
 80067b6:	08d2      	lsrs	r2, r2, #3
 80067b8:	4019      	ands	r1, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3208      	adds	r2, #8
 80067be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68da      	ldr	r2, [r3, #12]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	005b      	lsls	r3, r3, #1
 80067ca:	2103      	movs	r1, #3
 80067cc:	fa01 f303 	lsl.w	r3, r1, r3
 80067d0:	43db      	mvns	r3, r3
 80067d2:	401a      	ands	r2, r3
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	2101      	movs	r1, #1
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	fa01 f303 	lsl.w	r3, r1, r3
 80067e4:	43db      	mvns	r3, r3
 80067e6:	401a      	ands	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	005b      	lsls	r3, r3, #1
 80067f4:	2103      	movs	r1, #3
 80067f6:	fa01 f303 	lsl.w	r3, r1, r3
 80067fa:	43db      	mvns	r3, r3
 80067fc:	401a      	ands	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	3301      	adds	r3, #1
 8006806:	617b      	str	r3, [r7, #20]
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	2b0f      	cmp	r3, #15
 800680c:	f67f af22 	bls.w	8006654 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006810:	bf00      	nop
 8006812:	bf00      	nop
 8006814:	371c      	adds	r7, #28
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40013800 	.word	0x40013800
 8006824:	40020000 	.word	0x40020000
 8006828:	40020400 	.word	0x40020400
 800682c:	40020800 	.word	0x40020800
 8006830:	40020c00 	.word	0x40020c00
 8006834:	40021000 	.word	0x40021000
 8006838:	40021400 	.word	0x40021400
 800683c:	40021800 	.word	0x40021800
 8006840:	40021c00 	.word	0x40021c00
 8006844:	40022000 	.word	0x40022000
 8006848:	40022400 	.word	0x40022400
 800684c:	40013c00 	.word	0x40013c00

08006850 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	460b      	mov	r3, r1
 800685a:	807b      	strh	r3, [r7, #2]
 800685c:	4613      	mov	r3, r2
 800685e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006860:	787b      	ldrb	r3, [r7, #1]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006866:	887a      	ldrh	r2, [r7, #2]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800686c:	e003      	b.n	8006876 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800686e:	887b      	ldrh	r3, [r7, #2]
 8006870:	041a      	lsls	r2, r3, #16
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	619a      	str	r2, [r3, #24]
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	4603      	mov	r3, r0
 800688c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006890:	695a      	ldr	r2, [r3, #20]
 8006892:	88fb      	ldrh	r3, [r7, #6]
 8006894:	4013      	ands	r3, r2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d006      	beq.n	80068a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800689c:	88fb      	ldrh	r3, [r7, #6]
 800689e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068a0:	88fb      	ldrh	r3, [r7, #6]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f806 	bl	80068b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80068a8:	bf00      	nop
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40013c00 	.word	0x40013c00

080068b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e07f      	b.n	80069de <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d106      	bne.n	80068f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f7fb fd00 	bl	80022f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2224      	movs	r2, #36	; 0x24
 80068fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800691c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	689a      	ldr	r2, [r3, #8]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800692c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	2b01      	cmp	r3, #1
 8006934:	d107      	bne.n	8006946 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006942:	609a      	str	r2, [r3, #8]
 8006944:	e006      	b.n	8006954 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	689a      	ldr	r2, [r3, #8]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006952:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	68db      	ldr	r3, [r3, #12]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d104      	bne.n	8006966 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006964:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	6859      	ldr	r1, [r3, #4]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_I2C_Init+0x11c>)
 8006972:	430b      	orrs	r3, r1
 8006974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68da      	ldr	r2, [r3, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691a      	ldr	r2, [r3, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	695b      	ldr	r3, [r3, #20]
 800698e:	ea42 0103 	orr.w	r1, r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	69d9      	ldr	r1, [r3, #28]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a1a      	ldr	r2, [r3, #32]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f042 0201 	orr.w	r2, r2, #1
 80069be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80069dc:	2300      	movs	r3, #0
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3708      	adds	r7, #8
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	02008000 	.word	0x02008000

080069ec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e021      	b.n	8006a42 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2224      	movs	r2, #36	; 0x24
 8006a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f022 0201 	bic.w	r2, r2, #1
 8006a14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7fb fcb2 	bl	8002380 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b088      	sub	sp, #32
 8006a50:	af02      	add	r7, sp, #8
 8006a52:	60f8      	str	r0, [r7, #12]
 8006a54:	4608      	mov	r0, r1
 8006a56:	4611      	mov	r1, r2
 8006a58:	461a      	mov	r2, r3
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	817b      	strh	r3, [r7, #10]
 8006a5e:	460b      	mov	r3, r1
 8006a60:	813b      	strh	r3, [r7, #8]
 8006a62:	4613      	mov	r3, r2
 8006a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b20      	cmp	r3, #32
 8006a70:	f040 80f9 	bne.w	8006c66 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <HAL_I2C_Mem_Write+0x34>
 8006a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a86:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0ed      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_I2C_Mem_Write+0x4e>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e0e6      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006aa2:	f7fd fff1 	bl	8004a88 <HAL_GetTick>
 8006aa6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2319      	movs	r3, #25
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fad1 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e0d1      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2221      	movs	r2, #33	; 0x21
 8006ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2240      	movs	r2, #64	; 0x40
 8006ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a3a      	ldr	r2, [r7, #32]
 8006ade:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006ae4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006aec:	88f8      	ldrh	r0, [r7, #6]
 8006aee:	893a      	ldrh	r2, [r7, #8]
 8006af0:	8979      	ldrh	r1, [r7, #10]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	9301      	str	r3, [sp, #4]
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4603      	mov	r3, r0
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 f9e1 	bl	8006ec4 <I2C_RequestMemoryWrite>
 8006b02:	4603      	mov	r3, r0
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d005      	beq.n	8006b14 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0a9      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2bff      	cmp	r3, #255	; 0xff
 8006b1c:	d90e      	bls.n	8006b3c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	22ff      	movs	r2, #255	; 0xff
 8006b22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	8979      	ldrh	r1, [r7, #10]
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fbb3 	bl	80072a0 <I2C_TransferConfig>
 8006b3a:	e00f      	b.n	8006b5c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b4a:	b2da      	uxtb	r2, r3
 8006b4c:	8979      	ldrh	r1, [r7, #10]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 fba2 	bl	80072a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fabb 	bl	80070dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e07b      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	781a      	ldrb	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d034      	beq.n	8006c14 <HAL_I2C_Mem_Write+0x1c8>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d130      	bne.n	8006c14 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2180      	movs	r1, #128	; 0x80
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fa4d 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d001      	beq.n	8006bcc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e04d      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2bff      	cmp	r3, #255	; 0xff
 8006bd4:	d90e      	bls.n	8006bf4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	22ff      	movs	r2, #255	; 0xff
 8006bda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	8979      	ldrh	r1, [r7, #10]
 8006be4:	2300      	movs	r3, #0
 8006be6:	9300      	str	r3, [sp, #0]
 8006be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fb57 	bl	80072a0 <I2C_TransferConfig>
 8006bf2:	e00f      	b.n	8006c14 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29a      	uxth	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	8979      	ldrh	r1, [r7, #10]
 8006c06:	2300      	movs	r3, #0
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 fb46 	bl	80072a0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d19e      	bne.n	8006b5c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c22:	68f8      	ldr	r0, [r7, #12]
 8006c24:	f000 fa9a 	bl	800715c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e01a      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2220      	movs	r2, #32
 8006c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6859      	ldr	r1, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	4b0a      	ldr	r3, [pc, #40]	; (8006c70 <HAL_I2C_Mem_Write+0x224>)
 8006c46:	400b      	ands	r3, r1
 8006c48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e000      	b.n	8006c68 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006c66:	2302      	movs	r3, #2
  }
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	fe00e800 	.word	0xfe00e800

08006c74 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af02      	add	r7, sp, #8
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	4608      	mov	r0, r1
 8006c7e:	4611      	mov	r1, r2
 8006c80:	461a      	mov	r2, r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	817b      	strh	r3, [r7, #10]
 8006c86:	460b      	mov	r3, r1
 8006c88:	813b      	strh	r3, [r7, #8]
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b20      	cmp	r3, #32
 8006c98:	f040 80fd 	bne.w	8006e96 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c9c:	6a3b      	ldr	r3, [r7, #32]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d002      	beq.n	8006ca8 <HAL_I2C_Mem_Read+0x34>
 8006ca2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cae:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	e0f1      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d101      	bne.n	8006cc2 <HAL_I2C_Mem_Read+0x4e>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e0ea      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cca:	f7fd fedd 	bl	8004a88 <HAL_GetTick>
 8006cce:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	2319      	movs	r3, #25
 8006cd6:	2201      	movs	r2, #1
 8006cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 f9bd 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d001      	beq.n	8006cec <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0d5      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2222      	movs	r2, #34	; 0x22
 8006cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2240      	movs	r2, #64	; 0x40
 8006cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	6a3a      	ldr	r2, [r7, #32]
 8006d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006d14:	88f8      	ldrh	r0, [r7, #6]
 8006d16:	893a      	ldrh	r2, [r7, #8]
 8006d18:	8979      	ldrh	r1, [r7, #10]
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4603      	mov	r3, r0
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f000 f921 	bl	8006f6c <I2C_RequestMemoryRead>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0ad      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d90e      	bls.n	8006d64 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	22ff      	movs	r2, #255	; 0xff
 8006d4a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	8979      	ldrh	r1, [r7, #10]
 8006d54:	4b52      	ldr	r3, [pc, #328]	; (8006ea0 <HAL_I2C_Mem_Read+0x22c>)
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fa9f 	bl	80072a0 <I2C_TransferConfig>
 8006d62:	e00f      	b.n	8006d84 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	8979      	ldrh	r1, [r7, #10]
 8006d76:	4b4a      	ldr	r3, [pc, #296]	; (8006ea0 <HAL_I2C_Mem_Read+0x22c>)
 8006d78:	9300      	str	r3, [sp, #0]
 8006d7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 fa8e 	bl	80072a0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	2104      	movs	r1, #4
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f964 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e07c      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	b29a      	uxth	r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dc6:	b29b      	uxth	r3, r3
 8006dc8:	3b01      	subs	r3, #1
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d034      	beq.n	8006e44 <HAL_I2C_Mem_Read+0x1d0>
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d130      	bne.n	8006e44 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	2200      	movs	r2, #0
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 f935 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d001      	beq.n	8006dfc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e04d      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	2bff      	cmp	r3, #255	; 0xff
 8006e04:	d90e      	bls.n	8006e24 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e10:	b2da      	uxtb	r2, r3
 8006e12:	8979      	ldrh	r1, [r7, #10]
 8006e14:	2300      	movs	r3, #0
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e1c:	68f8      	ldr	r0, [r7, #12]
 8006e1e:	f000 fa3f 	bl	80072a0 <I2C_TransferConfig>
 8006e22:	e00f      	b.n	8006e44 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e28:	b29a      	uxth	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	8979      	ldrh	r1, [r7, #10]
 8006e36:	2300      	movs	r3, #0
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fa2e 	bl	80072a0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d19a      	bne.n	8006d84 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e52:	68f8      	ldr	r0, [r7, #12]
 8006e54:	f000 f982 	bl	800715c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	e01a      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2220      	movs	r2, #32
 8006e68:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	4b0b      	ldr	r3, [pc, #44]	; (8006ea4 <HAL_I2C_Mem_Read+0x230>)
 8006e76:	400b      	ands	r3, r1
 8006e78:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	e000      	b.n	8006e98 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006e96:	2302      	movs	r3, #2
  }
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3718      	adds	r7, #24
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	80002400 	.word	0x80002400
 8006ea4:	fe00e800 	.word	0xfe00e800

08006ea8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eb6:	b2db      	uxtb	r3, r3
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	370c      	adds	r7, #12
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af02      	add	r7, sp, #8
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	817b      	strh	r3, [r7, #10]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	813b      	strh	r3, [r7, #8]
 8006eda:	4613      	mov	r3, r2
 8006edc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006ede:	88fb      	ldrh	r3, [r7, #6]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	8979      	ldrh	r1, [r7, #10]
 8006ee4:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <I2C_RequestMemoryWrite+0xa4>)
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 f9d7 	bl	80072a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ef2:	69fa      	ldr	r2, [r7, #28]
 8006ef4:	69b9      	ldr	r1, [r7, #24]
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f000 f8f0 	bl	80070dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006f02:	2301      	movs	r3, #1
 8006f04:	e02c      	b.n	8006f60 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f06:	88fb      	ldrh	r3, [r7, #6]
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d105      	bne.n	8006f18 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f0c:	893b      	ldrh	r3, [r7, #8]
 8006f0e:	b2da      	uxtb	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	629a      	str	r2, [r3, #40]	; 0x28
 8006f16:	e015      	b.n	8006f44 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006f18:	893b      	ldrh	r3, [r7, #8]
 8006f1a:	0a1b      	lsrs	r3, r3, #8
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f26:	69fa      	ldr	r2, [r7, #28]
 8006f28:	69b9      	ldr	r1, [r7, #24]
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f000 f8d6 	bl	80070dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d001      	beq.n	8006f3a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e012      	b.n	8006f60 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006f3a:	893b      	ldrh	r3, [r7, #8]
 8006f3c:	b2da      	uxtb	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	9300      	str	r3, [sp, #0]
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2180      	movs	r1, #128	; 0x80
 8006f4e:	68f8      	ldr	r0, [r7, #12]
 8006f50:	f000 f884 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006f54:	4603      	mov	r3, r0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d001      	beq.n	8006f5e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e000      	b.n	8006f60 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006f5e:	2300      	movs	r3, #0
}
 8006f60:	4618      	mov	r0, r3
 8006f62:	3710      	adds	r7, #16
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	80002000 	.word	0x80002000

08006f6c <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b086      	sub	sp, #24
 8006f70:	af02      	add	r7, sp, #8
 8006f72:	60f8      	str	r0, [r7, #12]
 8006f74:	4608      	mov	r0, r1
 8006f76:	4611      	mov	r1, r2
 8006f78:	461a      	mov	r2, r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	817b      	strh	r3, [r7, #10]
 8006f7e:	460b      	mov	r3, r1
 8006f80:	813b      	strh	r3, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	b2da      	uxtb	r2, r3
 8006f8a:	8979      	ldrh	r1, [r7, #10]
 8006f8c:	4b20      	ldr	r3, [pc, #128]	; (8007010 <I2C_RequestMemoryRead+0xa4>)
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	2300      	movs	r3, #0
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f000 f984 	bl	80072a0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f98:	69fa      	ldr	r2, [r7, #28]
 8006f9a:	69b9      	ldr	r1, [r7, #24]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f89d 	bl	80070dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e02c      	b.n	8007006 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006fac:	88fb      	ldrh	r3, [r7, #6]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d105      	bne.n	8006fbe <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fb2:	893b      	ldrh	r3, [r7, #8]
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	629a      	str	r2, [r3, #40]	; 0x28
 8006fbc:	e015      	b.n	8006fea <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006fbe:	893b      	ldrh	r3, [r7, #8]
 8006fc0:	0a1b      	lsrs	r3, r3, #8
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fcc:	69fa      	ldr	r2, [r7, #28]
 8006fce:	69b9      	ldr	r1, [r7, #24]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f000 f883 	bl	80070dc <I2C_WaitOnTXISFlagUntilTimeout>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e012      	b.n	8007006 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006fe0:	893b      	ldrh	r3, [r7, #8]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2140      	movs	r1, #64	; 0x40
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f831 	bl	800705c <I2C_WaitOnFlagUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e000      	b.n	8007006 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	bf00      	nop
 8007010:	80002000 	.word	0x80002000

08007014 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f003 0302 	and.w	r3, r3, #2
 8007026:	2b02      	cmp	r3, #2
 8007028:	d103      	bne.n	8007032 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2200      	movs	r2, #0
 8007030:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	699b      	ldr	r3, [r3, #24]
 8007038:	f003 0301 	and.w	r3, r3, #1
 800703c:	2b01      	cmp	r3, #1
 800703e:	d007      	beq.n	8007050 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	699a      	ldr	r2, [r3, #24]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0201 	orr.w	r2, r2, #1
 800704e:	619a      	str	r2, [r3, #24]
  }
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	4613      	mov	r3, r2
 800706a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800706c:	e022      	b.n	80070b4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d01e      	beq.n	80070b4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007076:	f7fd fd07 	bl	8004a88 <HAL_GetTick>
 800707a:	4602      	mov	r2, r0
 800707c:	69bb      	ldr	r3, [r7, #24]
 800707e:	1ad3      	subs	r3, r2, r3
 8007080:	683a      	ldr	r2, [r7, #0]
 8007082:	429a      	cmp	r2, r3
 8007084:	d302      	bcc.n	800708c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d113      	bne.n	80070b4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007090:	f043 0220 	orr.w	r2, r3, #32
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2220      	movs	r2, #32
 800709c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e00f      	b.n	80070d4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	4013      	ands	r3, r2
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	bf0c      	ite	eq
 80070c4:	2301      	moveq	r3, #1
 80070c6:	2300      	movne	r3, #0
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	461a      	mov	r2, r3
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d0cd      	beq.n	800706e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070e8:	e02c      	b.n	8007144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f000 f870 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d001      	beq.n	80070fe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e02a      	b.n	8007154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007104:	d01e      	beq.n	8007144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7fd fcbf 	bl	8004a88 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d113      	bne.n	8007144 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	f043 0220 	orr.w	r2, r3, #32
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2220      	movs	r2, #32
 800712c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2200      	movs	r2, #0
 800713c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	e007      	b.n	8007154 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b02      	cmp	r3, #2
 8007150:	d1cb      	bne.n	80070ea <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	60f8      	str	r0, [r7, #12]
 8007164:	60b9      	str	r1, [r7, #8]
 8007166:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007168:	e028      	b.n	80071bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	68b9      	ldr	r1, [r7, #8]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 f830 	bl	80071d4 <I2C_IsAcknowledgeFailed>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e026      	b.n	80071cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800717e:	f7fd fc83 	bl	8004a88 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	429a      	cmp	r2, r3
 800718c:	d302      	bcc.n	8007194 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d113      	bne.n	80071bc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007198:	f043 0220 	orr.w	r2, r3, #32
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	e007      	b.n	80071cc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	f003 0320 	and.w	r3, r3, #32
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d1cf      	bne.n	800716a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	f003 0310 	and.w	r3, r3, #16
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d151      	bne.n	8007292 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071ee:	e022      	b.n	8007236 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f6:	d01e      	beq.n	8007236 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071f8:	f7fd fc46 	bl	8004a88 <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	429a      	cmp	r2, r3
 8007206:	d302      	bcc.n	800720e <I2C_IsAcknowledgeFailed+0x3a>
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d113      	bne.n	8007236 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	f043 0220 	orr.w	r2, r3, #32
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2220      	movs	r2, #32
 800721e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e02e      	b.n	8007294 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	f003 0320 	and.w	r3, r3, #32
 8007240:	2b20      	cmp	r3, #32
 8007242:	d1d5      	bne.n	80071f0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2210      	movs	r2, #16
 800724a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2220      	movs	r2, #32
 8007252:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	f7ff fedd 	bl	8007014 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6859      	ldr	r1, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <I2C_IsAcknowledgeFailed+0xc8>)
 8007266:	400b      	ands	r3, r1
 8007268:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2220      	movs	r2, #32
 800727a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	fe00e800 	.word	0xfe00e800

080072a0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	607b      	str	r3, [r7, #4]
 80072aa:	460b      	mov	r3, r1
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	4613      	mov	r3, r2
 80072b0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	685a      	ldr	r2, [r3, #4]
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	0d5b      	lsrs	r3, r3, #21
 80072bc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072c0:	4b0d      	ldr	r3, [pc, #52]	; (80072f8 <I2C_TransferConfig+0x58>)
 80072c2:	430b      	orrs	r3, r1
 80072c4:	43db      	mvns	r3, r3
 80072c6:	ea02 0103 	and.w	r1, r2, r3
 80072ca:	897b      	ldrh	r3, [r7, #10]
 80072cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80072d0:	7a7b      	ldrb	r3, [r7, #9]
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80072d8:	431a      	orrs	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	431a      	orrs	r2, r3
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	431a      	orrs	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	430a      	orrs	r2, r1
 80072e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80072ea:	bf00      	nop
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	03ff63ff 	.word	0x03ff63ff

080072fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b20      	cmp	r3, #32
 8007310:	d138      	bne.n	8007384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800731c:	2302      	movs	r3, #2
 800731e:	e032      	b.n	8007386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2224      	movs	r2, #36	; 0x24
 800732c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f022 0201 	bic.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800734e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6819      	ldr	r1, [r3, #0]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	683a      	ldr	r2, [r7, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f042 0201 	orr.w	r2, r2, #1
 800736e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2220      	movs	r2, #32
 8007374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	e000      	b.n	8007386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007384:	2302      	movs	r3, #2
  }
}
 8007386:	4618      	mov	r0, r3
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007392:	b480      	push	{r7}
 8007394:	b085      	sub	sp, #20
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d139      	bne.n	800741c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e033      	b.n	800741e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2224      	movs	r2, #36	; 0x24
 80073c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0201 	bic.w	r2, r2, #1
 80073d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	021b      	lsls	r3, r3, #8
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0201 	orr.w	r2, r2, #1
 8007406:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007418:	2300      	movs	r3, #0
 800741a:	e000      	b.n	800741e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800741c:	2302      	movs	r3, #2
  }
}
 800741e:	4618      	mov	r0, r3
 8007420:	3714      	adds	r7, #20
 8007422:	46bd      	mov	sp, r7
 8007424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007428:	4770      	bx	lr
	...

0800742c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	e0bf      	b.n	80075be <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fa ffb6 	bl	80023c4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800746e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6999      	ldr	r1, [r3, #24]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007484:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	430a      	orrs	r2, r1
 8007492:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	6899      	ldr	r1, [r3, #8]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b4a      	ldr	r3, [pc, #296]	; (80075c8 <HAL_LTDC_Init+0x19c>)
 80074a0:	400b      	ands	r3, r1
 80074a2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	041b      	lsls	r3, r3, #16
 80074aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6899      	ldr	r1, [r3, #8]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	699a      	ldr	r2, [r3, #24]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	430a      	orrs	r2, r1
 80074c0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68d9      	ldr	r1, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	4b3e      	ldr	r3, [pc, #248]	; (80075c8 <HAL_LTDC_Init+0x19c>)
 80074ce:	400b      	ands	r3, r1
 80074d0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	041b      	lsls	r3, r3, #16
 80074d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68d9      	ldr	r1, [r3, #12]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6a1a      	ldr	r2, [r3, #32]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	431a      	orrs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6919      	ldr	r1, [r3, #16]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b33      	ldr	r3, [pc, #204]	; (80075c8 <HAL_LTDC_Init+0x19c>)
 80074fc:	400b      	ands	r3, r1
 80074fe:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007504:	041b      	lsls	r3, r3, #16
 8007506:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6919      	ldr	r1, [r3, #16]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	431a      	orrs	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6959      	ldr	r1, [r3, #20]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	4b27      	ldr	r3, [pc, #156]	; (80075c8 <HAL_LTDC_Init+0x19c>)
 800752a:	400b      	ands	r3, r1
 800752c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6959      	ldr	r1, [r3, #20]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	431a      	orrs	r2, r3
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	430a      	orrs	r2, r1
 800754a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007552:	021b      	lsls	r3, r3, #8
 8007554:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800755c:	041b      	lsls	r3, r3, #16
 800755e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800756e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4313      	orrs	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007582:	431a      	orrs	r2, r3
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	430a      	orrs	r2, r1
 800758a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f042 0206 	orr.w	r2, r2, #6
 800759a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	699a      	ldr	r2, [r3, #24]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f042 0201 	orr.w	r2, r2, #1
 80075aa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2200      	movs	r2, #0
 80075b0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	f000f800 	.word	0xf000f800

080075cc <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075da:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f003 0304 	and.w	r3, r3, #4
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d023      	beq.n	8007636 <HAL_LTDC_IRQHandler+0x6a>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d01e      	beq.n	8007636 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0204 	bic.w	r2, r2, #4
 8007606:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2204      	movs	r2, #4
 800760e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007616:	f043 0201 	orr.w	r2, r3, #1
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2204      	movs	r2, #4
 8007624:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 f86f 	bl	8007714 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f003 0302 	and.w	r3, r3, #2
 800763c:	2b00      	cmp	r3, #0
 800763e:	d023      	beq.n	8007688 <HAL_LTDC_IRQHandler+0xbc>
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	f003 0302 	and.w	r3, r3, #2
 8007646:	2b00      	cmp	r3, #0
 8007648:	d01e      	beq.n	8007688 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f022 0202 	bic.w	r2, r2, #2
 8007658:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2202      	movs	r2, #2
 8007660:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007668:	f043 0202 	orr.w	r2, r3, #2
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2204      	movs	r2, #4
 8007676:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f846 	bl	8007714 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f003 0301 	and.w	r3, r3, #1
 800768e:	2b00      	cmp	r3, #0
 8007690:	d01b      	beq.n	80076ca <HAL_LTDC_IRQHandler+0xfe>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f003 0301 	and.w	r3, r3, #1
 8007698:	2b00      	cmp	r3, #0
 800769a:	d016      	beq.n	80076ca <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0201 	bic.w	r2, r2, #1
 80076aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2201      	movs	r2, #1
 80076b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f82f 	bl	8007728 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	f003 0308 	and.w	r3, r3, #8
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d01b      	beq.n	800770c <HAL_LTDC_IRQHandler+0x140>
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f003 0308 	and.w	r3, r3, #8
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f022 0208 	bic.w	r2, r2, #8
 80076ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2208      	movs	r2, #8
 80076f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 f818 	bl	800773c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800770c:	bf00      	nop
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007762:	2b01      	cmp	r3, #1
 8007764:	d101      	bne.n	800776a <HAL_LTDC_ConfigLayer+0x1a>
 8007766:	2302      	movs	r3, #2
 8007768:	e02c      	b.n	80077c4 <HAL_LTDC_ConfigLayer+0x74>
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2201      	movs	r2, #1
 800776e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2202      	movs	r2, #2
 8007776:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2134      	movs	r1, #52	; 0x34
 8007780:	fb01 f303 	mul.w	r3, r1, r3
 8007784:	4413      	add	r3, r2
 8007786:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	4614      	mov	r4, r2
 800778e:	461d      	mov	r5, r3
 8007790:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007792:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007794:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007796:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007798:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800779a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	68b9      	ldr	r1, [r7, #8]
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f81f 	bl	80077e8 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2201      	movs	r2, #1
 80077b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bdb0      	pop	{r4, r5, r7, pc}

080077cc <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80077da:	b2db      	uxtb	r3, r3
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b089      	sub	sp, #36	; 0x24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	60f8      	str	r0, [r7, #12]
 80077f0:	60b9      	str	r1, [r7, #8]
 80077f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	0c1b      	lsrs	r3, r3, #16
 8007800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007804:	4413      	add	r3, r2
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	01db      	lsls	r3, r3, #7
 8007814:	4413      	add	r3, r2
 8007816:	3384      	adds	r3, #132	; 0x84
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	6812      	ldr	r2, [r2, #0]
 800781e:	4611      	mov	r1, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	01d2      	lsls	r2, r2, #7
 8007824:	440a      	add	r2, r1
 8007826:	3284      	adds	r2, #132	; 0x84
 8007828:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800782c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	681a      	ldr	r2, [r3, #0]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	0c1b      	lsrs	r3, r3, #16
 800783a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800783e:	4413      	add	r3, r2
 8007840:	1c5a      	adds	r2, r3, #1
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4619      	mov	r1, r3
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	01db      	lsls	r3, r3, #7
 800784c:	440b      	add	r3, r1
 800784e:	3384      	adds	r3, #132	; 0x84
 8007850:	4619      	mov	r1, r3
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	4313      	orrs	r3, r2
 8007856:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68da      	ldr	r2, [r3, #12]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68db      	ldr	r3, [r3, #12]
 8007862:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007866:	4413      	add	r3, r2
 8007868:	041b      	lsls	r3, r3, #16
 800786a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	01db      	lsls	r3, r3, #7
 8007876:	4413      	add	r3, r2
 8007878:	3384      	adds	r3, #132	; 0x84
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	6812      	ldr	r2, [r2, #0]
 8007880:	4611      	mov	r1, r2
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	01d2      	lsls	r2, r2, #7
 8007886:	440a      	add	r2, r1
 8007888:	3284      	adds	r2, #132	; 0x84
 800788a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800788e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800789e:	4413      	add	r3, r2
 80078a0:	1c5a      	adds	r2, r3, #1
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4619      	mov	r1, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	01db      	lsls	r3, r3, #7
 80078ac:	440b      	add	r3, r1
 80078ae:	3384      	adds	r3, #132	; 0x84
 80078b0:	4619      	mov	r1, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	461a      	mov	r2, r3
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	01db      	lsls	r3, r3, #7
 80078c2:	4413      	add	r3, r2
 80078c4:	3384      	adds	r3, #132	; 0x84
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	6812      	ldr	r2, [r2, #0]
 80078cc:	4611      	mov	r1, r2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	01d2      	lsls	r2, r2, #7
 80078d2:	440a      	add	r2, r1
 80078d4:	3284      	adds	r2, #132	; 0x84
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	01db      	lsls	r3, r3, #7
 80078e6:	4413      	add	r3, r2
 80078e8:	3384      	adds	r3, #132	; 0x84
 80078ea:	461a      	mov	r2, r3
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007902:	041b      	lsls	r3, r3, #16
 8007904:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	061b      	lsls	r3, r3, #24
 800790c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	01db      	lsls	r3, r3, #7
 8007918:	4413      	add	r3, r2
 800791a:	3384      	adds	r3, #132	; 0x84
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	01db      	lsls	r3, r3, #7
 8007928:	4413      	add	r3, r2
 800792a:	3384      	adds	r3, #132	; 0x84
 800792c:	461a      	mov	r2, r3
 800792e:	2300      	movs	r3, #0
 8007930:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007938:	461a      	mov	r2, r3
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	431a      	orrs	r2, r3
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	431a      	orrs	r2, r3
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4619      	mov	r1, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	01db      	lsls	r3, r3, #7
 800794c:	440b      	add	r3, r1
 800794e:	3384      	adds	r3, #132	; 0x84
 8007950:	4619      	mov	r1, r3
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	4313      	orrs	r3, r2
 8007956:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	461a      	mov	r2, r3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	01db      	lsls	r3, r3, #7
 8007962:	4413      	add	r3, r2
 8007964:	3384      	adds	r3, #132	; 0x84
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	6812      	ldr	r2, [r2, #0]
 800796c:	4611      	mov	r1, r2
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	01d2      	lsls	r2, r2, #7
 8007972:	440a      	add	r2, r1
 8007974:	3284      	adds	r2, #132	; 0x84
 8007976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800797a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	01db      	lsls	r3, r3, #7
 8007986:	4413      	add	r3, r2
 8007988:	3384      	adds	r3, #132	; 0x84
 800798a:	461a      	mov	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	695b      	ldr	r3, [r3, #20]
 8007990:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	01db      	lsls	r3, r3, #7
 800799c:	4413      	add	r3, r2
 800799e:	3384      	adds	r3, #132	; 0x84
 80079a0:	69da      	ldr	r2, [r3, #28]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4619      	mov	r1, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	01db      	lsls	r3, r3, #7
 80079ac:	440b      	add	r3, r1
 80079ae:	3384      	adds	r3, #132	; 0x84
 80079b0:	4619      	mov	r1, r3
 80079b2:	4b58      	ldr	r3, [pc, #352]	; (8007b14 <LTDC_SetConfig+0x32c>)
 80079b4:	4013      	ands	r3, r2
 80079b6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	68f9      	ldr	r1, [r7, #12]
 80079c2:	6809      	ldr	r1, [r1, #0]
 80079c4:	4608      	mov	r0, r1
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	01c9      	lsls	r1, r1, #7
 80079ca:	4401      	add	r1, r0
 80079cc:	3184      	adds	r1, #132	; 0x84
 80079ce:	4313      	orrs	r3, r2
 80079d0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	01db      	lsls	r3, r3, #7
 80079dc:	4413      	add	r3, r2
 80079de:	3384      	adds	r3, #132	; 0x84
 80079e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	461a      	mov	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	01db      	lsls	r3, r3, #7
 80079ec:	4413      	add	r3, r2
 80079ee:	3384      	adds	r3, #132	; 0x84
 80079f0:	461a      	mov	r2, r3
 80079f2:	2300      	movs	r3, #0
 80079f4:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	461a      	mov	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	01db      	lsls	r3, r3, #7
 8007a00:	4413      	add	r3, r2
 8007a02:	3384      	adds	r3, #132	; 0x84
 8007a04:	461a      	mov	r2, r3
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d102      	bne.n	8007a1a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007a14:	2304      	movs	r3, #4
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e01b      	b.n	8007a52 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d102      	bne.n	8007a28 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007a22:	2303      	movs	r3, #3
 8007a24:	61fb      	str	r3, [r7, #28]
 8007a26:	e014      	b.n	8007a52 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	2b04      	cmp	r3, #4
 8007a2e:	d00b      	beq.n	8007a48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d007      	beq.n	8007a48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007a3c:	2b03      	cmp	r3, #3
 8007a3e:	d003      	beq.n	8007a48 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	d102      	bne.n	8007a4e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007a48:	2302      	movs	r3, #2
 8007a4a:	61fb      	str	r3, [r7, #28]
 8007a4c:	e001      	b.n	8007a52 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	461a      	mov	r2, r3
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	01db      	lsls	r3, r3, #7
 8007a5c:	4413      	add	r3, r2
 8007a5e:	3384      	adds	r3, #132	; 0x84
 8007a60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	6812      	ldr	r2, [r2, #0]
 8007a66:	4611      	mov	r1, r2
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	01d2      	lsls	r2, r2, #7
 8007a6c:	440a      	add	r2, r1
 8007a6e:	3284      	adds	r2, #132	; 0x84
 8007a70:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007a74:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a7a:	69fa      	ldr	r2, [r7, #28]
 8007a7c:	fb02 f303 	mul.w	r3, r2, r3
 8007a80:	041a      	lsls	r2, r3, #16
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6859      	ldr	r1, [r3, #4]
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	1acb      	subs	r3, r1, r3
 8007a8c:	69f9      	ldr	r1, [r7, #28]
 8007a8e:	fb01 f303 	mul.w	r3, r1, r3
 8007a92:	3303      	adds	r3, #3
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	6809      	ldr	r1, [r1, #0]
 8007a98:	4608      	mov	r0, r1
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	01c9      	lsls	r1, r1, #7
 8007a9e:	4401      	add	r1, r0
 8007aa0:	3184      	adds	r1, #132	; 0x84
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	01db      	lsls	r3, r3, #7
 8007ab0:	4413      	add	r3, r2
 8007ab2:	3384      	adds	r3, #132	; 0x84
 8007ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4619      	mov	r1, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	01db      	lsls	r3, r3, #7
 8007ac0:	440b      	add	r3, r1
 8007ac2:	3384      	adds	r3, #132	; 0x84
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	4b14      	ldr	r3, [pc, #80]	; (8007b18 <LTDC_SetConfig+0x330>)
 8007ac8:	4013      	ands	r3, r2
 8007aca:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	461a      	mov	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	01db      	lsls	r3, r3, #7
 8007ad6:	4413      	add	r3, r2
 8007ad8:	3384      	adds	r3, #132	; 0x84
 8007ada:	461a      	mov	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	01db      	lsls	r3, r3, #7
 8007aec:	4413      	add	r3, r2
 8007aee:	3384      	adds	r3, #132	; 0x84
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	6812      	ldr	r2, [r2, #0]
 8007af6:	4611      	mov	r1, r2
 8007af8:	687a      	ldr	r2, [r7, #4]
 8007afa:	01d2      	lsls	r2, r2, #7
 8007afc:	440a      	add	r2, r1
 8007afe:	3284      	adds	r2, #132	; 0x84
 8007b00:	f043 0301 	orr.w	r3, r3, #1
 8007b04:	6013      	str	r3, [r2, #0]
}
 8007b06:	bf00      	nop
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr
 8007b12:	bf00      	nop
 8007b14:	fffff8f8 	.word	0xfffff8f8
 8007b18:	fffff800 	.word	0xfffff800

08007b1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b20:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a04      	ldr	r2, [pc, #16]	; (8007b38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b2a:	6013      	str	r3, [r2, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	40007000 	.word	0x40007000

08007b3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007b46:	4b23      	ldr	r3, [pc, #140]	; (8007bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4a:	4a22      	ldr	r2, [pc, #136]	; (8007bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b50:	6413      	str	r3, [r2, #64]	; 0x40
 8007b52:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b5a:	603b      	str	r3, [r7, #0]
 8007b5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007b5e:	4b1e      	ldr	r3, [pc, #120]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1d      	ldr	r2, [pc, #116]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b6a:	f7fc ff8d 	bl	8004a88 <HAL_GetTick>
 8007b6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b70:	e009      	b.n	8007b86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007b72:	f7fc ff89 	bl	8004a88 <HAL_GetTick>
 8007b76:	4602      	mov	r2, r0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	1ad3      	subs	r3, r2, r3
 8007b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007b80:	d901      	bls.n	8007b86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e022      	b.n	8007bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007b86:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b92:	d1ee      	bne.n	8007b72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007b94:	4b10      	ldr	r3, [pc, #64]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	4a0f      	ldr	r2, [pc, #60]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ba0:	f7fc ff72 	bl	8004a88 <HAL_GetTick>
 8007ba4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007ba6:	e009      	b.n	8007bbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007ba8:	f7fc ff6e 	bl	8004a88 <HAL_GetTick>
 8007bac:	4602      	mov	r2, r0
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	1ad3      	subs	r3, r2, r3
 8007bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bb6:	d901      	bls.n	8007bbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e007      	b.n	8007bcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007bbc:	4b06      	ldr	r3, [pc, #24]	; (8007bd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bc8:	d1ee      	bne.n	8007ba8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}
 8007bd4:	40023800 	.word	0x40023800
 8007bd8:	40007000 	.word	0x40007000

08007bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b086      	sub	sp, #24
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007be4:	2300      	movs	r3, #0
 8007be6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e291      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	f000 8087 	beq.w	8007d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007c00:	4b96      	ldr	r3, [pc, #600]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d00c      	beq.n	8007c26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007c0c:	4b93      	ldr	r3, [pc, #588]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 030c 	and.w	r3, r3, #12
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d112      	bne.n	8007c3e <HAL_RCC_OscConfig+0x62>
 8007c18:	4b90      	ldr	r3, [pc, #576]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007c24:	d10b      	bne.n	8007c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c26:	4b8d      	ldr	r3, [pc, #564]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d06c      	beq.n	8007d0c <HAL_RCC_OscConfig+0x130>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	685b      	ldr	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d168      	bne.n	8007d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e26b      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c46:	d106      	bne.n	8007c56 <HAL_RCC_OscConfig+0x7a>
 8007c48:	4b84      	ldr	r3, [pc, #528]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a83      	ldr	r2, [pc, #524]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c52:	6013      	str	r3, [r2, #0]
 8007c54:	e02e      	b.n	8007cb4 <HAL_RCC_OscConfig+0xd8>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d10c      	bne.n	8007c78 <HAL_RCC_OscConfig+0x9c>
 8007c5e:	4b7f      	ldr	r3, [pc, #508]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a7e      	ldr	r2, [pc, #504]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	4b7c      	ldr	r3, [pc, #496]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a7b      	ldr	r2, [pc, #492]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	e01d      	b.n	8007cb4 <HAL_RCC_OscConfig+0xd8>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c80:	d10c      	bne.n	8007c9c <HAL_RCC_OscConfig+0xc0>
 8007c82:	4b76      	ldr	r3, [pc, #472]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a75      	ldr	r2, [pc, #468]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4b73      	ldr	r3, [pc, #460]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a72      	ldr	r2, [pc, #456]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007c98:	6013      	str	r3, [r2, #0]
 8007c9a:	e00b      	b.n	8007cb4 <HAL_RCC_OscConfig+0xd8>
 8007c9c:	4b6f      	ldr	r3, [pc, #444]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a6e      	ldr	r2, [pc, #440]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007ca2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ca6:	6013      	str	r3, [r2, #0]
 8007ca8:	4b6c      	ldr	r3, [pc, #432]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a6b      	ldr	r2, [pc, #428]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007cae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d013      	beq.n	8007ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cbc:	f7fc fee4 	bl	8004a88 <HAL_GetTick>
 8007cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cc2:	e008      	b.n	8007cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cc4:	f7fc fee0 	bl	8004a88 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b64      	cmp	r3, #100	; 0x64
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e21f      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd6:	4b61      	ldr	r3, [pc, #388]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d0f0      	beq.n	8007cc4 <HAL_RCC_OscConfig+0xe8>
 8007ce2:	e014      	b.n	8007d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce4:	f7fc fed0 	bl	8004a88 <HAL_GetTick>
 8007ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cea:	e008      	b.n	8007cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007cec:	f7fc fecc 	bl	8004a88 <HAL_GetTick>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	2b64      	cmp	r3, #100	; 0x64
 8007cf8:	d901      	bls.n	8007cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e20b      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007cfe:	4b57      	ldr	r3, [pc, #348]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <HAL_RCC_OscConfig+0x110>
 8007d0a:	e000      	b.n	8007d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d069      	beq.n	8007dee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007d1a:	4b50      	ldr	r3, [pc, #320]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	f003 030c 	and.w	r3, r3, #12
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d00b      	beq.n	8007d3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007d26:	4b4d      	ldr	r3, [pc, #308]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	f003 030c 	and.w	r3, r3, #12
 8007d2e:	2b08      	cmp	r3, #8
 8007d30:	d11c      	bne.n	8007d6c <HAL_RCC_OscConfig+0x190>
 8007d32:	4b4a      	ldr	r3, [pc, #296]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d116      	bne.n	8007d6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d3e:	4b47      	ldr	r3, [pc, #284]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d005      	beq.n	8007d56 <HAL_RCC_OscConfig+0x17a>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d001      	beq.n	8007d56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e1df      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d56:	4b41      	ldr	r3, [pc, #260]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	691b      	ldr	r3, [r3, #16]
 8007d62:	00db      	lsls	r3, r3, #3
 8007d64:	493d      	ldr	r1, [pc, #244]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007d6a:	e040      	b.n	8007dee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d023      	beq.n	8007dbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007d74:	4b39      	ldr	r3, [pc, #228]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a38      	ldr	r2, [pc, #224]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d80:	f7fc fe82 	bl	8004a88 <HAL_GetTick>
 8007d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d86:	e008      	b.n	8007d9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d88:	f7fc fe7e 	bl	8004a88 <HAL_GetTick>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	1ad3      	subs	r3, r2, r3
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	d901      	bls.n	8007d9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007d96:	2303      	movs	r3, #3
 8007d98:	e1bd      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d9a:	4b30      	ldr	r3, [pc, #192]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f003 0302 	and.w	r3, r3, #2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d0f0      	beq.n	8007d88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007da6:	4b2d      	ldr	r3, [pc, #180]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	4929      	ldr	r1, [pc, #164]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007db6:	4313      	orrs	r3, r2
 8007db8:	600b      	str	r3, [r1, #0]
 8007dba:	e018      	b.n	8007dee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007dbc:	4b27      	ldr	r3, [pc, #156]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dc8:	f7fc fe5e 	bl	8004a88 <HAL_GetTick>
 8007dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007dce:	e008      	b.n	8007de2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007dd0:	f7fc fe5a 	bl	8004a88 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b02      	cmp	r3, #2
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e199      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007de2:	4b1e      	ldr	r3, [pc, #120]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0302 	and.w	r3, r3, #2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1f0      	bne.n	8007dd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0308 	and.w	r3, r3, #8
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d038      	beq.n	8007e6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d019      	beq.n	8007e36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007e02:	4b16      	ldr	r3, [pc, #88]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e06:	4a15      	ldr	r2, [pc, #84]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e08:	f043 0301 	orr.w	r3, r3, #1
 8007e0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0e:	f7fc fe3b 	bl	8004a88 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e14:	e008      	b.n	8007e28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e16:	f7fc fe37 	bl	8004a88 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d901      	bls.n	8007e28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e176      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e28:	4b0c      	ldr	r3, [pc, #48]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e2c:	f003 0302 	and.w	r3, r3, #2
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d0f0      	beq.n	8007e16 <HAL_RCC_OscConfig+0x23a>
 8007e34:	e01a      	b.n	8007e6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007e36:	4b09      	ldr	r3, [pc, #36]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e3a:	4a08      	ldr	r2, [pc, #32]	; (8007e5c <HAL_RCC_OscConfig+0x280>)
 8007e3c:	f023 0301 	bic.w	r3, r3, #1
 8007e40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e42:	f7fc fe21 	bl	8004a88 <HAL_GetTick>
 8007e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e48:	e00a      	b.n	8007e60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007e4a:	f7fc fe1d 	bl	8004a88 <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	2b02      	cmp	r3, #2
 8007e56:	d903      	bls.n	8007e60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007e58:	2303      	movs	r3, #3
 8007e5a:	e15c      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
 8007e5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007e60:	4b91      	ldr	r3, [pc, #580]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e64:	f003 0302 	and.w	r3, r3, #2
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d1ee      	bne.n	8007e4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0304 	and.w	r3, r3, #4
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 80a4 	beq.w	8007fc2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007e7a:	4b8b      	ldr	r3, [pc, #556]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10d      	bne.n	8007ea2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007e86:	4b88      	ldr	r3, [pc, #544]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e8a:	4a87      	ldr	r2, [pc, #540]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6413      	str	r3, [r2, #64]	; 0x40
 8007e92:	4b85      	ldr	r3, [pc, #532]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e9a:	60bb      	str	r3, [r7, #8]
 8007e9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ea2:	4b82      	ldr	r3, [pc, #520]	; (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d118      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007eae:	4b7f      	ldr	r3, [pc, #508]	; (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a7e      	ldr	r2, [pc, #504]	; (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007eba:	f7fc fde5 	bl	8004a88 <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ec0:	e008      	b.n	8007ed4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ec2:	f7fc fde1 	bl	8004a88 <HAL_GetTick>
 8007ec6:	4602      	mov	r2, r0
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	2b64      	cmp	r3, #100	; 0x64
 8007ece:	d901      	bls.n	8007ed4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007ed0:	2303      	movs	r3, #3
 8007ed2:	e120      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ed4:	4b75      	ldr	r3, [pc, #468]	; (80080ac <HAL_RCC_OscConfig+0x4d0>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d0f0      	beq.n	8007ec2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x31a>
 8007ee8:	4b6f      	ldr	r3, [pc, #444]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eec:	4a6e      	ldr	r2, [pc, #440]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007eee:	f043 0301 	orr.w	r3, r3, #1
 8007ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8007ef4:	e02d      	b.n	8007f52 <HAL_RCC_OscConfig+0x376>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d10c      	bne.n	8007f18 <HAL_RCC_OscConfig+0x33c>
 8007efe:	4b6a      	ldr	r3, [pc, #424]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f02:	4a69      	ldr	r2, [pc, #420]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f04:	f023 0301 	bic.w	r3, r3, #1
 8007f08:	6713      	str	r3, [r2, #112]	; 0x70
 8007f0a:	4b67      	ldr	r3, [pc, #412]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0e:	4a66      	ldr	r2, [pc, #408]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	6713      	str	r3, [r2, #112]	; 0x70
 8007f16:	e01c      	b.n	8007f52 <HAL_RCC_OscConfig+0x376>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	2b05      	cmp	r3, #5
 8007f1e:	d10c      	bne.n	8007f3a <HAL_RCC_OscConfig+0x35e>
 8007f20:	4b61      	ldr	r3, [pc, #388]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f24:	4a60      	ldr	r2, [pc, #384]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f26:	f043 0304 	orr.w	r3, r3, #4
 8007f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8007f2c:	4b5e      	ldr	r3, [pc, #376]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f30:	4a5d      	ldr	r2, [pc, #372]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	6713      	str	r3, [r2, #112]	; 0x70
 8007f38:	e00b      	b.n	8007f52 <HAL_RCC_OscConfig+0x376>
 8007f3a:	4b5b      	ldr	r3, [pc, #364]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f3e:	4a5a      	ldr	r2, [pc, #360]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f40:	f023 0301 	bic.w	r3, r3, #1
 8007f44:	6713      	str	r3, [r2, #112]	; 0x70
 8007f46:	4b58      	ldr	r3, [pc, #352]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4a:	4a57      	ldr	r2, [pc, #348]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f4c:	f023 0304 	bic.w	r3, r3, #4
 8007f50:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d015      	beq.n	8007f86 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f5a:	f7fc fd95 	bl	8004a88 <HAL_GetTick>
 8007f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f60:	e00a      	b.n	8007f78 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f62:	f7fc fd91 	bl	8004a88 <HAL_GetTick>
 8007f66:	4602      	mov	r2, r0
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d901      	bls.n	8007f78 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007f74:	2303      	movs	r3, #3
 8007f76:	e0ce      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f78:	4b4b      	ldr	r3, [pc, #300]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d0ee      	beq.n	8007f62 <HAL_RCC_OscConfig+0x386>
 8007f84:	e014      	b.n	8007fb0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f86:	f7fc fd7f 	bl	8004a88 <HAL_GetTick>
 8007f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007f8c:	e00a      	b.n	8007fa4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f8e:	f7fc fd7b 	bl	8004a88 <HAL_GetTick>
 8007f92:	4602      	mov	r2, r0
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	1ad3      	subs	r3, r2, r3
 8007f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d901      	bls.n	8007fa4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007fa0:	2303      	movs	r3, #3
 8007fa2:	e0b8      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007fa4:	4b40      	ldr	r3, [pc, #256]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d1ee      	bne.n	8007f8e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fb0:	7dfb      	ldrb	r3, [r7, #23]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fb6:	4b3c      	ldr	r3, [pc, #240]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fba:	4a3b      	ldr	r2, [pc, #236]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fc0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	f000 80a4 	beq.w	8008114 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fcc:	4b36      	ldr	r3, [pc, #216]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	f003 030c 	and.w	r3, r3, #12
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d06b      	beq.n	80080b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	699b      	ldr	r3, [r3, #24]
 8007fdc:	2b02      	cmp	r3, #2
 8007fde:	d149      	bne.n	8008074 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fe0:	4b31      	ldr	r3, [pc, #196]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a30      	ldr	r2, [pc, #192]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8007fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fec:	f7fc fd4c 	bl	8004a88 <HAL_GetTick>
 8007ff0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff4:	f7fc fd48 	bl	8004a88 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e087      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008006:	4b28      	ldr	r3, [pc, #160]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1f0      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	019b      	lsls	r3, r3, #6
 8008022:	431a      	orrs	r2, r3
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008028:	085b      	lsrs	r3, r3, #1
 800802a:	3b01      	subs	r3, #1
 800802c:	041b      	lsls	r3, r3, #16
 800802e:	431a      	orrs	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	061b      	lsls	r3, r3, #24
 8008036:	4313      	orrs	r3, r2
 8008038:	4a1b      	ldr	r2, [pc, #108]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 800803a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800803e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008040:	4b19      	ldr	r3, [pc, #100]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a18      	ldr	r2, [pc, #96]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800804a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800804c:	f7fc fd1c 	bl	8004a88 <HAL_GetTick>
 8008050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008054:	f7fc fd18 	bl	8004a88 <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b02      	cmp	r3, #2
 8008060:	d901      	bls.n	8008066 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e057      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008066:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0f0      	beq.n	8008054 <HAL_RCC_OscConfig+0x478>
 8008072:	e04f      	b.n	8008114 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008074:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a0b      	ldr	r2, [pc, #44]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 800807a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800807e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008080:	f7fc fd02 	bl	8004a88 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008088:	f7fc fcfe 	bl	8004a88 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b02      	cmp	r3, #2
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e03d      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800809a:	4b03      	ldr	r3, [pc, #12]	; (80080a8 <HAL_RCC_OscConfig+0x4cc>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f0      	bne.n	8008088 <HAL_RCC_OscConfig+0x4ac>
 80080a6:	e035      	b.n	8008114 <HAL_RCC_OscConfig+0x538>
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80080b0:	4b1b      	ldr	r3, [pc, #108]	; (8008120 <HAL_RCC_OscConfig+0x544>)
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d028      	beq.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d121      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d11a      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80080e0:	4013      	ands	r3, r2
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80080e8:	4293      	cmp	r3, r2
 80080ea:	d111      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	3b01      	subs	r3, #1
 80080fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d107      	bne.n	8008110 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800810c:	429a      	cmp	r2, r3
 800810e:	d001      	beq.n	8008114 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e000      	b.n	8008116 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3718      	adds	r7, #24
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	40023800 	.word	0x40023800

08008124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800812e:	2300      	movs	r3, #0
 8008130:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d101      	bne.n	800813c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	e0d0      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800813c:	4b6a      	ldr	r3, [pc, #424]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	f003 030f 	and.w	r3, r3, #15
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	429a      	cmp	r2, r3
 8008148:	d910      	bls.n	800816c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800814a:	4b67      	ldr	r3, [pc, #412]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f023 020f 	bic.w	r2, r3, #15
 8008152:	4965      	ldr	r1, [pc, #404]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	4313      	orrs	r3, r2
 8008158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800815a:	4b63      	ldr	r3, [pc, #396]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d001      	beq.n	800816c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e0b8      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0302 	and.w	r3, r3, #2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d020      	beq.n	80081ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 0304 	and.w	r3, r3, #4
 8008180:	2b00      	cmp	r3, #0
 8008182:	d005      	beq.n	8008190 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008184:	4b59      	ldr	r3, [pc, #356]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	4a58      	ldr	r2, [pc, #352]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 800818a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800818e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0308 	and.w	r3, r3, #8
 8008198:	2b00      	cmp	r3, #0
 800819a:	d005      	beq.n	80081a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800819c:	4b53      	ldr	r3, [pc, #332]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	4a52      	ldr	r2, [pc, #328]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80081a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80081a8:	4b50      	ldr	r3, [pc, #320]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	494d      	ldr	r1, [pc, #308]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f003 0301 	and.w	r3, r3, #1
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d040      	beq.n	8008248 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d107      	bne.n	80081de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80081ce:	4b47      	ldr	r3, [pc, #284]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d115      	bne.n	8008206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
 80081dc:	e07f      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d107      	bne.n	80081f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80081e6:	4b41      	ldr	r3, [pc, #260]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d109      	bne.n	8008206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e073      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081f6:	4b3d      	ldr	r3, [pc, #244]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0302 	and.w	r3, r3, #2
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e06b      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008206:	4b39      	ldr	r3, [pc, #228]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f023 0203 	bic.w	r2, r3, #3
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	4936      	ldr	r1, [pc, #216]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008214:	4313      	orrs	r3, r2
 8008216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008218:	f7fc fc36 	bl	8004a88 <HAL_GetTick>
 800821c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800821e:	e00a      	b.n	8008236 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008220:	f7fc fc32 	bl	8004a88 <HAL_GetTick>
 8008224:	4602      	mov	r2, r0
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	1ad3      	subs	r3, r2, r3
 800822a:	f241 3288 	movw	r2, #5000	; 0x1388
 800822e:	4293      	cmp	r3, r2
 8008230:	d901      	bls.n	8008236 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e053      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008236:	4b2d      	ldr	r3, [pc, #180]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	f003 020c 	and.w	r2, r3, #12
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	429a      	cmp	r2, r3
 8008246:	d1eb      	bne.n	8008220 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008248:	4b27      	ldr	r3, [pc, #156]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	683a      	ldr	r2, [r7, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d210      	bcs.n	8008278 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008256:	4b24      	ldr	r3, [pc, #144]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f023 020f 	bic.w	r2, r3, #15
 800825e:	4922      	ldr	r1, [pc, #136]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	4313      	orrs	r3, r2
 8008264:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008266:	4b20      	ldr	r3, [pc, #128]	; (80082e8 <HAL_RCC_ClockConfig+0x1c4>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 030f 	and.w	r3, r3, #15
 800826e:	683a      	ldr	r2, [r7, #0]
 8008270:	429a      	cmp	r2, r3
 8008272:	d001      	beq.n	8008278 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e032      	b.n	80082de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f003 0304 	and.w	r3, r3, #4
 8008280:	2b00      	cmp	r3, #0
 8008282:	d008      	beq.n	8008296 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008284:	4b19      	ldr	r3, [pc, #100]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	4916      	ldr	r1, [pc, #88]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 8008292:	4313      	orrs	r3, r2
 8008294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0308 	and.w	r3, r3, #8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d009      	beq.n	80082b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	490e      	ldr	r1, [pc, #56]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80082b6:	f000 f821 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b0b      	ldr	r3, [pc, #44]	; (80082ec <HAL_RCC_ClockConfig+0x1c8>)
 80082be:	689b      	ldr	r3, [r3, #8]
 80082c0:	091b      	lsrs	r3, r3, #4
 80082c2:	f003 030f 	and.w	r3, r3, #15
 80082c6:	490a      	ldr	r1, [pc, #40]	; (80082f0 <HAL_RCC_ClockConfig+0x1cc>)
 80082c8:	5ccb      	ldrb	r3, [r1, r3]
 80082ca:	fa22 f303 	lsr.w	r3, r2, r3
 80082ce:	4a09      	ldr	r2, [pc, #36]	; (80082f4 <HAL_RCC_ClockConfig+0x1d0>)
 80082d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80082d2:	4b09      	ldr	r3, [pc, #36]	; (80082f8 <HAL_RCC_ClockConfig+0x1d4>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fa fb4a 	bl	8002970 <HAL_InitTick>

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40023c00 	.word	0x40023c00
 80082ec:	40023800 	.word	0x40023800
 80082f0:	0800d18c 	.word	0x0800d18c
 80082f4:	20000000 	.word	0x20000000
 80082f8:	20000030 	.word	0x20000030

080082fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082fc:	b5b0      	push	{r4, r5, r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008302:	2100      	movs	r1, #0
 8008304:	6079      	str	r1, [r7, #4]
 8008306:	2100      	movs	r1, #0
 8008308:	60f9      	str	r1, [r7, #12]
 800830a:	2100      	movs	r1, #0
 800830c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800830e:	2100      	movs	r1, #0
 8008310:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008312:	4952      	ldr	r1, [pc, #328]	; (800845c <HAL_RCC_GetSysClockFreq+0x160>)
 8008314:	6889      	ldr	r1, [r1, #8]
 8008316:	f001 010c 	and.w	r1, r1, #12
 800831a:	2908      	cmp	r1, #8
 800831c:	d00d      	beq.n	800833a <HAL_RCC_GetSysClockFreq+0x3e>
 800831e:	2908      	cmp	r1, #8
 8008320:	f200 8094 	bhi.w	800844c <HAL_RCC_GetSysClockFreq+0x150>
 8008324:	2900      	cmp	r1, #0
 8008326:	d002      	beq.n	800832e <HAL_RCC_GetSysClockFreq+0x32>
 8008328:	2904      	cmp	r1, #4
 800832a:	d003      	beq.n	8008334 <HAL_RCC_GetSysClockFreq+0x38>
 800832c:	e08e      	b.n	800844c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800832e:	4b4c      	ldr	r3, [pc, #304]	; (8008460 <HAL_RCC_GetSysClockFreq+0x164>)
 8008330:	60bb      	str	r3, [r7, #8]
      break;
 8008332:	e08e      	b.n	8008452 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008334:	4b4b      	ldr	r3, [pc, #300]	; (8008464 <HAL_RCC_GetSysClockFreq+0x168>)
 8008336:	60bb      	str	r3, [r7, #8]
      break;
 8008338:	e08b      	b.n	8008452 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800833a:	4948      	ldr	r1, [pc, #288]	; (800845c <HAL_RCC_GetSysClockFreq+0x160>)
 800833c:	6849      	ldr	r1, [r1, #4]
 800833e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008342:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008344:	4945      	ldr	r1, [pc, #276]	; (800845c <HAL_RCC_GetSysClockFreq+0x160>)
 8008346:	6849      	ldr	r1, [r1, #4]
 8008348:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800834c:	2900      	cmp	r1, #0
 800834e:	d024      	beq.n	800839a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008350:	4942      	ldr	r1, [pc, #264]	; (800845c <HAL_RCC_GetSysClockFreq+0x160>)
 8008352:	6849      	ldr	r1, [r1, #4]
 8008354:	0989      	lsrs	r1, r1, #6
 8008356:	4608      	mov	r0, r1
 8008358:	f04f 0100 	mov.w	r1, #0
 800835c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008360:	f04f 0500 	mov.w	r5, #0
 8008364:	ea00 0204 	and.w	r2, r0, r4
 8008368:	ea01 0305 	and.w	r3, r1, r5
 800836c:	493d      	ldr	r1, [pc, #244]	; (8008464 <HAL_RCC_GetSysClockFreq+0x168>)
 800836e:	fb01 f003 	mul.w	r0, r1, r3
 8008372:	2100      	movs	r1, #0
 8008374:	fb01 f102 	mul.w	r1, r1, r2
 8008378:	1844      	adds	r4, r0, r1
 800837a:	493a      	ldr	r1, [pc, #232]	; (8008464 <HAL_RCC_GetSysClockFreq+0x168>)
 800837c:	fba2 0101 	umull	r0, r1, r2, r1
 8008380:	1863      	adds	r3, r4, r1
 8008382:	4619      	mov	r1, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	461a      	mov	r2, r3
 8008388:	f04f 0300 	mov.w	r3, #0
 800838c:	f7f8 fc2c 	bl	8000be8 <__aeabi_uldivmod>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4613      	mov	r3, r2
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	e04a      	b.n	8008430 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800839a:	4b30      	ldr	r3, [pc, #192]	; (800845c <HAL_RCC_GetSysClockFreq+0x160>)
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	099b      	lsrs	r3, r3, #6
 80083a0:	461a      	mov	r2, r3
 80083a2:	f04f 0300 	mov.w	r3, #0
 80083a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80083aa:	f04f 0100 	mov.w	r1, #0
 80083ae:	ea02 0400 	and.w	r4, r2, r0
 80083b2:	ea03 0501 	and.w	r5, r3, r1
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f04f 0200 	mov.w	r2, #0
 80083be:	f04f 0300 	mov.w	r3, #0
 80083c2:	014b      	lsls	r3, r1, #5
 80083c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80083c8:	0142      	lsls	r2, r0, #5
 80083ca:	4610      	mov	r0, r2
 80083cc:	4619      	mov	r1, r3
 80083ce:	1b00      	subs	r0, r0, r4
 80083d0:	eb61 0105 	sbc.w	r1, r1, r5
 80083d4:	f04f 0200 	mov.w	r2, #0
 80083d8:	f04f 0300 	mov.w	r3, #0
 80083dc:	018b      	lsls	r3, r1, #6
 80083de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80083e2:	0182      	lsls	r2, r0, #6
 80083e4:	1a12      	subs	r2, r2, r0
 80083e6:	eb63 0301 	sbc.w	r3, r3, r1
 80083ea:	f04f 0000 	mov.w	r0, #0
 80083ee:	f04f 0100 	mov.w	r1, #0
 80083f2:	00d9      	lsls	r1, r3, #3
 80083f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083f8:	00d0      	lsls	r0, r2, #3
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	1912      	adds	r2, r2, r4
 8008400:	eb45 0303 	adc.w	r3, r5, r3
 8008404:	f04f 0000 	mov.w	r0, #0
 8008408:	f04f 0100 	mov.w	r1, #0
 800840c:	0299      	lsls	r1, r3, #10
 800840e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008412:	0290      	lsls	r0, r2, #10
 8008414:	4602      	mov	r2, r0
 8008416:	460b      	mov	r3, r1
 8008418:	4610      	mov	r0, r2
 800841a:	4619      	mov	r1, r3
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	461a      	mov	r2, r3
 8008420:	f04f 0300 	mov.w	r3, #0
 8008424:	f7f8 fbe0 	bl	8000be8 <__aeabi_uldivmod>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4613      	mov	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008430:	4b0a      	ldr	r3, [pc, #40]	; (800845c <HAL_RCC_GetSysClockFreq+0x160>)
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	0c1b      	lsrs	r3, r3, #16
 8008436:	f003 0303 	and.w	r3, r3, #3
 800843a:	3301      	adds	r3, #1
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	fbb2 f3f3 	udiv	r3, r2, r3
 8008448:	60bb      	str	r3, [r7, #8]
      break;
 800844a:	e002      	b.n	8008452 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800844c:	4b04      	ldr	r3, [pc, #16]	; (8008460 <HAL_RCC_GetSysClockFreq+0x164>)
 800844e:	60bb      	str	r3, [r7, #8]
      break;
 8008450:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008452:	68bb      	ldr	r3, [r7, #8]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3710      	adds	r7, #16
 8008458:	46bd      	mov	sp, r7
 800845a:	bdb0      	pop	{r4, r5, r7, pc}
 800845c:	40023800 	.word	0x40023800
 8008460:	00f42400 	.word	0x00f42400
 8008464:	017d7840 	.word	0x017d7840

08008468 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008468:	b480      	push	{r7}
 800846a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800846c:	4b03      	ldr	r3, [pc, #12]	; (800847c <HAL_RCC_GetHCLKFreq+0x14>)
 800846e:	681b      	ldr	r3, [r3, #0]
}
 8008470:	4618      	mov	r0, r3
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	20000000 	.word	0x20000000

08008480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008484:	f7ff fff0 	bl	8008468 <HAL_RCC_GetHCLKFreq>
 8008488:	4602      	mov	r2, r0
 800848a:	4b05      	ldr	r3, [pc, #20]	; (80084a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	0a9b      	lsrs	r3, r3, #10
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	4903      	ldr	r1, [pc, #12]	; (80084a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008496:	5ccb      	ldrb	r3, [r1, r3]
 8008498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800849c:	4618      	mov	r0, r3
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	40023800 	.word	0x40023800
 80084a4:	0800d19c 	.word	0x0800d19c

080084a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80084ac:	f7ff ffdc 	bl	8008468 <HAL_RCC_GetHCLKFreq>
 80084b0:	4602      	mov	r2, r0
 80084b2:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	0b5b      	lsrs	r3, r3, #13
 80084b8:	f003 0307 	and.w	r3, r3, #7
 80084bc:	4903      	ldr	r1, [pc, #12]	; (80084cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80084be:	5ccb      	ldrb	r3, [r1, r3]
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	40023800 	.word	0x40023800
 80084cc:	0800d19c 	.word	0x0800d19c

080084d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	220f      	movs	r2, #15
 80084de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f003 0203 	and.w	r2, r3, #3
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80084ec:	4b0f      	ldr	r3, [pc, #60]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008504:	4b09      	ldr	r3, [pc, #36]	; (800852c <HAL_RCC_GetClockConfig+0x5c>)
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	08db      	lsrs	r3, r3, #3
 800850a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <HAL_RCC_GetClockConfig+0x60>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 020f 	and.w	r2, r3, #15
 800851a:	683b      	ldr	r3, [r7, #0]
 800851c:	601a      	str	r2, [r3, #0]
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	40023800 	.word	0x40023800
 8008530:	40023c00 	.word	0x40023c00

08008534 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b088      	sub	sp, #32
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008544:	2300      	movs	r3, #0
 8008546:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008548:	2300      	movs	r3, #0
 800854a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800854c:	2300      	movs	r3, #0
 800854e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0301 	and.w	r3, r3, #1
 8008558:	2b00      	cmp	r3, #0
 800855a:	d012      	beq.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800855c:	4b69      	ldr	r3, [pc, #420]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	4a68      	ldr	r2, [pc, #416]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008562:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008566:	6093      	str	r3, [r2, #8]
 8008568:	4b66      	ldr	r3, [pc, #408]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856a:	689a      	ldr	r2, [r3, #8]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008570:	4964      	ldr	r1, [pc, #400]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008572:	4313      	orrs	r3, r2
 8008574:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800857a:	2b00      	cmp	r3, #0
 800857c:	d101      	bne.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800857e:	2301      	movs	r3, #1
 8008580:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d017      	beq.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800858e:	4b5d      	ldr	r3, [pc, #372]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008594:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859c:	4959      	ldr	r1, [pc, #356]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ac:	d101      	bne.n	80085b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80085ae:	2301      	movs	r3, #1
 80085b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d101      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80085ba:	2301      	movs	r3, #1
 80085bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d017      	beq.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80085ca:	4b4e      	ldr	r3, [pc, #312]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d8:	494a      	ldr	r1, [pc, #296]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085e8:	d101      	bne.n	80085ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80085ea:	2301      	movs	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d101      	bne.n	80085fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80085f6:	2301      	movs	r3, #1
 80085f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008606:	2301      	movs	r3, #1
 8008608:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 0320 	and.w	r3, r3, #32
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 808b 	beq.w	800872e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008618:	4b3a      	ldr	r3, [pc, #232]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861c:	4a39      	ldr	r2, [pc, #228]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800861e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008622:	6413      	str	r3, [r2, #64]	; 0x40
 8008624:	4b37      	ldr	r3, [pc, #220]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800862c:	60bb      	str	r3, [r7, #8]
 800862e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008630:	4b35      	ldr	r3, [pc, #212]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a34      	ldr	r2, [pc, #208]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800863a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800863c:	f7fc fa24 	bl	8004a88 <HAL_GetTick>
 8008640:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008642:	e008      	b.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008644:	f7fc fa20 	bl	8004a88 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b64      	cmp	r3, #100	; 0x64
 8008650:	d901      	bls.n	8008656 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e357      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008656:	4b2c      	ldr	r3, [pc, #176]	; (8008708 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800865e:	2b00      	cmp	r3, #0
 8008660:	d0f0      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008662:	4b28      	ldr	r3, [pc, #160]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800866a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d035      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	429a      	cmp	r2, r3
 800867e:	d02e      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008680:	4b20      	ldr	r3, [pc, #128]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008688:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800868a:	4b1e      	ldr	r3, [pc, #120]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800868c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868e:	4a1d      	ldr	r2, [pc, #116]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008694:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008696:	4b1b      	ldr	r3, [pc, #108]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869a:	4a1a      	ldr	r2, [pc, #104]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800869c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80086a8:	4b16      	ldr	r3, [pc, #88]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b01      	cmp	r3, #1
 80086b2:	d114      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b4:	f7fc f9e8 	bl	8004a88 <HAL_GetTick>
 80086b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086ba:	e00a      	b.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80086bc:	f7fc f9e4 	bl	8004a88 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d901      	bls.n	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80086ce:	2303      	movs	r3, #3
 80086d0:	e319      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086d2:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d0ee      	beq.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80086ea:	d111      	bne.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80086f8:	4b04      	ldr	r3, [pc, #16]	; (800870c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80086fa:	400b      	ands	r3, r1
 80086fc:	4901      	ldr	r1, [pc, #4]	; (8008704 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	608b      	str	r3, [r1, #8]
 8008702:	e00b      	b.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008704:	40023800 	.word	0x40023800
 8008708:	40007000 	.word	0x40007000
 800870c:	0ffffcff 	.word	0x0ffffcff
 8008710:	4bb1      	ldr	r3, [pc, #708]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	4ab0      	ldr	r2, [pc, #704]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008716:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800871a:	6093      	str	r3, [r2, #8]
 800871c:	4bae      	ldr	r3, [pc, #696]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800871e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008728:	49ab      	ldr	r1, [pc, #684]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800872a:	4313      	orrs	r3, r2
 800872c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f003 0310 	and.w	r3, r3, #16
 8008736:	2b00      	cmp	r3, #0
 8008738:	d010      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800873a:	4ba7      	ldr	r3, [pc, #668]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800873c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008740:	4aa5      	ldr	r2, [pc, #660]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008746:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800874a:	4ba3      	ldr	r3, [pc, #652]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800874c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	49a0      	ldr	r1, [pc, #640]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008756:	4313      	orrs	r3, r2
 8008758:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008768:	4b9b      	ldr	r3, [pc, #620]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800876e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008776:	4998      	ldr	r1, [pc, #608]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d00a      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800878a:	4b93      	ldr	r3, [pc, #588]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008790:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008798:	498f      	ldr	r1, [pc, #572]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d00a      	beq.n	80087c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087ac:	4b8a      	ldr	r3, [pc, #552]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ba:	4987      	ldr	r1, [pc, #540]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00a      	beq.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087ce:	4b82      	ldr	r3, [pc, #520]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087dc:	497e      	ldr	r1, [pc, #504]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d00a      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80087f0:	4b79      	ldr	r3, [pc, #484]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80087f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087f6:	f023 0203 	bic.w	r2, r3, #3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fe:	4976      	ldr	r1, [pc, #472]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008800:	4313      	orrs	r3, r2
 8008802:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800880e:	2b00      	cmp	r3, #0
 8008810:	d00a      	beq.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008812:	4b71      	ldr	r3, [pc, #452]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008818:	f023 020c 	bic.w	r2, r3, #12
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008820:	496d      	ldr	r1, [pc, #436]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008830:	2b00      	cmp	r3, #0
 8008832:	d00a      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008834:	4b68      	ldr	r3, [pc, #416]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800883a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008842:	4965      	ldr	r1, [pc, #404]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008844:	4313      	orrs	r3, r2
 8008846:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00a      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008856:	4b60      	ldr	r3, [pc, #384]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800885c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008864:	495c      	ldr	r1, [pc, #368]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008866:	4313      	orrs	r3, r2
 8008868:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008874:	2b00      	cmp	r3, #0
 8008876:	d00a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008878:	4b57      	ldr	r3, [pc, #348]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800887a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800887e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008886:	4954      	ldr	r1, [pc, #336]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008888:	4313      	orrs	r3, r2
 800888a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008896:	2b00      	cmp	r3, #0
 8008898:	d00a      	beq.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800889a:	4b4f      	ldr	r3, [pc, #316]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800889c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a8:	494b      	ldr	r1, [pc, #300]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00a      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80088bc:	4b46      	ldr	r3, [pc, #280]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ca:	4943      	ldr	r1, [pc, #268]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088cc:	4313      	orrs	r3, r2
 80088ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d00a      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80088de:	4b3e      	ldr	r3, [pc, #248]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088ec:	493a      	ldr	r1, [pc, #232]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80088ee:	4313      	orrs	r3, r2
 80088f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d00a      	beq.n	8008916 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008900:	4b35      	ldr	r3, [pc, #212]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008906:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800890e:	4932      	ldr	r1, [pc, #200]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008910:	4313      	orrs	r3, r2
 8008912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800891e:	2b00      	cmp	r3, #0
 8008920:	d011      	beq.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008922:	4b2d      	ldr	r3, [pc, #180]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008928:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008930:	4929      	ldr	r1, [pc, #164]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008932:	4313      	orrs	r3, r2
 8008934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800893c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008940:	d101      	bne.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008942:	2301      	movs	r3, #1
 8008944:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 0308 	and.w	r3, r3, #8
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008952:	2301      	movs	r3, #1
 8008954:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d00a      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008962:	4b1d      	ldr	r3, [pc, #116]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008968:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008970:	4919      	ldr	r1, [pc, #100]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00b      	beq.n	800899c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008984:	4b14      	ldr	r3, [pc, #80]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800898a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008994:	4910      	ldr	r1, [pc, #64]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008996:	4313      	orrs	r3, r2
 8008998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d006      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 80d9 	beq.w	8008b62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80089b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80089ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089bc:	f7fc f864 	bl	8004a88 <HAL_GetTick>
 80089c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089c2:	e00b      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089c4:	f7fc f860 	bl	8004a88 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b64      	cmp	r3, #100	; 0x64
 80089d0:	d904      	bls.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e197      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089d6:	bf00      	nop
 80089d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80089dc:	4b6c      	ldr	r3, [pc, #432]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d1ed      	bne.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 0301 	and.w	r3, r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d021      	beq.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d11d      	bne.n	8008a38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80089fc:	4b64      	ldr	r3, [pc, #400]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a02:	0c1b      	lsrs	r3, r3, #16
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008a0a:	4b61      	ldr	r3, [pc, #388]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a10:	0e1b      	lsrs	r3, r3, #24
 8008a12:	f003 030f 	and.w	r3, r3, #15
 8008a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	019a      	lsls	r2, r3, #6
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	041b      	lsls	r3, r3, #16
 8008a22:	431a      	orrs	r2, r3
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	061b      	lsls	r3, r3, #24
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	689b      	ldr	r3, [r3, #8]
 8008a2e:	071b      	lsls	r3, r3, #28
 8008a30:	4957      	ldr	r1, [pc, #348]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a4c:	d00a      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d02e      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a62:	d129      	bne.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008a64:	4b4a      	ldr	r3, [pc, #296]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a6a:	0c1b      	lsrs	r3, r3, #16
 8008a6c:	f003 0303 	and.w	r3, r3, #3
 8008a70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008a72:	4b47      	ldr	r3, [pc, #284]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a78:	0f1b      	lsrs	r3, r3, #28
 8008a7a:	f003 0307 	and.w	r3, r3, #7
 8008a7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	019a      	lsls	r2, r3, #6
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	041b      	lsls	r3, r3, #16
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	061b      	lsls	r3, r3, #24
 8008a92:	431a      	orrs	r2, r3
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	071b      	lsls	r3, r3, #28
 8008a98:	493d      	ldr	r1, [pc, #244]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008aa0:	4b3b      	ldr	r3, [pc, #236]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008aa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008aa6:	f023 021f 	bic.w	r2, r3, #31
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	4937      	ldr	r1, [pc, #220]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d01d      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008ac4:	4b32      	ldr	r3, [pc, #200]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ac6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008aca:	0e1b      	lsrs	r3, r3, #24
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008ad2:	4b2f      	ldr	r3, [pc, #188]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad8:	0f1b      	lsrs	r3, r3, #28
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	019a      	lsls	r2, r3, #6
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	431a      	orrs	r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	061b      	lsls	r3, r3, #24
 8008af2:	431a      	orrs	r2, r3
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	071b      	lsls	r3, r3, #28
 8008af8:	4925      	ldr	r1, [pc, #148]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d011      	beq.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	019a      	lsls	r2, r3, #6
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	041b      	lsls	r3, r3, #16
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68db      	ldr	r3, [r3, #12]
 8008b1e:	061b      	lsls	r3, r3, #24
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	071b      	lsls	r3, r3, #28
 8008b28:	4919      	ldr	r1, [pc, #100]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008b30:	4b17      	ldr	r3, [pc, #92]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a16      	ldr	r2, [pc, #88]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b3c:	f7fb ffa4 	bl	8004a88 <HAL_GetTick>
 8008b40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b42:	e008      	b.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008b44:	f7fb ffa0 	bl	8004a88 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b64      	cmp	r3, #100	; 0x64
 8008b50:	d901      	bls.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e0d7      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008b56:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d0f0      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	f040 80cd 	bne.w	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008b6a:	4b09      	ldr	r3, [pc, #36]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a08      	ldr	r2, [pc, #32]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008b70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b76:	f7fb ff87 	bl	8004a88 <HAL_GetTick>
 8008b7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b7c:	e00a      	b.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b7e:	f7fb ff83 	bl	8004a88 <HAL_GetTick>
 8008b82:	4602      	mov	r2, r0
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	1ad3      	subs	r3, r2, r3
 8008b88:	2b64      	cmp	r3, #100	; 0x64
 8008b8a:	d903      	bls.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b8c:	2303      	movs	r3, #3
 8008b8e:	e0ba      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008b90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008b94:	4b5e      	ldr	r3, [pc, #376]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ba0:	d0ed      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d009      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d02e      	beq.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d12a      	bne.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008bca:	4b51      	ldr	r3, [pc, #324]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd0:	0c1b      	lsrs	r3, r3, #16
 8008bd2:	f003 0303 	and.w	r3, r3, #3
 8008bd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008bd8:	4b4d      	ldr	r3, [pc, #308]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bde:	0f1b      	lsrs	r3, r3, #28
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	695b      	ldr	r3, [r3, #20]
 8008bea:	019a      	lsls	r2, r3, #6
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	041b      	lsls	r3, r3, #16
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	699b      	ldr	r3, [r3, #24]
 8008bf6:	061b      	lsls	r3, r3, #24
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	071b      	lsls	r3, r3, #28
 8008bfe:	4944      	ldr	r1, [pc, #272]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c00:	4313      	orrs	r3, r2
 8008c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008c06:	4b42      	ldr	r3, [pc, #264]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	3b01      	subs	r3, #1
 8008c16:	021b      	lsls	r3, r3, #8
 8008c18:	493d      	ldr	r1, [pc, #244]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d022      	beq.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c34:	d11d      	bne.n	8008c72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c36:	4b36      	ldr	r3, [pc, #216]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c3c:	0e1b      	lsrs	r3, r3, #24
 8008c3e:	f003 030f 	and.w	r3, r3, #15
 8008c42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008c44:	4b32      	ldr	r3, [pc, #200]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4a:	0f1b      	lsrs	r3, r3, #28
 8008c4c:	f003 0307 	and.w	r3, r3, #7
 8008c50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	019a      	lsls	r2, r3, #6
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	041b      	lsls	r3, r3, #16
 8008c5e:	431a      	orrs	r2, r3
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	061b      	lsls	r3, r3, #24
 8008c64:	431a      	orrs	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	071b      	lsls	r3, r3, #28
 8008c6a:	4929      	ldr	r1, [pc, #164]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d028      	beq.n	8008cd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008c7e:	4b24      	ldr	r3, [pc, #144]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c84:	0e1b      	lsrs	r3, r3, #24
 8008c86:	f003 030f 	and.w	r3, r3, #15
 8008c8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008c8c:	4b20      	ldr	r3, [pc, #128]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c92:	0c1b      	lsrs	r3, r3, #16
 8008c94:	f003 0303 	and.w	r3, r3, #3
 8008c98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	695b      	ldr	r3, [r3, #20]
 8008c9e:	019a      	lsls	r2, r3, #6
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	041b      	lsls	r3, r3, #16
 8008ca4:	431a      	orrs	r2, r3
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	061b      	lsls	r3, r3, #24
 8008caa:	431a      	orrs	r2, r3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	69db      	ldr	r3, [r3, #28]
 8008cb0:	071b      	lsls	r3, r3, #28
 8008cb2:	4917      	ldr	r1, [pc, #92]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cb4:	4313      	orrs	r3, r2
 8008cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008cba:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc8:	4911      	ldr	r1, [pc, #68]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008cd0:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a0e      	ldr	r2, [pc, #56]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cdc:	f7fb fed4 	bl	8004a88 <HAL_GetTick>
 8008ce0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008ce2:	e008      	b.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008ce4:	f7fb fed0 	bl	8004a88 <HAL_GetTick>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	1ad3      	subs	r3, r2, r3
 8008cee:	2b64      	cmp	r3, #100	; 0x64
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e007      	b.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008cf6:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d02:	d1ef      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008d04:	2300      	movs	r3, #0
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
 8008d0e:	bf00      	nop
 8008d10:	40023800 	.word	0x40023800

08008d14 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d101      	bne.n	8008d28 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e025      	b.n	8008d74 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d106      	bne.n	8008d42 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7f9 fe0d 	bl	800295c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2202      	movs	r2, #2
 8008d46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f001 f921 	bl	8009f9c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	461a      	mov	r2, r3
 8008d64:	6839      	ldr	r1, [r7, #0]
 8008d66:	f001 f98b 	bl	800a080 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008d72:	2300      	movs	r3, #0
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3708      	adds	r7, #8
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b02      	cmp	r3, #2
 8008d92:	d101      	bne.n	8008d98 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008d94:	2302      	movs	r3, #2
 8008d96:	e018      	b.n	8008dca <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	68b9      	ldr	r1, [r7, #8]
 8008da8:	4618      	mov	r0, r3
 8008daa:	f001 f9e9 	bl	800a180 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b02      	cmp	r3, #2
 8008db4:	d104      	bne.n	8008dc0 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2205      	movs	r2, #5
 8008dba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008dbe:	e003      	b.n	8008dc8 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d101      	bne.n	8008dec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008de8:	2302      	movs	r3, #2
 8008dea:	e00e      	b.n	8008e0a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	6839      	ldr	r1, [r7, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f001 f9e4 	bl	800a1c8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b082      	sub	sp, #8
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d101      	bne.n	8008e24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e20:	2301      	movs	r3, #1
 8008e22:	e049      	b.n	8008eb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d106      	bne.n	8008e3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7f9 fb8b 	bl	8002554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2202      	movs	r2, #2
 8008e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	4619      	mov	r1, r3
 8008e50:	4610      	mov	r0, r2
 8008e52:	f000 fabb 	bl	80093cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2201      	movs	r2, #1
 8008e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2201      	movs	r2, #1
 8008e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2201      	movs	r2, #1
 8008e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3708      	adds	r7, #8
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d001      	beq.n	8008ed8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	e054      	b.n	8008f82 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68da      	ldr	r2, [r3, #12]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0201 	orr.w	r2, r2, #1
 8008eee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4a26      	ldr	r2, [pc, #152]	; (8008f90 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d022      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f02:	d01d      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	4a22      	ldr	r2, [pc, #136]	; (8008f94 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d018      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4a21      	ldr	r2, [pc, #132]	; (8008f98 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d013      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a1f      	ldr	r2, [pc, #124]	; (8008f9c <HAL_TIM_Base_Start_IT+0xdc>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d00e      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <HAL_TIM_Base_Start_IT+0xe0>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d009      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1c      	ldr	r2, [pc, #112]	; (8008fa4 <HAL_TIM_Base_Start_IT+0xe4>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d004      	beq.n	8008f40 <HAL_TIM_Base_Start_IT+0x80>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a1b      	ldr	r2, [pc, #108]	; (8008fa8 <HAL_TIM_Base_Start_IT+0xe8>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d115      	bne.n	8008f6c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	4b19      	ldr	r3, [pc, #100]	; (8008fac <HAL_TIM_Base_Start_IT+0xec>)
 8008f48:	4013      	ands	r3, r2
 8008f4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2b06      	cmp	r3, #6
 8008f50:	d015      	beq.n	8008f7e <HAL_TIM_Base_Start_IT+0xbe>
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f58:	d011      	beq.n	8008f7e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	681a      	ldr	r2, [r3, #0]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f042 0201 	orr.w	r2, r2, #1
 8008f68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f6a:	e008      	b.n	8008f7e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f042 0201 	orr.w	r2, r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
 8008f7c:	e000      	b.n	8008f80 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3714      	adds	r7, #20
 8008f86:	46bd      	mov	sp, r7
 8008f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8c:	4770      	bx	lr
 8008f8e:	bf00      	nop
 8008f90:	40010000 	.word	0x40010000
 8008f94:	40000400 	.word	0x40000400
 8008f98:	40000800 	.word	0x40000800
 8008f9c:	40000c00 	.word	0x40000c00
 8008fa0:	40010400 	.word	0x40010400
 8008fa4:	40014000 	.word	0x40014000
 8008fa8:	40001800 	.word	0x40001800
 8008fac:	00010007 	.word	0x00010007

08008fb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	f003 0302 	and.w	r3, r3, #2
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d122      	bne.n	800900c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	68db      	ldr	r3, [r3, #12]
 8008fcc:	f003 0302 	and.w	r3, r3, #2
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d11b      	bne.n	800900c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f06f 0202 	mvn.w	r2, #2
 8008fdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	f003 0303 	and.w	r3, r3, #3
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d003      	beq.n	8008ffa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 f9cc 	bl	8009390 <HAL_TIM_IC_CaptureCallback>
 8008ff8:	e005      	b.n	8009006 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f9be 	bl	800937c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f000 f9cf 	bl	80093a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2200      	movs	r2, #0
 800900a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	f003 0304 	and.w	r3, r3, #4
 8009016:	2b04      	cmp	r3, #4
 8009018:	d122      	bne.n	8009060 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	68db      	ldr	r3, [r3, #12]
 8009020:	f003 0304 	and.w	r3, r3, #4
 8009024:	2b04      	cmp	r3, #4
 8009026:	d11b      	bne.n	8009060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f06f 0204 	mvn.w	r2, #4
 8009030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2202      	movs	r2, #2
 8009036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	699b      	ldr	r3, [r3, #24]
 800903e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 f9a2 	bl	8009390 <HAL_TIM_IC_CaptureCallback>
 800904c:	e005      	b.n	800905a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f994 	bl	800937c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f000 f9a5 	bl	80093a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0308 	and.w	r3, r3, #8
 800906a:	2b08      	cmp	r3, #8
 800906c:	d122      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0308 	and.w	r3, r3, #8
 8009078:	2b08      	cmp	r3, #8
 800907a:	d11b      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0208 	mvn.w	r2, #8
 8009084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2204      	movs	r2, #4
 800908a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	69db      	ldr	r3, [r3, #28]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f978 	bl	8009390 <HAL_TIM_IC_CaptureCallback>
 80090a0:	e005      	b.n	80090ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 f96a 	bl	800937c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f97b 	bl	80093a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0310 	and.w	r3, r3, #16
 80090be:	2b10      	cmp	r3, #16
 80090c0:	d122      	bne.n	8009108 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0310 	and.w	r3, r3, #16
 80090cc:	2b10      	cmp	r3, #16
 80090ce:	d11b      	bne.n	8009108 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0210 	mvn.w	r2, #16
 80090d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2208      	movs	r2, #8
 80090de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f94e 	bl	8009390 <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 f940 	bl	800937c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f951 	bl	80093a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b01      	cmp	r3, #1
 8009114:	d10e      	bne.n	8009134 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0301 	and.w	r3, r3, #1
 8009120:	2b01      	cmp	r3, #1
 8009122:	d107      	bne.n	8009134 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0201 	mvn.w	r2, #1
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7f8 fffe 	bl	8002130 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	691b      	ldr	r3, [r3, #16]
 800913a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800913e:	2b80      	cmp	r3, #128	; 0x80
 8009140:	d10e      	bne.n	8009160 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800914c:	2b80      	cmp	r3, #128	; 0x80
 800914e:	d107      	bne.n	8009160 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fb08 	bl	8009770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800916a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800916e:	d10e      	bne.n	800918e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800917a:	2b80      	cmp	r3, #128	; 0x80
 800917c:	d107      	bne.n	800918e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fafb 	bl	8009784 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d10e      	bne.n	80091ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091a6:	2b40      	cmp	r3, #64	; 0x40
 80091a8:	d107      	bne.n	80091ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 f8ff 	bl	80093b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f003 0320 	and.w	r3, r3, #32
 80091c4:	2b20      	cmp	r3, #32
 80091c6:	d10e      	bne.n	80091e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f003 0320 	and.w	r3, r3, #32
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d107      	bne.n	80091e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f06f 0220 	mvn.w	r2, #32
 80091de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091e0:	6878      	ldr	r0, [r7, #4]
 80091e2:	f000 fabb 	bl	800975c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091e6:	bf00      	nop
 80091e8:	3708      	adds	r7, #8
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
	...

080091f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009200:	2b01      	cmp	r3, #1
 8009202:	d101      	bne.n	8009208 <HAL_TIM_ConfigClockSource+0x18>
 8009204:	2302      	movs	r3, #2
 8009206:	e0b3      	b.n	8009370 <HAL_TIM_ConfigClockSource+0x180>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2201      	movs	r2, #1
 800920c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2202      	movs	r2, #2
 8009214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689b      	ldr	r3, [r3, #8]
 800921e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4b55      	ldr	r3, [pc, #340]	; (8009378 <HAL_TIM_ConfigClockSource+0x188>)
 8009224:	4013      	ands	r3, r2
 8009226:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800922e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009240:	d03e      	beq.n	80092c0 <HAL_TIM_ConfigClockSource+0xd0>
 8009242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009246:	f200 8087 	bhi.w	8009358 <HAL_TIM_ConfigClockSource+0x168>
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924e:	f000 8085 	beq.w	800935c <HAL_TIM_ConfigClockSource+0x16c>
 8009252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009256:	d87f      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009258:	2b70      	cmp	r3, #112	; 0x70
 800925a:	d01a      	beq.n	8009292 <HAL_TIM_ConfigClockSource+0xa2>
 800925c:	2b70      	cmp	r3, #112	; 0x70
 800925e:	d87b      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009260:	2b60      	cmp	r3, #96	; 0x60
 8009262:	d050      	beq.n	8009306 <HAL_TIM_ConfigClockSource+0x116>
 8009264:	2b60      	cmp	r3, #96	; 0x60
 8009266:	d877      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009268:	2b50      	cmp	r3, #80	; 0x50
 800926a:	d03c      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0xf6>
 800926c:	2b50      	cmp	r3, #80	; 0x50
 800926e:	d873      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	d058      	beq.n	8009326 <HAL_TIM_ConfigClockSource+0x136>
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d86f      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009278:	2b30      	cmp	r3, #48	; 0x30
 800927a:	d064      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x156>
 800927c:	2b30      	cmp	r3, #48	; 0x30
 800927e:	d86b      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009280:	2b20      	cmp	r3, #32
 8009282:	d060      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x156>
 8009284:	2b20      	cmp	r3, #32
 8009286:	d867      	bhi.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
 8009288:	2b00      	cmp	r3, #0
 800928a:	d05c      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x156>
 800928c:	2b10      	cmp	r3, #16
 800928e:	d05a      	beq.n	8009346 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8009290:	e062      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6818      	ldr	r0, [r3, #0]
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	6899      	ldr	r1, [r3, #8]
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	685a      	ldr	r2, [r3, #4]
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f000 f9ad 	bl	8009600 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68fa      	ldr	r2, [r7, #12]
 80092bc:	609a      	str	r2, [r3, #8]
      break;
 80092be:	e04e      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6818      	ldr	r0, [r3, #0]
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	6899      	ldr	r1, [r3, #8]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f000 f996 	bl	8009600 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092e2:	609a      	str	r2, [r3, #8]
      break;
 80092e4:	e03b      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6859      	ldr	r1, [r3, #4]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f000 f90a 	bl	800950c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2150      	movs	r1, #80	; 0x50
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 f963 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009304:	e02b      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	6859      	ldr	r1, [r3, #4]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	461a      	mov	r2, r3
 8009314:	f000 f929 	bl	800956a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2160      	movs	r1, #96	; 0x60
 800931e:	4618      	mov	r0, r3
 8009320:	f000 f953 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009324:	e01b      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6818      	ldr	r0, [r3, #0]
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	6859      	ldr	r1, [r3, #4]
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	68db      	ldr	r3, [r3, #12]
 8009332:	461a      	mov	r2, r3
 8009334:	f000 f8ea 	bl	800950c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2140      	movs	r1, #64	; 0x40
 800933e:	4618      	mov	r0, r3
 8009340:	f000 f943 	bl	80095ca <TIM_ITRx_SetConfig>
      break;
 8009344:	e00b      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	4619      	mov	r1, r3
 8009350:	4610      	mov	r0, r2
 8009352:	f000 f93a 	bl	80095ca <TIM_ITRx_SetConfig>
        break;
 8009356:	e002      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009358:	bf00      	nop
 800935a:	e000      	b.n	800935e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800935c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3710      	adds	r7, #16
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}
 8009378:	fffeff88 	.word	0xfffeff88

0800937c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009384:	bf00      	nop
 8009386:	370c      	adds	r7, #12
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009390:	b480      	push	{r7}
 8009392:	b083      	sub	sp, #12
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009398:	bf00      	nop
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093ac:	bf00      	nop
 80093ae:	370c      	adds	r7, #12
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b083      	sub	sp, #12
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	4a40      	ldr	r2, [pc, #256]	; (80094e0 <TIM_Base_SetConfig+0x114>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d013      	beq.n	800940c <TIM_Base_SetConfig+0x40>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093ea:	d00f      	beq.n	800940c <TIM_Base_SetConfig+0x40>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	4a3d      	ldr	r2, [pc, #244]	; (80094e4 <TIM_Base_SetConfig+0x118>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d00b      	beq.n	800940c <TIM_Base_SetConfig+0x40>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a3c      	ldr	r2, [pc, #240]	; (80094e8 <TIM_Base_SetConfig+0x11c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d007      	beq.n	800940c <TIM_Base_SetConfig+0x40>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a3b      	ldr	r2, [pc, #236]	; (80094ec <TIM_Base_SetConfig+0x120>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d003      	beq.n	800940c <TIM_Base_SetConfig+0x40>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a3a      	ldr	r2, [pc, #232]	; (80094f0 <TIM_Base_SetConfig+0x124>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d108      	bne.n	800941e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009412:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	4313      	orrs	r3, r2
 800941c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	4a2f      	ldr	r2, [pc, #188]	; (80094e0 <TIM_Base_SetConfig+0x114>)
 8009422:	4293      	cmp	r3, r2
 8009424:	d02b      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800942c:	d027      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	4a2c      	ldr	r2, [pc, #176]	; (80094e4 <TIM_Base_SetConfig+0x118>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d023      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a2b      	ldr	r2, [pc, #172]	; (80094e8 <TIM_Base_SetConfig+0x11c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d01f      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a2a      	ldr	r2, [pc, #168]	; (80094ec <TIM_Base_SetConfig+0x120>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d01b      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a29      	ldr	r2, [pc, #164]	; (80094f0 <TIM_Base_SetConfig+0x124>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d017      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a28      	ldr	r2, [pc, #160]	; (80094f4 <TIM_Base_SetConfig+0x128>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d013      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a27      	ldr	r2, [pc, #156]	; (80094f8 <TIM_Base_SetConfig+0x12c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d00f      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	4a26      	ldr	r2, [pc, #152]	; (80094fc <TIM_Base_SetConfig+0x130>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d00b      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	4a25      	ldr	r2, [pc, #148]	; (8009500 <TIM_Base_SetConfig+0x134>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d007      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	4a24      	ldr	r2, [pc, #144]	; (8009504 <TIM_Base_SetConfig+0x138>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d003      	beq.n	800947e <TIM_Base_SetConfig+0xb2>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	4a23      	ldr	r2, [pc, #140]	; (8009508 <TIM_Base_SetConfig+0x13c>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d108      	bne.n	8009490 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009484:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	4313      	orrs	r3, r2
 800948e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	4313      	orrs	r3, r2
 800949c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	689a      	ldr	r2, [r3, #8]
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a0a      	ldr	r2, [pc, #40]	; (80094e0 <TIM_Base_SetConfig+0x114>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d003      	beq.n	80094c4 <TIM_Base_SetConfig+0xf8>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <TIM_Base_SetConfig+0x124>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d103      	bne.n	80094cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	615a      	str	r2, [r3, #20]
}
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	40010000 	.word	0x40010000
 80094e4:	40000400 	.word	0x40000400
 80094e8:	40000800 	.word	0x40000800
 80094ec:	40000c00 	.word	0x40000c00
 80094f0:	40010400 	.word	0x40010400
 80094f4:	40014000 	.word	0x40014000
 80094f8:	40014400 	.word	0x40014400
 80094fc:	40014800 	.word	0x40014800
 8009500:	40001800 	.word	0x40001800
 8009504:	40001c00 	.word	0x40001c00
 8009508:	40002000 	.word	0x40002000

0800950c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	60f8      	str	r0, [r7, #12]
 8009514:	60b9      	str	r1, [r7, #8]
 8009516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	6a1b      	ldr	r3, [r3, #32]
 8009522:	f023 0201 	bic.w	r2, r3, #1
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	693a      	ldr	r2, [r7, #16]
 800953e:	4313      	orrs	r3, r2
 8009540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	f023 030a 	bic.w	r3, r3, #10
 8009548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	4313      	orrs	r3, r2
 8009550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	697a      	ldr	r2, [r7, #20]
 800955c:	621a      	str	r2, [r3, #32]
}
 800955e:	bf00      	nop
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800956a:	b480      	push	{r7}
 800956c:	b087      	sub	sp, #28
 800956e:	af00      	add	r7, sp, #0
 8009570:	60f8      	str	r0, [r7, #12]
 8009572:	60b9      	str	r1, [r7, #8]
 8009574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a1b      	ldr	r3, [r3, #32]
 800957a:	f023 0210 	bic.w	r2, r3, #16
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6a1b      	ldr	r3, [r3, #32]
 800958c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	031b      	lsls	r3, r3, #12
 800959a:	697a      	ldr	r2, [r7, #20]
 800959c:	4313      	orrs	r3, r2
 800959e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	011b      	lsls	r3, r3, #4
 80095ac:	693a      	ldr	r2, [r7, #16]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	697a      	ldr	r2, [r7, #20]
 80095b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	693a      	ldr	r2, [r7, #16]
 80095bc:	621a      	str	r2, [r3, #32]
}
 80095be:	bf00      	nop
 80095c0:	371c      	adds	r7, #28
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095ca:	b480      	push	{r7}
 80095cc:	b085      	sub	sp, #20
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
 80095d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095e2:	683a      	ldr	r2, [r7, #0]
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	f043 0307 	orr.w	r3, r3, #7
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	609a      	str	r2, [r3, #8]
}
 80095f4:	bf00      	nop
 80095f6:	3714      	adds	r7, #20
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009600:	b480      	push	{r7}
 8009602:	b087      	sub	sp, #28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800961a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	021a      	lsls	r2, r3, #8
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	431a      	orrs	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	4313      	orrs	r3, r2
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	697a      	ldr	r2, [r7, #20]
 8009632:	609a      	str	r2, [r3, #8]
}
 8009634:	bf00      	nop
 8009636:	371c      	adds	r7, #28
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009640:	b480      	push	{r7}
 8009642:	b085      	sub	sp, #20
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009650:	2b01      	cmp	r3, #1
 8009652:	d101      	bne.n	8009658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009654:	2302      	movs	r3, #2
 8009656:	e06d      	b.n	8009734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2202      	movs	r2, #2
 8009664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a30      	ldr	r2, [pc, #192]	; (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a2f      	ldr	r2, [pc, #188]	; (8009744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d108      	bne.n	800969e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009692:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	4313      	orrs	r3, r2
 800969c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a20      	ldr	r2, [pc, #128]	; (8009740 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d022      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096ca:	d01d      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a1d      	ldr	r2, [pc, #116]	; (8009748 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d018      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a1c      	ldr	r2, [pc, #112]	; (800974c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d013      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a1a      	ldr	r2, [pc, #104]	; (8009750 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d00e      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a15      	ldr	r2, [pc, #84]	; (8009744 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d009      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a16      	ldr	r2, [pc, #88]	; (8009754 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d004      	beq.n	8009708 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a15      	ldr	r2, [pc, #84]	; (8009758 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d10c      	bne.n	8009722 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800970e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	4313      	orrs	r3, r2
 8009718:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	40010000 	.word	0x40010000
 8009744:	40010400 	.word	0x40010400
 8009748:	40000400 	.word	0x40000400
 800974c:	40000800 	.word	0x40000800
 8009750:	40000c00 	.word	0x40000c00
 8009754:	40014000 	.word	0x40014000
 8009758:	40001800 	.word	0x40001800

0800975c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009778:	bf00      	nop
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b082      	sub	sp, #8
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	e040      	b.n	800982c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d106      	bne.n	80097c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2200      	movs	r2, #0
 80097b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7f8 ffdc 	bl	8002778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2224      	movs	r2, #36	; 0x24
 80097c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 f82c 	bl	8009834 <UART_SetConfig>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d101      	bne.n	80097e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80097e2:	2301      	movs	r3, #1
 80097e4:	e022      	b.n	800982c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d002      	beq.n	80097f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fa82 	bl	8009cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	685a      	ldr	r2, [r3, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	689a      	ldr	r2, [r3, #8]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f042 0201 	orr.w	r2, r2, #1
 8009822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f000 fb09 	bl	8009e3c <UART_CheckIdleState>
 800982a:	4603      	mov	r3, r0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b088      	sub	sp, #32
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	689a      	ldr	r2, [r3, #8]
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	691b      	ldr	r3, [r3, #16]
 8009848:	431a      	orrs	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	431a      	orrs	r2, r3
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	4313      	orrs	r3, r2
 8009856:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4ba7      	ldr	r3, [pc, #668]	; (8009afc <UART_SetConfig+0x2c8>)
 8009860:	4013      	ands	r3, r2
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	6812      	ldr	r2, [r2, #0]
 8009866:	6979      	ldr	r1, [r7, #20]
 8009868:	430b      	orrs	r3, r1
 800986a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	685b      	ldr	r3, [r3, #4]
 8009872:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	68da      	ldr	r2, [r3, #12]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	430a      	orrs	r2, r1
 8009880:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	699b      	ldr	r3, [r3, #24]
 8009886:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a1b      	ldr	r3, [r3, #32]
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	697a      	ldr	r2, [r7, #20]
 80098a2:	430a      	orrs	r2, r1
 80098a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a95      	ldr	r2, [pc, #596]	; (8009b00 <UART_SetConfig+0x2cc>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d120      	bne.n	80098f2 <UART_SetConfig+0xbe>
 80098b0:	4b94      	ldr	r3, [pc, #592]	; (8009b04 <UART_SetConfig+0x2d0>)
 80098b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098b6:	f003 0303 	and.w	r3, r3, #3
 80098ba:	2b03      	cmp	r3, #3
 80098bc:	d816      	bhi.n	80098ec <UART_SetConfig+0xb8>
 80098be:	a201      	add	r2, pc, #4	; (adr r2, 80098c4 <UART_SetConfig+0x90>)
 80098c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098c4:	080098d5 	.word	0x080098d5
 80098c8:	080098e1 	.word	0x080098e1
 80098cc:	080098db 	.word	0x080098db
 80098d0:	080098e7 	.word	0x080098e7
 80098d4:	2301      	movs	r3, #1
 80098d6:	77fb      	strb	r3, [r7, #31]
 80098d8:	e14f      	b.n	8009b7a <UART_SetConfig+0x346>
 80098da:	2302      	movs	r3, #2
 80098dc:	77fb      	strb	r3, [r7, #31]
 80098de:	e14c      	b.n	8009b7a <UART_SetConfig+0x346>
 80098e0:	2304      	movs	r3, #4
 80098e2:	77fb      	strb	r3, [r7, #31]
 80098e4:	e149      	b.n	8009b7a <UART_SetConfig+0x346>
 80098e6:	2308      	movs	r3, #8
 80098e8:	77fb      	strb	r3, [r7, #31]
 80098ea:	e146      	b.n	8009b7a <UART_SetConfig+0x346>
 80098ec:	2310      	movs	r3, #16
 80098ee:	77fb      	strb	r3, [r7, #31]
 80098f0:	e143      	b.n	8009b7a <UART_SetConfig+0x346>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a84      	ldr	r2, [pc, #528]	; (8009b08 <UART_SetConfig+0x2d4>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d132      	bne.n	8009962 <UART_SetConfig+0x12e>
 80098fc:	4b81      	ldr	r3, [pc, #516]	; (8009b04 <UART_SetConfig+0x2d0>)
 80098fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009902:	f003 030c 	and.w	r3, r3, #12
 8009906:	2b0c      	cmp	r3, #12
 8009908:	d828      	bhi.n	800995c <UART_SetConfig+0x128>
 800990a:	a201      	add	r2, pc, #4	; (adr r2, 8009910 <UART_SetConfig+0xdc>)
 800990c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009910:	08009945 	.word	0x08009945
 8009914:	0800995d 	.word	0x0800995d
 8009918:	0800995d 	.word	0x0800995d
 800991c:	0800995d 	.word	0x0800995d
 8009920:	08009951 	.word	0x08009951
 8009924:	0800995d 	.word	0x0800995d
 8009928:	0800995d 	.word	0x0800995d
 800992c:	0800995d 	.word	0x0800995d
 8009930:	0800994b 	.word	0x0800994b
 8009934:	0800995d 	.word	0x0800995d
 8009938:	0800995d 	.word	0x0800995d
 800993c:	0800995d 	.word	0x0800995d
 8009940:	08009957 	.word	0x08009957
 8009944:	2300      	movs	r3, #0
 8009946:	77fb      	strb	r3, [r7, #31]
 8009948:	e117      	b.n	8009b7a <UART_SetConfig+0x346>
 800994a:	2302      	movs	r3, #2
 800994c:	77fb      	strb	r3, [r7, #31]
 800994e:	e114      	b.n	8009b7a <UART_SetConfig+0x346>
 8009950:	2304      	movs	r3, #4
 8009952:	77fb      	strb	r3, [r7, #31]
 8009954:	e111      	b.n	8009b7a <UART_SetConfig+0x346>
 8009956:	2308      	movs	r3, #8
 8009958:	77fb      	strb	r3, [r7, #31]
 800995a:	e10e      	b.n	8009b7a <UART_SetConfig+0x346>
 800995c:	2310      	movs	r3, #16
 800995e:	77fb      	strb	r3, [r7, #31]
 8009960:	e10b      	b.n	8009b7a <UART_SetConfig+0x346>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a69      	ldr	r2, [pc, #420]	; (8009b0c <UART_SetConfig+0x2d8>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d120      	bne.n	80099ae <UART_SetConfig+0x17a>
 800996c:	4b65      	ldr	r3, [pc, #404]	; (8009b04 <UART_SetConfig+0x2d0>)
 800996e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009972:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009976:	2b30      	cmp	r3, #48	; 0x30
 8009978:	d013      	beq.n	80099a2 <UART_SetConfig+0x16e>
 800997a:	2b30      	cmp	r3, #48	; 0x30
 800997c:	d814      	bhi.n	80099a8 <UART_SetConfig+0x174>
 800997e:	2b20      	cmp	r3, #32
 8009980:	d009      	beq.n	8009996 <UART_SetConfig+0x162>
 8009982:	2b20      	cmp	r3, #32
 8009984:	d810      	bhi.n	80099a8 <UART_SetConfig+0x174>
 8009986:	2b00      	cmp	r3, #0
 8009988:	d002      	beq.n	8009990 <UART_SetConfig+0x15c>
 800998a:	2b10      	cmp	r3, #16
 800998c:	d006      	beq.n	800999c <UART_SetConfig+0x168>
 800998e:	e00b      	b.n	80099a8 <UART_SetConfig+0x174>
 8009990:	2300      	movs	r3, #0
 8009992:	77fb      	strb	r3, [r7, #31]
 8009994:	e0f1      	b.n	8009b7a <UART_SetConfig+0x346>
 8009996:	2302      	movs	r3, #2
 8009998:	77fb      	strb	r3, [r7, #31]
 800999a:	e0ee      	b.n	8009b7a <UART_SetConfig+0x346>
 800999c:	2304      	movs	r3, #4
 800999e:	77fb      	strb	r3, [r7, #31]
 80099a0:	e0eb      	b.n	8009b7a <UART_SetConfig+0x346>
 80099a2:	2308      	movs	r3, #8
 80099a4:	77fb      	strb	r3, [r7, #31]
 80099a6:	e0e8      	b.n	8009b7a <UART_SetConfig+0x346>
 80099a8:	2310      	movs	r3, #16
 80099aa:	77fb      	strb	r3, [r7, #31]
 80099ac:	e0e5      	b.n	8009b7a <UART_SetConfig+0x346>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a57      	ldr	r2, [pc, #348]	; (8009b10 <UART_SetConfig+0x2dc>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d120      	bne.n	80099fa <UART_SetConfig+0x1c6>
 80099b8:	4b52      	ldr	r3, [pc, #328]	; (8009b04 <UART_SetConfig+0x2d0>)
 80099ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80099c2:	2bc0      	cmp	r3, #192	; 0xc0
 80099c4:	d013      	beq.n	80099ee <UART_SetConfig+0x1ba>
 80099c6:	2bc0      	cmp	r3, #192	; 0xc0
 80099c8:	d814      	bhi.n	80099f4 <UART_SetConfig+0x1c0>
 80099ca:	2b80      	cmp	r3, #128	; 0x80
 80099cc:	d009      	beq.n	80099e2 <UART_SetConfig+0x1ae>
 80099ce:	2b80      	cmp	r3, #128	; 0x80
 80099d0:	d810      	bhi.n	80099f4 <UART_SetConfig+0x1c0>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d002      	beq.n	80099dc <UART_SetConfig+0x1a8>
 80099d6:	2b40      	cmp	r3, #64	; 0x40
 80099d8:	d006      	beq.n	80099e8 <UART_SetConfig+0x1b4>
 80099da:	e00b      	b.n	80099f4 <UART_SetConfig+0x1c0>
 80099dc:	2300      	movs	r3, #0
 80099de:	77fb      	strb	r3, [r7, #31]
 80099e0:	e0cb      	b.n	8009b7a <UART_SetConfig+0x346>
 80099e2:	2302      	movs	r3, #2
 80099e4:	77fb      	strb	r3, [r7, #31]
 80099e6:	e0c8      	b.n	8009b7a <UART_SetConfig+0x346>
 80099e8:	2304      	movs	r3, #4
 80099ea:	77fb      	strb	r3, [r7, #31]
 80099ec:	e0c5      	b.n	8009b7a <UART_SetConfig+0x346>
 80099ee:	2308      	movs	r3, #8
 80099f0:	77fb      	strb	r3, [r7, #31]
 80099f2:	e0c2      	b.n	8009b7a <UART_SetConfig+0x346>
 80099f4:	2310      	movs	r3, #16
 80099f6:	77fb      	strb	r3, [r7, #31]
 80099f8:	e0bf      	b.n	8009b7a <UART_SetConfig+0x346>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a45      	ldr	r2, [pc, #276]	; (8009b14 <UART_SetConfig+0x2e0>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d125      	bne.n	8009a50 <UART_SetConfig+0x21c>
 8009a04:	4b3f      	ldr	r3, [pc, #252]	; (8009b04 <UART_SetConfig+0x2d0>)
 8009a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a12:	d017      	beq.n	8009a44 <UART_SetConfig+0x210>
 8009a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a18:	d817      	bhi.n	8009a4a <UART_SetConfig+0x216>
 8009a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a1e:	d00b      	beq.n	8009a38 <UART_SetConfig+0x204>
 8009a20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a24:	d811      	bhi.n	8009a4a <UART_SetConfig+0x216>
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d003      	beq.n	8009a32 <UART_SetConfig+0x1fe>
 8009a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a2e:	d006      	beq.n	8009a3e <UART_SetConfig+0x20a>
 8009a30:	e00b      	b.n	8009a4a <UART_SetConfig+0x216>
 8009a32:	2300      	movs	r3, #0
 8009a34:	77fb      	strb	r3, [r7, #31]
 8009a36:	e0a0      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	77fb      	strb	r3, [r7, #31]
 8009a3c:	e09d      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a3e:	2304      	movs	r3, #4
 8009a40:	77fb      	strb	r3, [r7, #31]
 8009a42:	e09a      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a44:	2308      	movs	r3, #8
 8009a46:	77fb      	strb	r3, [r7, #31]
 8009a48:	e097      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a4a:	2310      	movs	r3, #16
 8009a4c:	77fb      	strb	r3, [r7, #31]
 8009a4e:	e094      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a30      	ldr	r2, [pc, #192]	; (8009b18 <UART_SetConfig+0x2e4>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d125      	bne.n	8009aa6 <UART_SetConfig+0x272>
 8009a5a:	4b2a      	ldr	r3, [pc, #168]	; (8009b04 <UART_SetConfig+0x2d0>)
 8009a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a68:	d017      	beq.n	8009a9a <UART_SetConfig+0x266>
 8009a6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a6e:	d817      	bhi.n	8009aa0 <UART_SetConfig+0x26c>
 8009a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a74:	d00b      	beq.n	8009a8e <UART_SetConfig+0x25a>
 8009a76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a7a:	d811      	bhi.n	8009aa0 <UART_SetConfig+0x26c>
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d003      	beq.n	8009a88 <UART_SetConfig+0x254>
 8009a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a84:	d006      	beq.n	8009a94 <UART_SetConfig+0x260>
 8009a86:	e00b      	b.n	8009aa0 <UART_SetConfig+0x26c>
 8009a88:	2301      	movs	r3, #1
 8009a8a:	77fb      	strb	r3, [r7, #31]
 8009a8c:	e075      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a8e:	2302      	movs	r3, #2
 8009a90:	77fb      	strb	r3, [r7, #31]
 8009a92:	e072      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a94:	2304      	movs	r3, #4
 8009a96:	77fb      	strb	r3, [r7, #31]
 8009a98:	e06f      	b.n	8009b7a <UART_SetConfig+0x346>
 8009a9a:	2308      	movs	r3, #8
 8009a9c:	77fb      	strb	r3, [r7, #31]
 8009a9e:	e06c      	b.n	8009b7a <UART_SetConfig+0x346>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e069      	b.n	8009b7a <UART_SetConfig+0x346>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	4a1c      	ldr	r2, [pc, #112]	; (8009b1c <UART_SetConfig+0x2e8>)
 8009aac:	4293      	cmp	r3, r2
 8009aae:	d137      	bne.n	8009b20 <UART_SetConfig+0x2ec>
 8009ab0:	4b14      	ldr	r3, [pc, #80]	; (8009b04 <UART_SetConfig+0x2d0>)
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ab6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009aba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009abe:	d017      	beq.n	8009af0 <UART_SetConfig+0x2bc>
 8009ac0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ac4:	d817      	bhi.n	8009af6 <UART_SetConfig+0x2c2>
 8009ac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aca:	d00b      	beq.n	8009ae4 <UART_SetConfig+0x2b0>
 8009acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ad0:	d811      	bhi.n	8009af6 <UART_SetConfig+0x2c2>
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <UART_SetConfig+0x2aa>
 8009ad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ada:	d006      	beq.n	8009aea <UART_SetConfig+0x2b6>
 8009adc:	e00b      	b.n	8009af6 <UART_SetConfig+0x2c2>
 8009ade:	2300      	movs	r3, #0
 8009ae0:	77fb      	strb	r3, [r7, #31]
 8009ae2:	e04a      	b.n	8009b7a <UART_SetConfig+0x346>
 8009ae4:	2302      	movs	r3, #2
 8009ae6:	77fb      	strb	r3, [r7, #31]
 8009ae8:	e047      	b.n	8009b7a <UART_SetConfig+0x346>
 8009aea:	2304      	movs	r3, #4
 8009aec:	77fb      	strb	r3, [r7, #31]
 8009aee:	e044      	b.n	8009b7a <UART_SetConfig+0x346>
 8009af0:	2308      	movs	r3, #8
 8009af2:	77fb      	strb	r3, [r7, #31]
 8009af4:	e041      	b.n	8009b7a <UART_SetConfig+0x346>
 8009af6:	2310      	movs	r3, #16
 8009af8:	77fb      	strb	r3, [r7, #31]
 8009afa:	e03e      	b.n	8009b7a <UART_SetConfig+0x346>
 8009afc:	efff69f3 	.word	0xefff69f3
 8009b00:	40011000 	.word	0x40011000
 8009b04:	40023800 	.word	0x40023800
 8009b08:	40004400 	.word	0x40004400
 8009b0c:	40004800 	.word	0x40004800
 8009b10:	40004c00 	.word	0x40004c00
 8009b14:	40005000 	.word	0x40005000
 8009b18:	40011400 	.word	0x40011400
 8009b1c:	40007800 	.word	0x40007800
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a71      	ldr	r2, [pc, #452]	; (8009cec <UART_SetConfig+0x4b8>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d125      	bne.n	8009b76 <UART_SetConfig+0x342>
 8009b2a:	4b71      	ldr	r3, [pc, #452]	; (8009cf0 <UART_SetConfig+0x4bc>)
 8009b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009b34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b38:	d017      	beq.n	8009b6a <UART_SetConfig+0x336>
 8009b3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009b3e:	d817      	bhi.n	8009b70 <UART_SetConfig+0x33c>
 8009b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b44:	d00b      	beq.n	8009b5e <UART_SetConfig+0x32a>
 8009b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b4a:	d811      	bhi.n	8009b70 <UART_SetConfig+0x33c>
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d003      	beq.n	8009b58 <UART_SetConfig+0x324>
 8009b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b54:	d006      	beq.n	8009b64 <UART_SetConfig+0x330>
 8009b56:	e00b      	b.n	8009b70 <UART_SetConfig+0x33c>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	77fb      	strb	r3, [r7, #31]
 8009b5c:	e00d      	b.n	8009b7a <UART_SetConfig+0x346>
 8009b5e:	2302      	movs	r3, #2
 8009b60:	77fb      	strb	r3, [r7, #31]
 8009b62:	e00a      	b.n	8009b7a <UART_SetConfig+0x346>
 8009b64:	2304      	movs	r3, #4
 8009b66:	77fb      	strb	r3, [r7, #31]
 8009b68:	e007      	b.n	8009b7a <UART_SetConfig+0x346>
 8009b6a:	2308      	movs	r3, #8
 8009b6c:	77fb      	strb	r3, [r7, #31]
 8009b6e:	e004      	b.n	8009b7a <UART_SetConfig+0x346>
 8009b70:	2310      	movs	r3, #16
 8009b72:	77fb      	strb	r3, [r7, #31]
 8009b74:	e001      	b.n	8009b7a <UART_SetConfig+0x346>
 8009b76:	2310      	movs	r3, #16
 8009b78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	69db      	ldr	r3, [r3, #28]
 8009b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b82:	d15b      	bne.n	8009c3c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8009b84:	7ffb      	ldrb	r3, [r7, #31]
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d827      	bhi.n	8009bda <UART_SetConfig+0x3a6>
 8009b8a:	a201      	add	r2, pc, #4	; (adr r2, 8009b90 <UART_SetConfig+0x35c>)
 8009b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b90:	08009bb5 	.word	0x08009bb5
 8009b94:	08009bbd 	.word	0x08009bbd
 8009b98:	08009bc5 	.word	0x08009bc5
 8009b9c:	08009bdb 	.word	0x08009bdb
 8009ba0:	08009bcb 	.word	0x08009bcb
 8009ba4:	08009bdb 	.word	0x08009bdb
 8009ba8:	08009bdb 	.word	0x08009bdb
 8009bac:	08009bdb 	.word	0x08009bdb
 8009bb0:	08009bd3 	.word	0x08009bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb4:	f7fe fc64 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8009bb8:	61b8      	str	r0, [r7, #24]
        break;
 8009bba:	e013      	b.n	8009be4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bbc:	f7fe fc74 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 8009bc0:	61b8      	str	r0, [r7, #24]
        break;
 8009bc2:	e00f      	b.n	8009be4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc4:	4b4b      	ldr	r3, [pc, #300]	; (8009cf4 <UART_SetConfig+0x4c0>)
 8009bc6:	61bb      	str	r3, [r7, #24]
        break;
 8009bc8:	e00c      	b.n	8009be4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bca:	f7fe fb97 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 8009bce:	61b8      	str	r0, [r7, #24]
        break;
 8009bd0:	e008      	b.n	8009be4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bd6:	61bb      	str	r3, [r7, #24]
        break;
 8009bd8:	e004      	b.n	8009be4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	77bb      	strb	r3, [r7, #30]
        break;
 8009be2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009be4:	69bb      	ldr	r3, [r7, #24]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d074      	beq.n	8009cd4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009bea:	69bb      	ldr	r3, [r7, #24]
 8009bec:	005a      	lsls	r2, r3, #1
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	085b      	lsrs	r3, r3, #1
 8009bf4:	441a      	add	r2, r3
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	2b0f      	cmp	r3, #15
 8009c06:	d916      	bls.n	8009c36 <UART_SetConfig+0x402>
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c0e:	d212      	bcs.n	8009c36 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	f023 030f 	bic.w	r3, r3, #15
 8009c18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	085b      	lsrs	r3, r3, #1
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	f003 0307 	and.w	r3, r3, #7
 8009c24:	b29a      	uxth	r2, r3
 8009c26:	89fb      	ldrh	r3, [r7, #14]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	89fa      	ldrh	r2, [r7, #14]
 8009c32:	60da      	str	r2, [r3, #12]
 8009c34:	e04e      	b.n	8009cd4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	77bb      	strb	r3, [r7, #30]
 8009c3a:	e04b      	b.n	8009cd4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c3c:	7ffb      	ldrb	r3, [r7, #31]
 8009c3e:	2b08      	cmp	r3, #8
 8009c40:	d827      	bhi.n	8009c92 <UART_SetConfig+0x45e>
 8009c42:	a201      	add	r2, pc, #4	; (adr r2, 8009c48 <UART_SetConfig+0x414>)
 8009c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c48:	08009c6d 	.word	0x08009c6d
 8009c4c:	08009c75 	.word	0x08009c75
 8009c50:	08009c7d 	.word	0x08009c7d
 8009c54:	08009c93 	.word	0x08009c93
 8009c58:	08009c83 	.word	0x08009c83
 8009c5c:	08009c93 	.word	0x08009c93
 8009c60:	08009c93 	.word	0x08009c93
 8009c64:	08009c93 	.word	0x08009c93
 8009c68:	08009c8b 	.word	0x08009c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c6c:	f7fe fc08 	bl	8008480 <HAL_RCC_GetPCLK1Freq>
 8009c70:	61b8      	str	r0, [r7, #24]
        break;
 8009c72:	e013      	b.n	8009c9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009c74:	f7fe fc18 	bl	80084a8 <HAL_RCC_GetPCLK2Freq>
 8009c78:	61b8      	str	r0, [r7, #24]
        break;
 8009c7a:	e00f      	b.n	8009c9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c7c:	4b1d      	ldr	r3, [pc, #116]	; (8009cf4 <UART_SetConfig+0x4c0>)
 8009c7e:	61bb      	str	r3, [r7, #24]
        break;
 8009c80:	e00c      	b.n	8009c9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c82:	f7fe fb3b 	bl	80082fc <HAL_RCC_GetSysClockFreq>
 8009c86:	61b8      	str	r0, [r7, #24]
        break;
 8009c88:	e008      	b.n	8009c9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c8e:	61bb      	str	r3, [r7, #24]
        break;
 8009c90:	e004      	b.n	8009c9c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8009c92:	2300      	movs	r3, #0
 8009c94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	77bb      	strb	r3, [r7, #30]
        break;
 8009c9a:	bf00      	nop
    }

    if (pclk != 0U)
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d018      	beq.n	8009cd4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	085a      	lsrs	r2, r3, #1
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	441a      	add	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	2b0f      	cmp	r3, #15
 8009cbc:	d908      	bls.n	8009cd0 <UART_SetConfig+0x49c>
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009cc4:	d204      	bcs.n	8009cd0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	60da      	str	r2, [r3, #12]
 8009cce:	e001      	b.n	8009cd4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009ce0:	7fbb      	ldrb	r3, [r7, #30]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	40007c00 	.word	0x40007c00
 8009cf0:	40023800 	.word	0x40023800
 8009cf4:	00f42400 	.word	0x00f42400

08009cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d04:	f003 0301 	and.w	r3, r3, #1
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00a      	beq.n	8009d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d26:	f003 0302 	and.w	r3, r3, #2
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d00a      	beq.n	8009d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	430a      	orrs	r2, r1
 8009d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00a      	beq.n	8009d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d6a:	f003 0308 	and.w	r3, r3, #8
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00a      	beq.n	8009d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	430a      	orrs	r2, r1
 8009d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d8c:	f003 0310 	and.w	r3, r3, #16
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00a      	beq.n	8009daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	689b      	ldr	r3, [r3, #8]
 8009d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	430a      	orrs	r2, r1
 8009da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dae:	f003 0320 	and.w	r3, r3, #32
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d00a      	beq.n	8009dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d01a      	beq.n	8009e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	430a      	orrs	r2, r1
 8009dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009df6:	d10a      	bne.n	8009e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	430a      	orrs	r2, r1
 8009e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	430a      	orrs	r2, r1
 8009e2e:	605a      	str	r2, [r3, #4]
  }
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b086      	sub	sp, #24
 8009e40:	af02      	add	r7, sp, #8
 8009e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e4c:	f7fa fe1c 	bl	8004a88 <HAL_GetTick>
 8009e50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0308 	and.w	r3, r3, #8
 8009e5c:	2b08      	cmp	r3, #8
 8009e5e:	d10e      	bne.n	8009e7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f817 	bl	8009ea2 <UART_WaitOnFlagUntilTimeout>
 8009e74:	4603      	mov	r3, r0
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d001      	beq.n	8009e7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e7a:	2303      	movs	r3, #3
 8009e7c:	e00d      	b.n	8009e9a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2220      	movs	r2, #32
 8009e82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2220      	movs	r2, #32
 8009e88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	60f8      	str	r0, [r7, #12]
 8009eaa:	60b9      	str	r1, [r7, #8]
 8009eac:	603b      	str	r3, [r7, #0]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009eb2:	e05e      	b.n	8009f72 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d05a      	beq.n	8009f72 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ebc:	f7fa fde4 	bl	8004a88 <HAL_GetTick>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	1ad3      	subs	r3, r2, r3
 8009ec6:	69ba      	ldr	r2, [r7, #24]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d302      	bcc.n	8009ed2 <UART_WaitOnFlagUntilTimeout+0x30>
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d11b      	bne.n	8009f0a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	681a      	ldr	r2, [r3, #0]
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009ee0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	689a      	ldr	r2, [r3, #8]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f022 0201 	bic.w	r2, r2, #1
 8009ef0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2220      	movs	r2, #32
 8009ef6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2220      	movs	r2, #32
 8009efc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009f06:	2303      	movs	r3, #3
 8009f08:	e043      	b.n	8009f92 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d02c      	beq.n	8009f72 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	69db      	ldr	r3, [r3, #28]
 8009f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f26:	d124      	bne.n	8009f72 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f30:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009f40:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689a      	ldr	r2, [r3, #8]
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0201 	bic.w	r2, r2, #1
 8009f50:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2220      	movs	r2, #32
 8009f56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2220      	movs	r2, #32
 8009f5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	2220      	movs	r2, #32
 8009f62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009f6e:	2303      	movs	r3, #3
 8009f70:	e00f      	b.n	8009f92 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	69da      	ldr	r2, [r3, #28]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	68ba      	ldr	r2, [r7, #8]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	bf0c      	ite	eq
 8009f82:	2301      	moveq	r3, #1
 8009f84:	2300      	movne	r3, #0
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	461a      	mov	r2, r3
 8009f8a:	79fb      	ldrb	r3, [r7, #7]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d091      	beq.n	8009eb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f90:	2300      	movs	r3, #0
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	3710      	adds	r7, #16
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
	...

08009f9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b085      	sub	sp, #20
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
 8009fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 8009faa:	2300      	movs	r3, #0
 8009fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d027      	beq.n	800a006 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4b2f      	ldr	r3, [pc, #188]	; (800a07c <FMC_SDRAM_Init+0xe0>)
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009fcc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 8009fd2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 8009fd8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 8009fde:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 8009fe4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 8009fea:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 8009ff0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 8009ff6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68fa      	ldr	r2, [r7, #12]
 800a002:	601a      	str	r2, [r3, #0]
 800a004:	e032      	b.n	800a06c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a012:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a01c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a022:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	4313      	orrs	r3, r2
 800a028:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	685b      	ldr	r3, [r3, #4]
 800a02e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a030:	68ba      	ldr	r2, [r7, #8]
 800a032:	4b12      	ldr	r3, [pc, #72]	; (800a07c <FMC_SDRAM_Init+0xe0>)
 800a034:	4013      	ands	r3, r2
 800a036:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a040:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a046:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a04c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a052:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a058:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a05a:	68ba      	ldr	r2, [r7, #8]
 800a05c:	4313      	orrs	r3, r2
 800a05e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	68ba      	ldr	r2, [r7, #8]
 800a06a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	ffff8000 	.word	0xffff8000

0800a080 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a080:	b480      	push	{r7}
 800a082:	b087      	sub	sp, #28
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a090:	2300      	movs	r3, #0
 800a092:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2b01      	cmp	r3, #1
 800a098:	d02e      	beq.n	800a0f8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a0a6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a0b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a0c0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a0ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	3b01      	subs	r3, #1
 800a0d2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a0d4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	3b01      	subs	r3, #1
 800a0dc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a0de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	699b      	ldr	r3, [r3, #24]
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a0e8:	4313      	orrs	r3, r2
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	4313      	orrs	r3, r2
 800a0ee:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	697a      	ldr	r2, [r7, #20]
 800a0f4:	609a      	str	r2, [r3, #8]
 800a0f6:	e039      	b.n	800a16c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4b1e      	ldr	r3, [pc, #120]	; (800a17c <FMC_SDRAM_Timing_Init+0xfc>)
 800a102:	4013      	ands	r3, r2
 800a104:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	3b01      	subs	r3, #1
 800a10c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	695b      	ldr	r3, [r3, #20]
 800a112:	3b01      	subs	r3, #1
 800a114:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a116:	4313      	orrs	r3, r2
 800a118:	697a      	ldr	r2, [r7, #20]
 800a11a:	4313      	orrs	r3, r2
 800a11c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	68db      	ldr	r3, [r3, #12]
 800a122:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a12a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	3b01      	subs	r3, #1
 800a138:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a13a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	3b01      	subs	r3, #1
 800a142:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a144:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	691b      	ldr	r3, [r3, #16]
 800a14a:	3b01      	subs	r3, #1
 800a14c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a14e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	699b      	ldr	r3, [r3, #24]
 800a154:	3b01      	subs	r3, #1
 800a156:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a158:	4313      	orrs	r3, r2
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	4313      	orrs	r3, r2
 800a15e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	697a      	ldr	r2, [r7, #20]
 800a164:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	693a      	ldr	r2, [r7, #16]
 800a16a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800a16c:	2300      	movs	r3, #0
}
 800a16e:	4618      	mov	r0, r3
 800a170:	371c      	adds	r7, #28
 800a172:	46bd      	mov	sp, r7
 800a174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a178:	4770      	bx	lr
 800a17a:	bf00      	nop
 800a17c:	ff0f0fff 	.word	0xff0f0fff

0800a180 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800a180:	b480      	push	{r7}
 800a182:	b085      	sub	sp, #20
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	691a      	ldr	r2, [r3, #16]
 800a190:	4b0c      	ldr	r3, [pc, #48]	; (800a1c4 <FMC_SDRAM_SendCommand+0x44>)
 800a192:	4013      	ands	r3, r2
 800a194:	68ba      	ldr	r2, [r7, #8]
 800a196:	6811      	ldr	r1, [r2, #0]
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	6852      	ldr	r2, [r2, #4]
 800a19c:	4311      	orrs	r1, r2
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	6892      	ldr	r2, [r2, #8]
 800a1a2:	3a01      	subs	r2, #1
 800a1a4:	0152      	lsls	r2, r2, #5
 800a1a6:	4311      	orrs	r1, r2
 800a1a8:	68ba      	ldr	r2, [r7, #8]
 800a1aa:	68d2      	ldr	r2, [r2, #12]
 800a1ac:	0252      	lsls	r2, r2, #9
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	431a      	orrs	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3714      	adds	r7, #20
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c2:	4770      	bx	lr
 800a1c4:	ffc00000 	.word	0xffc00000

0800a1c8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b083      	sub	sp, #12
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
 800a1d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695a      	ldr	r2, [r3, #20]
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	005b      	lsls	r3, r3, #1
 800a1da:	431a      	orrs	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800a1e0:	2300      	movs	r3, #0
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	370c      	adds	r7, #12
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
	...

0800a1f0 <GENE_TogglePin>:
 *  Created on: 27 oct. 2021
 *      Author: Sami Asfary Ensea
 */
#include "stm32f7xx_hal.h"

void GENE_TogglePin(){
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
	int ODR = GPIOA->ODR;
 800a1f6:	4b0d      	ldr	r3, [pc, #52]	; (800a22c <GENE_TogglePin+0x3c>)
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	607b      	str	r3, [r7, #4]
	if(((ODR>>8)&1) == 1){
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d006      	beq.n	800a214 <GENE_TogglePin+0x24>
		GPIOA->ODR &= ~(0x1<<8);
 800a206:	4b09      	ldr	r3, [pc, #36]	; (800a22c <GENE_TogglePin+0x3c>)
 800a208:	695b      	ldr	r3, [r3, #20]
 800a20a:	4a08      	ldr	r2, [pc, #32]	; (800a22c <GENE_TogglePin+0x3c>)
 800a20c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a210:	6153      	str	r3, [r2, #20]
	}else{
		GPIOA->ODR |= (0x1<<8);
	}
}
 800a212:	e005      	b.n	800a220 <GENE_TogglePin+0x30>
		GPIOA->ODR |= (0x1<<8);
 800a214:	4b05      	ldr	r3, [pc, #20]	; (800a22c <GENE_TogglePin+0x3c>)
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	4a04      	ldr	r2, [pc, #16]	; (800a22c <GENE_TogglePin+0x3c>)
 800a21a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a21e:	6153      	str	r3, [r2, #20]
}
 800a220:	bf00      	nop
 800a222:	370c      	adds	r7, #12
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	40020000 	.word	0x40020000

0800a230 <GENE_SetFreqPin>:

void GENE_SetFreqPin(int f){
 800a230:	b480      	push	{r7}
 800a232:	b083      	sub	sp, #12
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
	f =(int) 10000/(2*f);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	005b      	lsls	r3, r3, #1
 800a23c:	f242 7210 	movw	r2, #10000	; 0x2710
 800a240:	fb92 f3f3 	sdiv	r3, r2, r3
 800a244:	607b      	str	r3, [r7, #4]
	TIM5->ARR = f;
 800a246:	4a06      	ldr	r2, [pc, #24]	; (800a260 <GENE_SetFreqPin+0x30>)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM5->CNT = 0;
 800a24c:	4b04      	ldr	r3, [pc, #16]	; (800a260 <GENE_SetFreqPin+0x30>)
 800a24e:	2200      	movs	r2, #0
 800a250:	625a      	str	r2, [r3, #36]	; 0x24
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40000c00 	.word	0x40000c00

0800a264 <newpoint>:
#include "stm32746g_discovery_lcd.h"

char str[80];
int oltTension = 0;

void newpoint(int Tension,int temps){
 800a264:	b580      	push	{r7, lr}
 800a266:	b084      	sub	sp, #16
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
	int value =  (Tension*110/4095);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	226e      	movs	r2, #110	; 0x6e
 800a272:	fb02 f303 	mul.w	r3, r2, r3
 800a276:	4a31      	ldr	r2, [pc, #196]	; (800a33c <newpoint+0xd8>)
 800a278:	fb82 1203 	smull	r1, r2, r2, r3
 800a27c:	441a      	add	r2, r3
 800a27e:	12d2      	asrs	r2, r2, #11
 800a280:	17db      	asrs	r3, r3, #31
 800a282:	1ad3      	subs	r3, r2, r3
 800a284:	60fb      	str	r3, [r7, #12]
	value = - value;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	425b      	negs	r3, r3
 800a28a:	60fb      	str	r3, [r7, #12]
	value += 241;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	33f1      	adds	r3, #241	; 0xf1
 800a290:	60fb      	str	r3, [r7, #12]
	Tension = value;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	607b      	str	r3, [r7, #4]
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800a296:	f04f 30ff 	mov.w	r0, #4294967295
 800a29a:	f7f9 fb2f 	bl	80038fc <BSP_LCD_SetTextColor>
	BSP_LCD_DrawVLine(temps, 90, 272);
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	b29b      	uxth	r3, r3
 800a2a2:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a2a6:	215a      	movs	r1, #90	; 0x5a
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f7f9 fcbb 	bl	8003c24 <BSP_LCD_DrawVLine>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800a2ae:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800a2b2:	f7f9 fb23 	bl	80038fc <BSP_LCD_SetTextColor>
	BSP_LCD_DrawVLine(temps+1, 89, 272);
 800a2b6:	683b      	ldr	r3, [r7, #0]
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	b29b      	uxth	r3, r3
 800a2be:	f44f 7288 	mov.w	r2, #272	; 0x110
 800a2c2:	2159      	movs	r1, #89	; 0x59
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	f7f9 fcad 	bl	8003c24 <BSP_LCD_DrawVLine>
	/*
	if(temps == 0){
		BSP_LCD_Clear(LCD_COLOR_WHITE);
	}*/
	if(Tension > oltTension){
 800a2ca:	4b1d      	ldr	r3, [pc, #116]	; (800a340 <newpoint+0xdc>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	687a      	ldr	r2, [r7, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	dd0f      	ble.n	800a2f4 <newpoint+0x90>
		BSP_LCD_DrawVLine(temps, oltTension, Tension-oltTension);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	b298      	uxth	r0, r3
 800a2d8:	4b19      	ldr	r3, [pc, #100]	; (800a340 <newpoint+0xdc>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	b299      	uxth	r1, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	4b17      	ldr	r3, [pc, #92]	; (800a340 <newpoint+0xdc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	1ad3      	subs	r3, r2, r3
 800a2ea:	b29b      	uxth	r3, r3
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f7f9 fc99 	bl	8003c24 <BSP_LCD_DrawVLine>
 800a2f2:	e01c      	b.n	800a32e <newpoint+0xca>
	}else if(Tension < oltTension){
 800a2f4:	4b12      	ldr	r3, [pc, #72]	; (800a340 <newpoint+0xdc>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	da0e      	bge.n	800a31c <newpoint+0xb8>
		BSP_LCD_DrawVLine(temps, Tension, oltTension-Tension);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	b298      	uxth	r0, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	b299      	uxth	r1, r3
 800a306:	4b0e      	ldr	r3, [pc, #56]	; (800a340 <newpoint+0xdc>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	b29a      	uxth	r2, r3
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	b29b      	uxth	r3, r3
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	b29b      	uxth	r3, r3
 800a314:	461a      	mov	r2, r3
 800a316:	f7f9 fc85 	bl	8003c24 <BSP_LCD_DrawVLine>
 800a31a:	e008      	b.n	800a32e <newpoint+0xca>
	}else{
		BSP_LCD_DrawPixel(temps, Tension, LCD_COLOR_BLACK);
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	b29b      	uxth	r3, r3
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	b291      	uxth	r1, r2
 800a324:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800a328:	4618      	mov	r0, r3
 800a32a:	f7f9 fcdd 	bl	8003ce8 <BSP_LCD_DrawPixel>
	}
	oltTension = Tension;
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <newpoint+0xdc>)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6013      	str	r3, [r2, #0]
}
 800a334:	bf00      	nop
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	80080081 	.word	0x80080081
 800a340:	20000434 	.word	0x20000434

0800a344 <LED_InitGreen>:
#include "stm32f746xx.h"
#include "LED.h"

int LED_NbTimes=0;

void LED_InitGreen(){
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
	int *pt = (int*) 0xE0042008;
 800a34a:	4b07      	ldr	r3, [pc, #28]	; (800a368 <LED_InitGreen+0x24>)
 800a34c:	607b      	str	r3, [r7, #4]
	    *pt |= (1<<4);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f043 0210 	orr.w	r2, r3, #16
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	601a      	str	r2, [r3, #0]
}
 800a35a:	bf00      	nop
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr
 800a366:	bf00      	nop
 800a368:	e0042008 	.word	0xe0042008

0800a36c <LED_DispGreen>:

void LED_DispGreen(int i){
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
	if(i==0){
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d106      	bne.n	800a388 <LED_DispGreen+0x1c>
		GPIOI->ODR &= 0xFFFFFFFD;
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <LED_DispGreen+0x34>)
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	4a08      	ldr	r2, [pc, #32]	; (800a3a0 <LED_DispGreen+0x34>)
 800a380:	f023 0302 	bic.w	r3, r3, #2
 800a384:	6153      	str	r3, [r2, #20]
	}else{
		GPIOI->ODR |= 0x2;
	}
}
 800a386:	e005      	b.n	800a394 <LED_DispGreen+0x28>
		GPIOI->ODR |= 0x2;
 800a388:	4b05      	ldr	r3, [pc, #20]	; (800a3a0 <LED_DispGreen+0x34>)
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	4a04      	ldr	r2, [pc, #16]	; (800a3a0 <LED_DispGreen+0x34>)
 800a38e:	f043 0302 	orr.w	r3, r3, #2
 800a392:	6153      	str	r3, [r2, #20]
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	40022000 	.word	0x40022000

0800a3a4 <LED_SetFreqGreen>:

void LED_SetFreqGreen(int f){
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]

	if(f != 0){
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d00b      	beq.n	800a3ca <LED_SetFreqGreen+0x26>
		TIM2->ARR = 10000/f;
 800a3b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	fb92 f2f3 	sdiv	r2, r2, r3
 800a3bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3c0:	62da      	str	r2, [r3, #44]	; 0x2c
		TIM2->CNT = 0;
 800a3c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	625a      	str	r2, [r3, #36]	; 0x24
	}


}
 800a3ca:	bf00      	nop
 800a3cc:	370c      	adds	r7, #12
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr
	...

0800a3d8 <__errno>:
 800a3d8:	4b01      	ldr	r3, [pc, #4]	; (800a3e0 <__errno+0x8>)
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	4770      	bx	lr
 800a3de:	bf00      	nop
 800a3e0:	20000040 	.word	0x20000040

0800a3e4 <__libc_init_array>:
 800a3e4:	b570      	push	{r4, r5, r6, lr}
 800a3e6:	4d0d      	ldr	r5, [pc, #52]	; (800a41c <__libc_init_array+0x38>)
 800a3e8:	4c0d      	ldr	r4, [pc, #52]	; (800a420 <__libc_init_array+0x3c>)
 800a3ea:	1b64      	subs	r4, r4, r5
 800a3ec:	10a4      	asrs	r4, r4, #2
 800a3ee:	2600      	movs	r6, #0
 800a3f0:	42a6      	cmp	r6, r4
 800a3f2:	d109      	bne.n	800a408 <__libc_init_array+0x24>
 800a3f4:	4d0b      	ldr	r5, [pc, #44]	; (800a424 <__libc_init_array+0x40>)
 800a3f6:	4c0c      	ldr	r4, [pc, #48]	; (800a428 <__libc_init_array+0x44>)
 800a3f8:	f002 feb4 	bl	800d164 <_init>
 800a3fc:	1b64      	subs	r4, r4, r5
 800a3fe:	10a4      	asrs	r4, r4, #2
 800a400:	2600      	movs	r6, #0
 800a402:	42a6      	cmp	r6, r4
 800a404:	d105      	bne.n	800a412 <__libc_init_array+0x2e>
 800a406:	bd70      	pop	{r4, r5, r6, pc}
 800a408:	f855 3b04 	ldr.w	r3, [r5], #4
 800a40c:	4798      	blx	r3
 800a40e:	3601      	adds	r6, #1
 800a410:	e7ee      	b.n	800a3f0 <__libc_init_array+0xc>
 800a412:	f855 3b04 	ldr.w	r3, [r5], #4
 800a416:	4798      	blx	r3
 800a418:	3601      	adds	r6, #1
 800a41a:	e7f2      	b.n	800a402 <__libc_init_array+0x1e>
 800a41c:	0800f04c 	.word	0x0800f04c
 800a420:	0800f04c 	.word	0x0800f04c
 800a424:	0800f04c 	.word	0x0800f04c
 800a428:	0800f050 	.word	0x0800f050

0800a42c <memset>:
 800a42c:	4402      	add	r2, r0
 800a42e:	4603      	mov	r3, r0
 800a430:	4293      	cmp	r3, r2
 800a432:	d100      	bne.n	800a436 <memset+0xa>
 800a434:	4770      	bx	lr
 800a436:	f803 1b01 	strb.w	r1, [r3], #1
 800a43a:	e7f9      	b.n	800a430 <memset+0x4>

0800a43c <__cvt>:
 800a43c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a440:	ec55 4b10 	vmov	r4, r5, d0
 800a444:	2d00      	cmp	r5, #0
 800a446:	460e      	mov	r6, r1
 800a448:	4619      	mov	r1, r3
 800a44a:	462b      	mov	r3, r5
 800a44c:	bfbb      	ittet	lt
 800a44e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a452:	461d      	movlt	r5, r3
 800a454:	2300      	movge	r3, #0
 800a456:	232d      	movlt	r3, #45	; 0x2d
 800a458:	700b      	strb	r3, [r1, #0]
 800a45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a45c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a460:	4691      	mov	r9, r2
 800a462:	f023 0820 	bic.w	r8, r3, #32
 800a466:	bfbc      	itt	lt
 800a468:	4622      	movlt	r2, r4
 800a46a:	4614      	movlt	r4, r2
 800a46c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a470:	d005      	beq.n	800a47e <__cvt+0x42>
 800a472:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a476:	d100      	bne.n	800a47a <__cvt+0x3e>
 800a478:	3601      	adds	r6, #1
 800a47a:	2102      	movs	r1, #2
 800a47c:	e000      	b.n	800a480 <__cvt+0x44>
 800a47e:	2103      	movs	r1, #3
 800a480:	ab03      	add	r3, sp, #12
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	ab02      	add	r3, sp, #8
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	ec45 4b10 	vmov	d0, r4, r5
 800a48c:	4653      	mov	r3, sl
 800a48e:	4632      	mov	r2, r6
 800a490:	f000 fcea 	bl	800ae68 <_dtoa_r>
 800a494:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a498:	4607      	mov	r7, r0
 800a49a:	d102      	bne.n	800a4a2 <__cvt+0x66>
 800a49c:	f019 0f01 	tst.w	r9, #1
 800a4a0:	d022      	beq.n	800a4e8 <__cvt+0xac>
 800a4a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a4a6:	eb07 0906 	add.w	r9, r7, r6
 800a4aa:	d110      	bne.n	800a4ce <__cvt+0x92>
 800a4ac:	783b      	ldrb	r3, [r7, #0]
 800a4ae:	2b30      	cmp	r3, #48	; 0x30
 800a4b0:	d10a      	bne.n	800a4c8 <__cvt+0x8c>
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	4620      	mov	r0, r4
 800a4b8:	4629      	mov	r1, r5
 800a4ba:	f7f6 fb25 	bl	8000b08 <__aeabi_dcmpeq>
 800a4be:	b918      	cbnz	r0, 800a4c8 <__cvt+0x8c>
 800a4c0:	f1c6 0601 	rsb	r6, r6, #1
 800a4c4:	f8ca 6000 	str.w	r6, [sl]
 800a4c8:	f8da 3000 	ldr.w	r3, [sl]
 800a4cc:	4499      	add	r9, r3
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	4620      	mov	r0, r4
 800a4d4:	4629      	mov	r1, r5
 800a4d6:	f7f6 fb17 	bl	8000b08 <__aeabi_dcmpeq>
 800a4da:	b108      	cbz	r0, 800a4e0 <__cvt+0xa4>
 800a4dc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a4e0:	2230      	movs	r2, #48	; 0x30
 800a4e2:	9b03      	ldr	r3, [sp, #12]
 800a4e4:	454b      	cmp	r3, r9
 800a4e6:	d307      	bcc.n	800a4f8 <__cvt+0xbc>
 800a4e8:	9b03      	ldr	r3, [sp, #12]
 800a4ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a4ec:	1bdb      	subs	r3, r3, r7
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	6013      	str	r3, [r2, #0]
 800a4f2:	b004      	add	sp, #16
 800a4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f8:	1c59      	adds	r1, r3, #1
 800a4fa:	9103      	str	r1, [sp, #12]
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	e7f0      	b.n	800a4e2 <__cvt+0xa6>

0800a500 <__exponent>:
 800a500:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a502:	4603      	mov	r3, r0
 800a504:	2900      	cmp	r1, #0
 800a506:	bfb8      	it	lt
 800a508:	4249      	neglt	r1, r1
 800a50a:	f803 2b02 	strb.w	r2, [r3], #2
 800a50e:	bfb4      	ite	lt
 800a510:	222d      	movlt	r2, #45	; 0x2d
 800a512:	222b      	movge	r2, #43	; 0x2b
 800a514:	2909      	cmp	r1, #9
 800a516:	7042      	strb	r2, [r0, #1]
 800a518:	dd2a      	ble.n	800a570 <__exponent+0x70>
 800a51a:	f10d 0407 	add.w	r4, sp, #7
 800a51e:	46a4      	mov	ip, r4
 800a520:	270a      	movs	r7, #10
 800a522:	46a6      	mov	lr, r4
 800a524:	460a      	mov	r2, r1
 800a526:	fb91 f6f7 	sdiv	r6, r1, r7
 800a52a:	fb07 1516 	mls	r5, r7, r6, r1
 800a52e:	3530      	adds	r5, #48	; 0x30
 800a530:	2a63      	cmp	r2, #99	; 0x63
 800a532:	f104 34ff 	add.w	r4, r4, #4294967295
 800a536:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a53a:	4631      	mov	r1, r6
 800a53c:	dcf1      	bgt.n	800a522 <__exponent+0x22>
 800a53e:	3130      	adds	r1, #48	; 0x30
 800a540:	f1ae 0502 	sub.w	r5, lr, #2
 800a544:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a548:	1c44      	adds	r4, r0, #1
 800a54a:	4629      	mov	r1, r5
 800a54c:	4561      	cmp	r1, ip
 800a54e:	d30a      	bcc.n	800a566 <__exponent+0x66>
 800a550:	f10d 0209 	add.w	r2, sp, #9
 800a554:	eba2 020e 	sub.w	r2, r2, lr
 800a558:	4565      	cmp	r5, ip
 800a55a:	bf88      	it	hi
 800a55c:	2200      	movhi	r2, #0
 800a55e:	4413      	add	r3, r2
 800a560:	1a18      	subs	r0, r3, r0
 800a562:	b003      	add	sp, #12
 800a564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a566:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a56a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a56e:	e7ed      	b.n	800a54c <__exponent+0x4c>
 800a570:	2330      	movs	r3, #48	; 0x30
 800a572:	3130      	adds	r1, #48	; 0x30
 800a574:	7083      	strb	r3, [r0, #2]
 800a576:	70c1      	strb	r1, [r0, #3]
 800a578:	1d03      	adds	r3, r0, #4
 800a57a:	e7f1      	b.n	800a560 <__exponent+0x60>

0800a57c <_printf_float>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	ed2d 8b02 	vpush	{d8}
 800a584:	b08d      	sub	sp, #52	; 0x34
 800a586:	460c      	mov	r4, r1
 800a588:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a58c:	4616      	mov	r6, r2
 800a58e:	461f      	mov	r7, r3
 800a590:	4605      	mov	r5, r0
 800a592:	f001 fa55 	bl	800ba40 <_localeconv_r>
 800a596:	f8d0 a000 	ldr.w	sl, [r0]
 800a59a:	4650      	mov	r0, sl
 800a59c:	f7f5 fe38 	bl	8000210 <strlen>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a4:	6823      	ldr	r3, [r4, #0]
 800a5a6:	9305      	str	r3, [sp, #20]
 800a5a8:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a5b0:	3307      	adds	r3, #7
 800a5b2:	f023 0307 	bic.w	r3, r3, #7
 800a5b6:	f103 0208 	add.w	r2, r3, #8
 800a5ba:	f8c8 2000 	str.w	r2, [r8]
 800a5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a5c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a5ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a5ce:	9307      	str	r3, [sp, #28]
 800a5d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800a5d4:	ee08 0a10 	vmov	s16, r0
 800a5d8:	4b9f      	ldr	r3, [pc, #636]	; (800a858 <_printf_float+0x2dc>)
 800a5da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5de:	f04f 32ff 	mov.w	r2, #4294967295
 800a5e2:	f7f6 fac3 	bl	8000b6c <__aeabi_dcmpun>
 800a5e6:	bb88      	cbnz	r0, 800a64c <_printf_float+0xd0>
 800a5e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a5ec:	4b9a      	ldr	r3, [pc, #616]	; (800a858 <_printf_float+0x2dc>)
 800a5ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a5f2:	f7f6 fa9d 	bl	8000b30 <__aeabi_dcmple>
 800a5f6:	bb48      	cbnz	r0, 800a64c <_printf_float+0xd0>
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	4649      	mov	r1, r9
 800a600:	f7f6 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 800a604:	b110      	cbz	r0, 800a60c <_printf_float+0x90>
 800a606:	232d      	movs	r3, #45	; 0x2d
 800a608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a60c:	4b93      	ldr	r3, [pc, #588]	; (800a85c <_printf_float+0x2e0>)
 800a60e:	4894      	ldr	r0, [pc, #592]	; (800a860 <_printf_float+0x2e4>)
 800a610:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a614:	bf94      	ite	ls
 800a616:	4698      	movls	r8, r3
 800a618:	4680      	movhi	r8, r0
 800a61a:	2303      	movs	r3, #3
 800a61c:	6123      	str	r3, [r4, #16]
 800a61e:	9b05      	ldr	r3, [sp, #20]
 800a620:	f023 0204 	bic.w	r2, r3, #4
 800a624:	6022      	str	r2, [r4, #0]
 800a626:	f04f 0900 	mov.w	r9, #0
 800a62a:	9700      	str	r7, [sp, #0]
 800a62c:	4633      	mov	r3, r6
 800a62e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a630:	4621      	mov	r1, r4
 800a632:	4628      	mov	r0, r5
 800a634:	f000 f9d8 	bl	800a9e8 <_printf_common>
 800a638:	3001      	adds	r0, #1
 800a63a:	f040 8090 	bne.w	800a75e <_printf_float+0x1e2>
 800a63e:	f04f 30ff 	mov.w	r0, #4294967295
 800a642:	b00d      	add	sp, #52	; 0x34
 800a644:	ecbd 8b02 	vpop	{d8}
 800a648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a64c:	4642      	mov	r2, r8
 800a64e:	464b      	mov	r3, r9
 800a650:	4640      	mov	r0, r8
 800a652:	4649      	mov	r1, r9
 800a654:	f7f6 fa8a 	bl	8000b6c <__aeabi_dcmpun>
 800a658:	b140      	cbz	r0, 800a66c <_printf_float+0xf0>
 800a65a:	464b      	mov	r3, r9
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	bfbc      	itt	lt
 800a660:	232d      	movlt	r3, #45	; 0x2d
 800a662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a666:	487f      	ldr	r0, [pc, #508]	; (800a864 <_printf_float+0x2e8>)
 800a668:	4b7f      	ldr	r3, [pc, #508]	; (800a868 <_printf_float+0x2ec>)
 800a66a:	e7d1      	b.n	800a610 <_printf_float+0x94>
 800a66c:	6863      	ldr	r3, [r4, #4]
 800a66e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a672:	9206      	str	r2, [sp, #24]
 800a674:	1c5a      	adds	r2, r3, #1
 800a676:	d13f      	bne.n	800a6f8 <_printf_float+0x17c>
 800a678:	2306      	movs	r3, #6
 800a67a:	6063      	str	r3, [r4, #4]
 800a67c:	9b05      	ldr	r3, [sp, #20]
 800a67e:	6861      	ldr	r1, [r4, #4]
 800a680:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a684:	2300      	movs	r3, #0
 800a686:	9303      	str	r3, [sp, #12]
 800a688:	ab0a      	add	r3, sp, #40	; 0x28
 800a68a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a68e:	ab09      	add	r3, sp, #36	; 0x24
 800a690:	ec49 8b10 	vmov	d0, r8, r9
 800a694:	9300      	str	r3, [sp, #0]
 800a696:	6022      	str	r2, [r4, #0]
 800a698:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a69c:	4628      	mov	r0, r5
 800a69e:	f7ff fecd 	bl	800a43c <__cvt>
 800a6a2:	9b06      	ldr	r3, [sp, #24]
 800a6a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6a6:	2b47      	cmp	r3, #71	; 0x47
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	d108      	bne.n	800a6be <_printf_float+0x142>
 800a6ac:	1cc8      	adds	r0, r1, #3
 800a6ae:	db02      	blt.n	800a6b6 <_printf_float+0x13a>
 800a6b0:	6863      	ldr	r3, [r4, #4]
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	dd41      	ble.n	800a73a <_printf_float+0x1be>
 800a6b6:	f1ab 0b02 	sub.w	fp, fp, #2
 800a6ba:	fa5f fb8b 	uxtb.w	fp, fp
 800a6be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6c2:	d820      	bhi.n	800a706 <_printf_float+0x18a>
 800a6c4:	3901      	subs	r1, #1
 800a6c6:	465a      	mov	r2, fp
 800a6c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a6cc:	9109      	str	r1, [sp, #36]	; 0x24
 800a6ce:	f7ff ff17 	bl	800a500 <__exponent>
 800a6d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6d4:	1813      	adds	r3, r2, r0
 800a6d6:	2a01      	cmp	r2, #1
 800a6d8:	4681      	mov	r9, r0
 800a6da:	6123      	str	r3, [r4, #16]
 800a6dc:	dc02      	bgt.n	800a6e4 <_printf_float+0x168>
 800a6de:	6822      	ldr	r2, [r4, #0]
 800a6e0:	07d2      	lsls	r2, r2, #31
 800a6e2:	d501      	bpl.n	800a6e8 <_printf_float+0x16c>
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d09c      	beq.n	800a62a <_printf_float+0xae>
 800a6f0:	232d      	movs	r3, #45	; 0x2d
 800a6f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6f6:	e798      	b.n	800a62a <_printf_float+0xae>
 800a6f8:	9a06      	ldr	r2, [sp, #24]
 800a6fa:	2a47      	cmp	r2, #71	; 0x47
 800a6fc:	d1be      	bne.n	800a67c <_printf_float+0x100>
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d1bc      	bne.n	800a67c <_printf_float+0x100>
 800a702:	2301      	movs	r3, #1
 800a704:	e7b9      	b.n	800a67a <_printf_float+0xfe>
 800a706:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a70a:	d118      	bne.n	800a73e <_printf_float+0x1c2>
 800a70c:	2900      	cmp	r1, #0
 800a70e:	6863      	ldr	r3, [r4, #4]
 800a710:	dd0b      	ble.n	800a72a <_printf_float+0x1ae>
 800a712:	6121      	str	r1, [r4, #16]
 800a714:	b913      	cbnz	r3, 800a71c <_printf_float+0x1a0>
 800a716:	6822      	ldr	r2, [r4, #0]
 800a718:	07d0      	lsls	r0, r2, #31
 800a71a:	d502      	bpl.n	800a722 <_printf_float+0x1a6>
 800a71c:	3301      	adds	r3, #1
 800a71e:	440b      	add	r3, r1
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	65a1      	str	r1, [r4, #88]	; 0x58
 800a724:	f04f 0900 	mov.w	r9, #0
 800a728:	e7de      	b.n	800a6e8 <_printf_float+0x16c>
 800a72a:	b913      	cbnz	r3, 800a732 <_printf_float+0x1b6>
 800a72c:	6822      	ldr	r2, [r4, #0]
 800a72e:	07d2      	lsls	r2, r2, #31
 800a730:	d501      	bpl.n	800a736 <_printf_float+0x1ba>
 800a732:	3302      	adds	r3, #2
 800a734:	e7f4      	b.n	800a720 <_printf_float+0x1a4>
 800a736:	2301      	movs	r3, #1
 800a738:	e7f2      	b.n	800a720 <_printf_float+0x1a4>
 800a73a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a73e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a740:	4299      	cmp	r1, r3
 800a742:	db05      	blt.n	800a750 <_printf_float+0x1d4>
 800a744:	6823      	ldr	r3, [r4, #0]
 800a746:	6121      	str	r1, [r4, #16]
 800a748:	07d8      	lsls	r0, r3, #31
 800a74a:	d5ea      	bpl.n	800a722 <_printf_float+0x1a6>
 800a74c:	1c4b      	adds	r3, r1, #1
 800a74e:	e7e7      	b.n	800a720 <_printf_float+0x1a4>
 800a750:	2900      	cmp	r1, #0
 800a752:	bfd4      	ite	le
 800a754:	f1c1 0202 	rsble	r2, r1, #2
 800a758:	2201      	movgt	r2, #1
 800a75a:	4413      	add	r3, r2
 800a75c:	e7e0      	b.n	800a720 <_printf_float+0x1a4>
 800a75e:	6823      	ldr	r3, [r4, #0]
 800a760:	055a      	lsls	r2, r3, #21
 800a762:	d407      	bmi.n	800a774 <_printf_float+0x1f8>
 800a764:	6923      	ldr	r3, [r4, #16]
 800a766:	4642      	mov	r2, r8
 800a768:	4631      	mov	r1, r6
 800a76a:	4628      	mov	r0, r5
 800a76c:	47b8      	blx	r7
 800a76e:	3001      	adds	r0, #1
 800a770:	d12c      	bne.n	800a7cc <_printf_float+0x250>
 800a772:	e764      	b.n	800a63e <_printf_float+0xc2>
 800a774:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a778:	f240 80e0 	bls.w	800a93c <_printf_float+0x3c0>
 800a77c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a780:	2200      	movs	r2, #0
 800a782:	2300      	movs	r3, #0
 800a784:	f7f6 f9c0 	bl	8000b08 <__aeabi_dcmpeq>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d034      	beq.n	800a7f6 <_printf_float+0x27a>
 800a78c:	4a37      	ldr	r2, [pc, #220]	; (800a86c <_printf_float+0x2f0>)
 800a78e:	2301      	movs	r3, #1
 800a790:	4631      	mov	r1, r6
 800a792:	4628      	mov	r0, r5
 800a794:	47b8      	blx	r7
 800a796:	3001      	adds	r0, #1
 800a798:	f43f af51 	beq.w	800a63e <_printf_float+0xc2>
 800a79c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	db02      	blt.n	800a7aa <_printf_float+0x22e>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07d8      	lsls	r0, r3, #31
 800a7a8:	d510      	bpl.n	800a7cc <_printf_float+0x250>
 800a7aa:	ee18 3a10 	vmov	r3, s16
 800a7ae:	4652      	mov	r2, sl
 800a7b0:	4631      	mov	r1, r6
 800a7b2:	4628      	mov	r0, r5
 800a7b4:	47b8      	blx	r7
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	f43f af41 	beq.w	800a63e <_printf_float+0xc2>
 800a7bc:	f04f 0800 	mov.w	r8, #0
 800a7c0:	f104 091a 	add.w	r9, r4, #26
 800a7c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	4543      	cmp	r3, r8
 800a7ca:	dc09      	bgt.n	800a7e0 <_printf_float+0x264>
 800a7cc:	6823      	ldr	r3, [r4, #0]
 800a7ce:	079b      	lsls	r3, r3, #30
 800a7d0:	f100 8105 	bmi.w	800a9de <_printf_float+0x462>
 800a7d4:	68e0      	ldr	r0, [r4, #12]
 800a7d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d8:	4298      	cmp	r0, r3
 800a7da:	bfb8      	it	lt
 800a7dc:	4618      	movlt	r0, r3
 800a7de:	e730      	b.n	800a642 <_printf_float+0xc6>
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	464a      	mov	r2, r9
 800a7e4:	4631      	mov	r1, r6
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	47b8      	blx	r7
 800a7ea:	3001      	adds	r0, #1
 800a7ec:	f43f af27 	beq.w	800a63e <_printf_float+0xc2>
 800a7f0:	f108 0801 	add.w	r8, r8, #1
 800a7f4:	e7e6      	b.n	800a7c4 <_printf_float+0x248>
 800a7f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc39      	bgt.n	800a870 <_printf_float+0x2f4>
 800a7fc:	4a1b      	ldr	r2, [pc, #108]	; (800a86c <_printf_float+0x2f0>)
 800a7fe:	2301      	movs	r3, #1
 800a800:	4631      	mov	r1, r6
 800a802:	4628      	mov	r0, r5
 800a804:	47b8      	blx	r7
 800a806:	3001      	adds	r0, #1
 800a808:	f43f af19 	beq.w	800a63e <_printf_float+0xc2>
 800a80c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a810:	4313      	orrs	r3, r2
 800a812:	d102      	bne.n	800a81a <_printf_float+0x29e>
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	07d9      	lsls	r1, r3, #31
 800a818:	d5d8      	bpl.n	800a7cc <_printf_float+0x250>
 800a81a:	ee18 3a10 	vmov	r3, s16
 800a81e:	4652      	mov	r2, sl
 800a820:	4631      	mov	r1, r6
 800a822:	4628      	mov	r0, r5
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	f43f af09 	beq.w	800a63e <_printf_float+0xc2>
 800a82c:	f04f 0900 	mov.w	r9, #0
 800a830:	f104 0a1a 	add.w	sl, r4, #26
 800a834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a836:	425b      	negs	r3, r3
 800a838:	454b      	cmp	r3, r9
 800a83a:	dc01      	bgt.n	800a840 <_printf_float+0x2c4>
 800a83c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a83e:	e792      	b.n	800a766 <_printf_float+0x1ea>
 800a840:	2301      	movs	r3, #1
 800a842:	4652      	mov	r2, sl
 800a844:	4631      	mov	r1, r6
 800a846:	4628      	mov	r0, r5
 800a848:	47b8      	blx	r7
 800a84a:	3001      	adds	r0, #1
 800a84c:	f43f aef7 	beq.w	800a63e <_printf_float+0xc2>
 800a850:	f109 0901 	add.w	r9, r9, #1
 800a854:	e7ee      	b.n	800a834 <_printf_float+0x2b8>
 800a856:	bf00      	nop
 800a858:	7fefffff 	.word	0x7fefffff
 800a85c:	0800ec68 	.word	0x0800ec68
 800a860:	0800ec6c 	.word	0x0800ec6c
 800a864:	0800ec74 	.word	0x0800ec74
 800a868:	0800ec70 	.word	0x0800ec70
 800a86c:	0800ec78 	.word	0x0800ec78
 800a870:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a872:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a874:	429a      	cmp	r2, r3
 800a876:	bfa8      	it	ge
 800a878:	461a      	movge	r2, r3
 800a87a:	2a00      	cmp	r2, #0
 800a87c:	4691      	mov	r9, r2
 800a87e:	dc37      	bgt.n	800a8f0 <_printf_float+0x374>
 800a880:	f04f 0b00 	mov.w	fp, #0
 800a884:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a888:	f104 021a 	add.w	r2, r4, #26
 800a88c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a88e:	9305      	str	r3, [sp, #20]
 800a890:	eba3 0309 	sub.w	r3, r3, r9
 800a894:	455b      	cmp	r3, fp
 800a896:	dc33      	bgt.n	800a900 <_printf_float+0x384>
 800a898:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a89c:	429a      	cmp	r2, r3
 800a89e:	db3b      	blt.n	800a918 <_printf_float+0x39c>
 800a8a0:	6823      	ldr	r3, [r4, #0]
 800a8a2:	07da      	lsls	r2, r3, #31
 800a8a4:	d438      	bmi.n	800a918 <_printf_float+0x39c>
 800a8a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a8a8:	9b05      	ldr	r3, [sp, #20]
 800a8aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	eba2 0901 	sub.w	r9, r2, r1
 800a8b2:	4599      	cmp	r9, r3
 800a8b4:	bfa8      	it	ge
 800a8b6:	4699      	movge	r9, r3
 800a8b8:	f1b9 0f00 	cmp.w	r9, #0
 800a8bc:	dc35      	bgt.n	800a92a <_printf_float+0x3ae>
 800a8be:	f04f 0800 	mov.w	r8, #0
 800a8c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a8c6:	f104 0a1a 	add.w	sl, r4, #26
 800a8ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	eba3 0309 	sub.w	r3, r3, r9
 800a8d4:	4543      	cmp	r3, r8
 800a8d6:	f77f af79 	ble.w	800a7cc <_printf_float+0x250>
 800a8da:	2301      	movs	r3, #1
 800a8dc:	4652      	mov	r2, sl
 800a8de:	4631      	mov	r1, r6
 800a8e0:	4628      	mov	r0, r5
 800a8e2:	47b8      	blx	r7
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f43f aeaa 	beq.w	800a63e <_printf_float+0xc2>
 800a8ea:	f108 0801 	add.w	r8, r8, #1
 800a8ee:	e7ec      	b.n	800a8ca <_printf_float+0x34e>
 800a8f0:	4613      	mov	r3, r2
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4642      	mov	r2, r8
 800a8f6:	4628      	mov	r0, r5
 800a8f8:	47b8      	blx	r7
 800a8fa:	3001      	adds	r0, #1
 800a8fc:	d1c0      	bne.n	800a880 <_printf_float+0x304>
 800a8fe:	e69e      	b.n	800a63e <_printf_float+0xc2>
 800a900:	2301      	movs	r3, #1
 800a902:	4631      	mov	r1, r6
 800a904:	4628      	mov	r0, r5
 800a906:	9205      	str	r2, [sp, #20]
 800a908:	47b8      	blx	r7
 800a90a:	3001      	adds	r0, #1
 800a90c:	f43f ae97 	beq.w	800a63e <_printf_float+0xc2>
 800a910:	9a05      	ldr	r2, [sp, #20]
 800a912:	f10b 0b01 	add.w	fp, fp, #1
 800a916:	e7b9      	b.n	800a88c <_printf_float+0x310>
 800a918:	ee18 3a10 	vmov	r3, s16
 800a91c:	4652      	mov	r2, sl
 800a91e:	4631      	mov	r1, r6
 800a920:	4628      	mov	r0, r5
 800a922:	47b8      	blx	r7
 800a924:	3001      	adds	r0, #1
 800a926:	d1be      	bne.n	800a8a6 <_printf_float+0x32a>
 800a928:	e689      	b.n	800a63e <_printf_float+0xc2>
 800a92a:	9a05      	ldr	r2, [sp, #20]
 800a92c:	464b      	mov	r3, r9
 800a92e:	4442      	add	r2, r8
 800a930:	4631      	mov	r1, r6
 800a932:	4628      	mov	r0, r5
 800a934:	47b8      	blx	r7
 800a936:	3001      	adds	r0, #1
 800a938:	d1c1      	bne.n	800a8be <_printf_float+0x342>
 800a93a:	e680      	b.n	800a63e <_printf_float+0xc2>
 800a93c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a93e:	2a01      	cmp	r2, #1
 800a940:	dc01      	bgt.n	800a946 <_printf_float+0x3ca>
 800a942:	07db      	lsls	r3, r3, #31
 800a944:	d538      	bpl.n	800a9b8 <_printf_float+0x43c>
 800a946:	2301      	movs	r3, #1
 800a948:	4642      	mov	r2, r8
 800a94a:	4631      	mov	r1, r6
 800a94c:	4628      	mov	r0, r5
 800a94e:	47b8      	blx	r7
 800a950:	3001      	adds	r0, #1
 800a952:	f43f ae74 	beq.w	800a63e <_printf_float+0xc2>
 800a956:	ee18 3a10 	vmov	r3, s16
 800a95a:	4652      	mov	r2, sl
 800a95c:	4631      	mov	r1, r6
 800a95e:	4628      	mov	r0, r5
 800a960:	47b8      	blx	r7
 800a962:	3001      	adds	r0, #1
 800a964:	f43f ae6b 	beq.w	800a63e <_printf_float+0xc2>
 800a968:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a96c:	2200      	movs	r2, #0
 800a96e:	2300      	movs	r3, #0
 800a970:	f7f6 f8ca 	bl	8000b08 <__aeabi_dcmpeq>
 800a974:	b9d8      	cbnz	r0, 800a9ae <_printf_float+0x432>
 800a976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a978:	f108 0201 	add.w	r2, r8, #1
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4631      	mov	r1, r6
 800a980:	4628      	mov	r0, r5
 800a982:	47b8      	blx	r7
 800a984:	3001      	adds	r0, #1
 800a986:	d10e      	bne.n	800a9a6 <_printf_float+0x42a>
 800a988:	e659      	b.n	800a63e <_printf_float+0xc2>
 800a98a:	2301      	movs	r3, #1
 800a98c:	4652      	mov	r2, sl
 800a98e:	4631      	mov	r1, r6
 800a990:	4628      	mov	r0, r5
 800a992:	47b8      	blx	r7
 800a994:	3001      	adds	r0, #1
 800a996:	f43f ae52 	beq.w	800a63e <_printf_float+0xc2>
 800a99a:	f108 0801 	add.w	r8, r8, #1
 800a99e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9a0:	3b01      	subs	r3, #1
 800a9a2:	4543      	cmp	r3, r8
 800a9a4:	dcf1      	bgt.n	800a98a <_printf_float+0x40e>
 800a9a6:	464b      	mov	r3, r9
 800a9a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a9ac:	e6dc      	b.n	800a768 <_printf_float+0x1ec>
 800a9ae:	f04f 0800 	mov.w	r8, #0
 800a9b2:	f104 0a1a 	add.w	sl, r4, #26
 800a9b6:	e7f2      	b.n	800a99e <_printf_float+0x422>
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	4642      	mov	r2, r8
 800a9bc:	e7df      	b.n	800a97e <_printf_float+0x402>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	464a      	mov	r2, r9
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	47b8      	blx	r7
 800a9c8:	3001      	adds	r0, #1
 800a9ca:	f43f ae38 	beq.w	800a63e <_printf_float+0xc2>
 800a9ce:	f108 0801 	add.w	r8, r8, #1
 800a9d2:	68e3      	ldr	r3, [r4, #12]
 800a9d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a9d6:	1a5b      	subs	r3, r3, r1
 800a9d8:	4543      	cmp	r3, r8
 800a9da:	dcf0      	bgt.n	800a9be <_printf_float+0x442>
 800a9dc:	e6fa      	b.n	800a7d4 <_printf_float+0x258>
 800a9de:	f04f 0800 	mov.w	r8, #0
 800a9e2:	f104 0919 	add.w	r9, r4, #25
 800a9e6:	e7f4      	b.n	800a9d2 <_printf_float+0x456>

0800a9e8 <_printf_common>:
 800a9e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9ec:	4616      	mov	r6, r2
 800a9ee:	4699      	mov	r9, r3
 800a9f0:	688a      	ldr	r2, [r1, #8]
 800a9f2:	690b      	ldr	r3, [r1, #16]
 800a9f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	bfb8      	it	lt
 800a9fc:	4613      	movlt	r3, r2
 800a9fe:	6033      	str	r3, [r6, #0]
 800aa00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa04:	4607      	mov	r7, r0
 800aa06:	460c      	mov	r4, r1
 800aa08:	b10a      	cbz	r2, 800aa0e <_printf_common+0x26>
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	6033      	str	r3, [r6, #0]
 800aa0e:	6823      	ldr	r3, [r4, #0]
 800aa10:	0699      	lsls	r1, r3, #26
 800aa12:	bf42      	ittt	mi
 800aa14:	6833      	ldrmi	r3, [r6, #0]
 800aa16:	3302      	addmi	r3, #2
 800aa18:	6033      	strmi	r3, [r6, #0]
 800aa1a:	6825      	ldr	r5, [r4, #0]
 800aa1c:	f015 0506 	ands.w	r5, r5, #6
 800aa20:	d106      	bne.n	800aa30 <_printf_common+0x48>
 800aa22:	f104 0a19 	add.w	sl, r4, #25
 800aa26:	68e3      	ldr	r3, [r4, #12]
 800aa28:	6832      	ldr	r2, [r6, #0]
 800aa2a:	1a9b      	subs	r3, r3, r2
 800aa2c:	42ab      	cmp	r3, r5
 800aa2e:	dc26      	bgt.n	800aa7e <_printf_common+0x96>
 800aa30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa34:	1e13      	subs	r3, r2, #0
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	bf18      	it	ne
 800aa3a:	2301      	movne	r3, #1
 800aa3c:	0692      	lsls	r2, r2, #26
 800aa3e:	d42b      	bmi.n	800aa98 <_printf_common+0xb0>
 800aa40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa44:	4649      	mov	r1, r9
 800aa46:	4638      	mov	r0, r7
 800aa48:	47c0      	blx	r8
 800aa4a:	3001      	adds	r0, #1
 800aa4c:	d01e      	beq.n	800aa8c <_printf_common+0xa4>
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	68e5      	ldr	r5, [r4, #12]
 800aa52:	6832      	ldr	r2, [r6, #0]
 800aa54:	f003 0306 	and.w	r3, r3, #6
 800aa58:	2b04      	cmp	r3, #4
 800aa5a:	bf08      	it	eq
 800aa5c:	1aad      	subeq	r5, r5, r2
 800aa5e:	68a3      	ldr	r3, [r4, #8]
 800aa60:	6922      	ldr	r2, [r4, #16]
 800aa62:	bf0c      	ite	eq
 800aa64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aa68:	2500      	movne	r5, #0
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	bfc4      	itt	gt
 800aa6e:	1a9b      	subgt	r3, r3, r2
 800aa70:	18ed      	addgt	r5, r5, r3
 800aa72:	2600      	movs	r6, #0
 800aa74:	341a      	adds	r4, #26
 800aa76:	42b5      	cmp	r5, r6
 800aa78:	d11a      	bne.n	800aab0 <_printf_common+0xc8>
 800aa7a:	2000      	movs	r0, #0
 800aa7c:	e008      	b.n	800aa90 <_printf_common+0xa8>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	4652      	mov	r2, sl
 800aa82:	4649      	mov	r1, r9
 800aa84:	4638      	mov	r0, r7
 800aa86:	47c0      	blx	r8
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d103      	bne.n	800aa94 <_printf_common+0xac>
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa94:	3501      	adds	r5, #1
 800aa96:	e7c6      	b.n	800aa26 <_printf_common+0x3e>
 800aa98:	18e1      	adds	r1, r4, r3
 800aa9a:	1c5a      	adds	r2, r3, #1
 800aa9c:	2030      	movs	r0, #48	; 0x30
 800aa9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aaa2:	4422      	add	r2, r4
 800aaa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aaa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aaac:	3302      	adds	r3, #2
 800aaae:	e7c7      	b.n	800aa40 <_printf_common+0x58>
 800aab0:	2301      	movs	r3, #1
 800aab2:	4622      	mov	r2, r4
 800aab4:	4649      	mov	r1, r9
 800aab6:	4638      	mov	r0, r7
 800aab8:	47c0      	blx	r8
 800aaba:	3001      	adds	r0, #1
 800aabc:	d0e6      	beq.n	800aa8c <_printf_common+0xa4>
 800aabe:	3601      	adds	r6, #1
 800aac0:	e7d9      	b.n	800aa76 <_printf_common+0x8e>
	...

0800aac4 <_printf_i>:
 800aac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aac8:	460c      	mov	r4, r1
 800aaca:	4691      	mov	r9, r2
 800aacc:	7e27      	ldrb	r7, [r4, #24]
 800aace:	990c      	ldr	r1, [sp, #48]	; 0x30
 800aad0:	2f78      	cmp	r7, #120	; 0x78
 800aad2:	4680      	mov	r8, r0
 800aad4:	469a      	mov	sl, r3
 800aad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aada:	d807      	bhi.n	800aaec <_printf_i+0x28>
 800aadc:	2f62      	cmp	r7, #98	; 0x62
 800aade:	d80a      	bhi.n	800aaf6 <_printf_i+0x32>
 800aae0:	2f00      	cmp	r7, #0
 800aae2:	f000 80d8 	beq.w	800ac96 <_printf_i+0x1d2>
 800aae6:	2f58      	cmp	r7, #88	; 0x58
 800aae8:	f000 80a3 	beq.w	800ac32 <_printf_i+0x16e>
 800aaec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800aaf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aaf4:	e03a      	b.n	800ab6c <_printf_i+0xa8>
 800aaf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aafa:	2b15      	cmp	r3, #21
 800aafc:	d8f6      	bhi.n	800aaec <_printf_i+0x28>
 800aafe:	a001      	add	r0, pc, #4	; (adr r0, 800ab04 <_printf_i+0x40>)
 800ab00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ab04:	0800ab5d 	.word	0x0800ab5d
 800ab08:	0800ab71 	.word	0x0800ab71
 800ab0c:	0800aaed 	.word	0x0800aaed
 800ab10:	0800aaed 	.word	0x0800aaed
 800ab14:	0800aaed 	.word	0x0800aaed
 800ab18:	0800aaed 	.word	0x0800aaed
 800ab1c:	0800ab71 	.word	0x0800ab71
 800ab20:	0800aaed 	.word	0x0800aaed
 800ab24:	0800aaed 	.word	0x0800aaed
 800ab28:	0800aaed 	.word	0x0800aaed
 800ab2c:	0800aaed 	.word	0x0800aaed
 800ab30:	0800ac7d 	.word	0x0800ac7d
 800ab34:	0800aba1 	.word	0x0800aba1
 800ab38:	0800ac5f 	.word	0x0800ac5f
 800ab3c:	0800aaed 	.word	0x0800aaed
 800ab40:	0800aaed 	.word	0x0800aaed
 800ab44:	0800ac9f 	.word	0x0800ac9f
 800ab48:	0800aaed 	.word	0x0800aaed
 800ab4c:	0800aba1 	.word	0x0800aba1
 800ab50:	0800aaed 	.word	0x0800aaed
 800ab54:	0800aaed 	.word	0x0800aaed
 800ab58:	0800ac67 	.word	0x0800ac67
 800ab5c:	680b      	ldr	r3, [r1, #0]
 800ab5e:	1d1a      	adds	r2, r3, #4
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	600a      	str	r2, [r1, #0]
 800ab64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ab68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	e0a3      	b.n	800acb8 <_printf_i+0x1f4>
 800ab70:	6825      	ldr	r5, [r4, #0]
 800ab72:	6808      	ldr	r0, [r1, #0]
 800ab74:	062e      	lsls	r6, r5, #24
 800ab76:	f100 0304 	add.w	r3, r0, #4
 800ab7a:	d50a      	bpl.n	800ab92 <_printf_i+0xce>
 800ab7c:	6805      	ldr	r5, [r0, #0]
 800ab7e:	600b      	str	r3, [r1, #0]
 800ab80:	2d00      	cmp	r5, #0
 800ab82:	da03      	bge.n	800ab8c <_printf_i+0xc8>
 800ab84:	232d      	movs	r3, #45	; 0x2d
 800ab86:	426d      	negs	r5, r5
 800ab88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab8c:	485e      	ldr	r0, [pc, #376]	; (800ad08 <_printf_i+0x244>)
 800ab8e:	230a      	movs	r3, #10
 800ab90:	e019      	b.n	800abc6 <_printf_i+0x102>
 800ab92:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ab96:	6805      	ldr	r5, [r0, #0]
 800ab98:	600b      	str	r3, [r1, #0]
 800ab9a:	bf18      	it	ne
 800ab9c:	b22d      	sxthne	r5, r5
 800ab9e:	e7ef      	b.n	800ab80 <_printf_i+0xbc>
 800aba0:	680b      	ldr	r3, [r1, #0]
 800aba2:	6825      	ldr	r5, [r4, #0]
 800aba4:	1d18      	adds	r0, r3, #4
 800aba6:	6008      	str	r0, [r1, #0]
 800aba8:	0628      	lsls	r0, r5, #24
 800abaa:	d501      	bpl.n	800abb0 <_printf_i+0xec>
 800abac:	681d      	ldr	r5, [r3, #0]
 800abae:	e002      	b.n	800abb6 <_printf_i+0xf2>
 800abb0:	0669      	lsls	r1, r5, #25
 800abb2:	d5fb      	bpl.n	800abac <_printf_i+0xe8>
 800abb4:	881d      	ldrh	r5, [r3, #0]
 800abb6:	4854      	ldr	r0, [pc, #336]	; (800ad08 <_printf_i+0x244>)
 800abb8:	2f6f      	cmp	r7, #111	; 0x6f
 800abba:	bf0c      	ite	eq
 800abbc:	2308      	moveq	r3, #8
 800abbe:	230a      	movne	r3, #10
 800abc0:	2100      	movs	r1, #0
 800abc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abc6:	6866      	ldr	r6, [r4, #4]
 800abc8:	60a6      	str	r6, [r4, #8]
 800abca:	2e00      	cmp	r6, #0
 800abcc:	bfa2      	ittt	ge
 800abce:	6821      	ldrge	r1, [r4, #0]
 800abd0:	f021 0104 	bicge.w	r1, r1, #4
 800abd4:	6021      	strge	r1, [r4, #0]
 800abd6:	b90d      	cbnz	r5, 800abdc <_printf_i+0x118>
 800abd8:	2e00      	cmp	r6, #0
 800abda:	d04d      	beq.n	800ac78 <_printf_i+0x1b4>
 800abdc:	4616      	mov	r6, r2
 800abde:	fbb5 f1f3 	udiv	r1, r5, r3
 800abe2:	fb03 5711 	mls	r7, r3, r1, r5
 800abe6:	5dc7      	ldrb	r7, [r0, r7]
 800abe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800abec:	462f      	mov	r7, r5
 800abee:	42bb      	cmp	r3, r7
 800abf0:	460d      	mov	r5, r1
 800abf2:	d9f4      	bls.n	800abde <_printf_i+0x11a>
 800abf4:	2b08      	cmp	r3, #8
 800abf6:	d10b      	bne.n	800ac10 <_printf_i+0x14c>
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	07df      	lsls	r7, r3, #31
 800abfc:	d508      	bpl.n	800ac10 <_printf_i+0x14c>
 800abfe:	6923      	ldr	r3, [r4, #16]
 800ac00:	6861      	ldr	r1, [r4, #4]
 800ac02:	4299      	cmp	r1, r3
 800ac04:	bfde      	ittt	le
 800ac06:	2330      	movle	r3, #48	; 0x30
 800ac08:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ac0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ac10:	1b92      	subs	r2, r2, r6
 800ac12:	6122      	str	r2, [r4, #16]
 800ac14:	f8cd a000 	str.w	sl, [sp]
 800ac18:	464b      	mov	r3, r9
 800ac1a:	aa03      	add	r2, sp, #12
 800ac1c:	4621      	mov	r1, r4
 800ac1e:	4640      	mov	r0, r8
 800ac20:	f7ff fee2 	bl	800a9e8 <_printf_common>
 800ac24:	3001      	adds	r0, #1
 800ac26:	d14c      	bne.n	800acc2 <_printf_i+0x1fe>
 800ac28:	f04f 30ff 	mov.w	r0, #4294967295
 800ac2c:	b004      	add	sp, #16
 800ac2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac32:	4835      	ldr	r0, [pc, #212]	; (800ad08 <_printf_i+0x244>)
 800ac34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac38:	6823      	ldr	r3, [r4, #0]
 800ac3a:	680e      	ldr	r6, [r1, #0]
 800ac3c:	061f      	lsls	r7, r3, #24
 800ac3e:	f856 5b04 	ldr.w	r5, [r6], #4
 800ac42:	600e      	str	r6, [r1, #0]
 800ac44:	d514      	bpl.n	800ac70 <_printf_i+0x1ac>
 800ac46:	07d9      	lsls	r1, r3, #31
 800ac48:	bf44      	itt	mi
 800ac4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ac4e:	6023      	strmi	r3, [r4, #0]
 800ac50:	b91d      	cbnz	r5, 800ac5a <_printf_i+0x196>
 800ac52:	6823      	ldr	r3, [r4, #0]
 800ac54:	f023 0320 	bic.w	r3, r3, #32
 800ac58:	6023      	str	r3, [r4, #0]
 800ac5a:	2310      	movs	r3, #16
 800ac5c:	e7b0      	b.n	800abc0 <_printf_i+0xfc>
 800ac5e:	6823      	ldr	r3, [r4, #0]
 800ac60:	f043 0320 	orr.w	r3, r3, #32
 800ac64:	6023      	str	r3, [r4, #0]
 800ac66:	2378      	movs	r3, #120	; 0x78
 800ac68:	4828      	ldr	r0, [pc, #160]	; (800ad0c <_printf_i+0x248>)
 800ac6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ac6e:	e7e3      	b.n	800ac38 <_printf_i+0x174>
 800ac70:	065e      	lsls	r6, r3, #25
 800ac72:	bf48      	it	mi
 800ac74:	b2ad      	uxthmi	r5, r5
 800ac76:	e7e6      	b.n	800ac46 <_printf_i+0x182>
 800ac78:	4616      	mov	r6, r2
 800ac7a:	e7bb      	b.n	800abf4 <_printf_i+0x130>
 800ac7c:	680b      	ldr	r3, [r1, #0]
 800ac7e:	6826      	ldr	r6, [r4, #0]
 800ac80:	6960      	ldr	r0, [r4, #20]
 800ac82:	1d1d      	adds	r5, r3, #4
 800ac84:	600d      	str	r5, [r1, #0]
 800ac86:	0635      	lsls	r5, r6, #24
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	d501      	bpl.n	800ac90 <_printf_i+0x1cc>
 800ac8c:	6018      	str	r0, [r3, #0]
 800ac8e:	e002      	b.n	800ac96 <_printf_i+0x1d2>
 800ac90:	0671      	lsls	r1, r6, #25
 800ac92:	d5fb      	bpl.n	800ac8c <_printf_i+0x1c8>
 800ac94:	8018      	strh	r0, [r3, #0]
 800ac96:	2300      	movs	r3, #0
 800ac98:	6123      	str	r3, [r4, #16]
 800ac9a:	4616      	mov	r6, r2
 800ac9c:	e7ba      	b.n	800ac14 <_printf_i+0x150>
 800ac9e:	680b      	ldr	r3, [r1, #0]
 800aca0:	1d1a      	adds	r2, r3, #4
 800aca2:	600a      	str	r2, [r1, #0]
 800aca4:	681e      	ldr	r6, [r3, #0]
 800aca6:	6862      	ldr	r2, [r4, #4]
 800aca8:	2100      	movs	r1, #0
 800acaa:	4630      	mov	r0, r6
 800acac:	f7f5 fab8 	bl	8000220 <memchr>
 800acb0:	b108      	cbz	r0, 800acb6 <_printf_i+0x1f2>
 800acb2:	1b80      	subs	r0, r0, r6
 800acb4:	6060      	str	r0, [r4, #4]
 800acb6:	6863      	ldr	r3, [r4, #4]
 800acb8:	6123      	str	r3, [r4, #16]
 800acba:	2300      	movs	r3, #0
 800acbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acc0:	e7a8      	b.n	800ac14 <_printf_i+0x150>
 800acc2:	6923      	ldr	r3, [r4, #16]
 800acc4:	4632      	mov	r2, r6
 800acc6:	4649      	mov	r1, r9
 800acc8:	4640      	mov	r0, r8
 800acca:	47d0      	blx	sl
 800accc:	3001      	adds	r0, #1
 800acce:	d0ab      	beq.n	800ac28 <_printf_i+0x164>
 800acd0:	6823      	ldr	r3, [r4, #0]
 800acd2:	079b      	lsls	r3, r3, #30
 800acd4:	d413      	bmi.n	800acfe <_printf_i+0x23a>
 800acd6:	68e0      	ldr	r0, [r4, #12]
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	4298      	cmp	r0, r3
 800acdc:	bfb8      	it	lt
 800acde:	4618      	movlt	r0, r3
 800ace0:	e7a4      	b.n	800ac2c <_printf_i+0x168>
 800ace2:	2301      	movs	r3, #1
 800ace4:	4632      	mov	r2, r6
 800ace6:	4649      	mov	r1, r9
 800ace8:	4640      	mov	r0, r8
 800acea:	47d0      	blx	sl
 800acec:	3001      	adds	r0, #1
 800acee:	d09b      	beq.n	800ac28 <_printf_i+0x164>
 800acf0:	3501      	adds	r5, #1
 800acf2:	68e3      	ldr	r3, [r4, #12]
 800acf4:	9903      	ldr	r1, [sp, #12]
 800acf6:	1a5b      	subs	r3, r3, r1
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	dcf2      	bgt.n	800ace2 <_printf_i+0x21e>
 800acfc:	e7eb      	b.n	800acd6 <_printf_i+0x212>
 800acfe:	2500      	movs	r5, #0
 800ad00:	f104 0619 	add.w	r6, r4, #25
 800ad04:	e7f5      	b.n	800acf2 <_printf_i+0x22e>
 800ad06:	bf00      	nop
 800ad08:	0800ec7a 	.word	0x0800ec7a
 800ad0c:	0800ec8b 	.word	0x0800ec8b

0800ad10 <siprintf>:
 800ad10:	b40e      	push	{r1, r2, r3}
 800ad12:	b500      	push	{lr}
 800ad14:	b09c      	sub	sp, #112	; 0x70
 800ad16:	ab1d      	add	r3, sp, #116	; 0x74
 800ad18:	9002      	str	r0, [sp, #8]
 800ad1a:	9006      	str	r0, [sp, #24]
 800ad1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad20:	4809      	ldr	r0, [pc, #36]	; (800ad48 <siprintf+0x38>)
 800ad22:	9107      	str	r1, [sp, #28]
 800ad24:	9104      	str	r1, [sp, #16]
 800ad26:	4909      	ldr	r1, [pc, #36]	; (800ad4c <siprintf+0x3c>)
 800ad28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad2c:	9105      	str	r1, [sp, #20]
 800ad2e:	6800      	ldr	r0, [r0, #0]
 800ad30:	9301      	str	r3, [sp, #4]
 800ad32:	a902      	add	r1, sp, #8
 800ad34:	f001 fb32 	bl	800c39c <_svfiprintf_r>
 800ad38:	9b02      	ldr	r3, [sp, #8]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	701a      	strb	r2, [r3, #0]
 800ad3e:	b01c      	add	sp, #112	; 0x70
 800ad40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad44:	b003      	add	sp, #12
 800ad46:	4770      	bx	lr
 800ad48:	20000040 	.word	0x20000040
 800ad4c:	ffff0208 	.word	0xffff0208

0800ad50 <quorem>:
 800ad50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad54:	6903      	ldr	r3, [r0, #16]
 800ad56:	690c      	ldr	r4, [r1, #16]
 800ad58:	42a3      	cmp	r3, r4
 800ad5a:	4607      	mov	r7, r0
 800ad5c:	f2c0 8081 	blt.w	800ae62 <quorem+0x112>
 800ad60:	3c01      	subs	r4, #1
 800ad62:	f101 0814 	add.w	r8, r1, #20
 800ad66:	f100 0514 	add.w	r5, r0, #20
 800ad6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad6e:	9301      	str	r3, [sp, #4]
 800ad70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	429a      	cmp	r2, r3
 800ad7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ad80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad84:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad88:	d331      	bcc.n	800adee <quorem+0x9e>
 800ad8a:	f04f 0e00 	mov.w	lr, #0
 800ad8e:	4640      	mov	r0, r8
 800ad90:	46ac      	mov	ip, r5
 800ad92:	46f2      	mov	sl, lr
 800ad94:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad98:	b293      	uxth	r3, r2
 800ad9a:	fb06 e303 	mla	r3, r6, r3, lr
 800ad9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	ebaa 0303 	sub.w	r3, sl, r3
 800ada8:	0c12      	lsrs	r2, r2, #16
 800adaa:	f8dc a000 	ldr.w	sl, [ip]
 800adae:	fb06 e202 	mla	r2, r6, r2, lr
 800adb2:	fa13 f38a 	uxtah	r3, r3, sl
 800adb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800adba:	fa1f fa82 	uxth.w	sl, r2
 800adbe:	f8dc 2000 	ldr.w	r2, [ip]
 800adc2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800adc6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adca:	b29b      	uxth	r3, r3
 800adcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800add0:	4581      	cmp	r9, r0
 800add2:	f84c 3b04 	str.w	r3, [ip], #4
 800add6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800adda:	d2db      	bcs.n	800ad94 <quorem+0x44>
 800addc:	f855 300b 	ldr.w	r3, [r5, fp]
 800ade0:	b92b      	cbnz	r3, 800adee <quorem+0x9e>
 800ade2:	9b01      	ldr	r3, [sp, #4]
 800ade4:	3b04      	subs	r3, #4
 800ade6:	429d      	cmp	r5, r3
 800ade8:	461a      	mov	r2, r3
 800adea:	d32e      	bcc.n	800ae4a <quorem+0xfa>
 800adec:	613c      	str	r4, [r7, #16]
 800adee:	4638      	mov	r0, r7
 800adf0:	f001 f8be 	bl	800bf70 <__mcmp>
 800adf4:	2800      	cmp	r0, #0
 800adf6:	db24      	blt.n	800ae42 <quorem+0xf2>
 800adf8:	3601      	adds	r6, #1
 800adfa:	4628      	mov	r0, r5
 800adfc:	f04f 0c00 	mov.w	ip, #0
 800ae00:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae04:	f8d0 e000 	ldr.w	lr, [r0]
 800ae08:	b293      	uxth	r3, r2
 800ae0a:	ebac 0303 	sub.w	r3, ip, r3
 800ae0e:	0c12      	lsrs	r2, r2, #16
 800ae10:	fa13 f38e 	uxtah	r3, r3, lr
 800ae14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ae18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae22:	45c1      	cmp	r9, r8
 800ae24:	f840 3b04 	str.w	r3, [r0], #4
 800ae28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ae2c:	d2e8      	bcs.n	800ae00 <quorem+0xb0>
 800ae2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae36:	b922      	cbnz	r2, 800ae42 <quorem+0xf2>
 800ae38:	3b04      	subs	r3, #4
 800ae3a:	429d      	cmp	r5, r3
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	d30a      	bcc.n	800ae56 <quorem+0x106>
 800ae40:	613c      	str	r4, [r7, #16]
 800ae42:	4630      	mov	r0, r6
 800ae44:	b003      	add	sp, #12
 800ae46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	3b04      	subs	r3, #4
 800ae4e:	2a00      	cmp	r2, #0
 800ae50:	d1cc      	bne.n	800adec <quorem+0x9c>
 800ae52:	3c01      	subs	r4, #1
 800ae54:	e7c7      	b.n	800ade6 <quorem+0x96>
 800ae56:	6812      	ldr	r2, [r2, #0]
 800ae58:	3b04      	subs	r3, #4
 800ae5a:	2a00      	cmp	r2, #0
 800ae5c:	d1f0      	bne.n	800ae40 <quorem+0xf0>
 800ae5e:	3c01      	subs	r4, #1
 800ae60:	e7eb      	b.n	800ae3a <quorem+0xea>
 800ae62:	2000      	movs	r0, #0
 800ae64:	e7ee      	b.n	800ae44 <quorem+0xf4>
	...

0800ae68 <_dtoa_r>:
 800ae68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae6c:	ed2d 8b02 	vpush	{d8}
 800ae70:	ec57 6b10 	vmov	r6, r7, d0
 800ae74:	b095      	sub	sp, #84	; 0x54
 800ae76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ae7c:	9105      	str	r1, [sp, #20]
 800ae7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ae82:	4604      	mov	r4, r0
 800ae84:	9209      	str	r2, [sp, #36]	; 0x24
 800ae86:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae88:	b975      	cbnz	r5, 800aea8 <_dtoa_r+0x40>
 800ae8a:	2010      	movs	r0, #16
 800ae8c:	f000 fddc 	bl	800ba48 <malloc>
 800ae90:	4602      	mov	r2, r0
 800ae92:	6260      	str	r0, [r4, #36]	; 0x24
 800ae94:	b920      	cbnz	r0, 800aea0 <_dtoa_r+0x38>
 800ae96:	4bb2      	ldr	r3, [pc, #712]	; (800b160 <_dtoa_r+0x2f8>)
 800ae98:	21ea      	movs	r1, #234	; 0xea
 800ae9a:	48b2      	ldr	r0, [pc, #712]	; (800b164 <_dtoa_r+0x2fc>)
 800ae9c:	f001 fb8e 	bl	800c5bc <__assert_func>
 800aea0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800aea4:	6005      	str	r5, [r0, #0]
 800aea6:	60c5      	str	r5, [r0, #12]
 800aea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeaa:	6819      	ldr	r1, [r3, #0]
 800aeac:	b151      	cbz	r1, 800aec4 <_dtoa_r+0x5c>
 800aeae:	685a      	ldr	r2, [r3, #4]
 800aeb0:	604a      	str	r2, [r1, #4]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	4093      	lsls	r3, r2
 800aeb6:	608b      	str	r3, [r1, #8]
 800aeb8:	4620      	mov	r0, r4
 800aeba:	f000 fe1b 	bl	800baf4 <_Bfree>
 800aebe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec0:	2200      	movs	r2, #0
 800aec2:	601a      	str	r2, [r3, #0]
 800aec4:	1e3b      	subs	r3, r7, #0
 800aec6:	bfb9      	ittee	lt
 800aec8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800aecc:	9303      	strlt	r3, [sp, #12]
 800aece:	2300      	movge	r3, #0
 800aed0:	f8c8 3000 	strge.w	r3, [r8]
 800aed4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800aed8:	4ba3      	ldr	r3, [pc, #652]	; (800b168 <_dtoa_r+0x300>)
 800aeda:	bfbc      	itt	lt
 800aedc:	2201      	movlt	r2, #1
 800aede:	f8c8 2000 	strlt.w	r2, [r8]
 800aee2:	ea33 0309 	bics.w	r3, r3, r9
 800aee6:	d11b      	bne.n	800af20 <_dtoa_r+0xb8>
 800aee8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeea:	f242 730f 	movw	r3, #9999	; 0x270f
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aef4:	4333      	orrs	r3, r6
 800aef6:	f000 857a 	beq.w	800b9ee <_dtoa_r+0xb86>
 800aefa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aefc:	b963      	cbnz	r3, 800af18 <_dtoa_r+0xb0>
 800aefe:	4b9b      	ldr	r3, [pc, #620]	; (800b16c <_dtoa_r+0x304>)
 800af00:	e024      	b.n	800af4c <_dtoa_r+0xe4>
 800af02:	4b9b      	ldr	r3, [pc, #620]	; (800b170 <_dtoa_r+0x308>)
 800af04:	9300      	str	r3, [sp, #0]
 800af06:	3308      	adds	r3, #8
 800af08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	9800      	ldr	r0, [sp, #0]
 800af0e:	b015      	add	sp, #84	; 0x54
 800af10:	ecbd 8b02 	vpop	{d8}
 800af14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af18:	4b94      	ldr	r3, [pc, #592]	; (800b16c <_dtoa_r+0x304>)
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	3303      	adds	r3, #3
 800af1e:	e7f3      	b.n	800af08 <_dtoa_r+0xa0>
 800af20:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af24:	2200      	movs	r2, #0
 800af26:	ec51 0b17 	vmov	r0, r1, d7
 800af2a:	2300      	movs	r3, #0
 800af2c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800af30:	f7f5 fdea 	bl	8000b08 <__aeabi_dcmpeq>
 800af34:	4680      	mov	r8, r0
 800af36:	b158      	cbz	r0, 800af50 <_dtoa_r+0xe8>
 800af38:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af3a:	2301      	movs	r3, #1
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af40:	2b00      	cmp	r3, #0
 800af42:	f000 8551 	beq.w	800b9e8 <_dtoa_r+0xb80>
 800af46:	488b      	ldr	r0, [pc, #556]	; (800b174 <_dtoa_r+0x30c>)
 800af48:	6018      	str	r0, [r3, #0]
 800af4a:	1e43      	subs	r3, r0, #1
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	e7dd      	b.n	800af0c <_dtoa_r+0xa4>
 800af50:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800af54:	aa12      	add	r2, sp, #72	; 0x48
 800af56:	a913      	add	r1, sp, #76	; 0x4c
 800af58:	4620      	mov	r0, r4
 800af5a:	f001 f8ad 	bl	800c0b8 <__d2b>
 800af5e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af62:	4683      	mov	fp, r0
 800af64:	2d00      	cmp	r5, #0
 800af66:	d07c      	beq.n	800b062 <_dtoa_r+0x1fa>
 800af68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af6a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800af6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af72:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800af76:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800af7a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800af7e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af82:	4b7d      	ldr	r3, [pc, #500]	; (800b178 <_dtoa_r+0x310>)
 800af84:	2200      	movs	r2, #0
 800af86:	4630      	mov	r0, r6
 800af88:	4639      	mov	r1, r7
 800af8a:	f7f5 f99d 	bl	80002c8 <__aeabi_dsub>
 800af8e:	a36e      	add	r3, pc, #440	; (adr r3, 800b148 <_dtoa_r+0x2e0>)
 800af90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af94:	f7f5 fb50 	bl	8000638 <__aeabi_dmul>
 800af98:	a36d      	add	r3, pc, #436	; (adr r3, 800b150 <_dtoa_r+0x2e8>)
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	f7f5 f995 	bl	80002cc <__adddf3>
 800afa2:	4606      	mov	r6, r0
 800afa4:	4628      	mov	r0, r5
 800afa6:	460f      	mov	r7, r1
 800afa8:	f7f5 fadc 	bl	8000564 <__aeabi_i2d>
 800afac:	a36a      	add	r3, pc, #424	; (adr r3, 800b158 <_dtoa_r+0x2f0>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 fb41 	bl	8000638 <__aeabi_dmul>
 800afb6:	4602      	mov	r2, r0
 800afb8:	460b      	mov	r3, r1
 800afba:	4630      	mov	r0, r6
 800afbc:	4639      	mov	r1, r7
 800afbe:	f7f5 f985 	bl	80002cc <__adddf3>
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	f7f5 fde7 	bl	8000b98 <__aeabi_d2iz>
 800afca:	2200      	movs	r2, #0
 800afcc:	4682      	mov	sl, r0
 800afce:	2300      	movs	r3, #0
 800afd0:	4630      	mov	r0, r6
 800afd2:	4639      	mov	r1, r7
 800afd4:	f7f5 fda2 	bl	8000b1c <__aeabi_dcmplt>
 800afd8:	b148      	cbz	r0, 800afee <_dtoa_r+0x186>
 800afda:	4650      	mov	r0, sl
 800afdc:	f7f5 fac2 	bl	8000564 <__aeabi_i2d>
 800afe0:	4632      	mov	r2, r6
 800afe2:	463b      	mov	r3, r7
 800afe4:	f7f5 fd90 	bl	8000b08 <__aeabi_dcmpeq>
 800afe8:	b908      	cbnz	r0, 800afee <_dtoa_r+0x186>
 800afea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800afee:	f1ba 0f16 	cmp.w	sl, #22
 800aff2:	d854      	bhi.n	800b09e <_dtoa_r+0x236>
 800aff4:	4b61      	ldr	r3, [pc, #388]	; (800b17c <_dtoa_r+0x314>)
 800aff6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800affa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b002:	f7f5 fd8b 	bl	8000b1c <__aeabi_dcmplt>
 800b006:	2800      	cmp	r0, #0
 800b008:	d04b      	beq.n	800b0a2 <_dtoa_r+0x23a>
 800b00a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b00e:	2300      	movs	r3, #0
 800b010:	930e      	str	r3, [sp, #56]	; 0x38
 800b012:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b014:	1b5d      	subs	r5, r3, r5
 800b016:	1e6b      	subs	r3, r5, #1
 800b018:	9304      	str	r3, [sp, #16]
 800b01a:	bf43      	ittte	mi
 800b01c:	2300      	movmi	r3, #0
 800b01e:	f1c5 0801 	rsbmi	r8, r5, #1
 800b022:	9304      	strmi	r3, [sp, #16]
 800b024:	f04f 0800 	movpl.w	r8, #0
 800b028:	f1ba 0f00 	cmp.w	sl, #0
 800b02c:	db3b      	blt.n	800b0a6 <_dtoa_r+0x23e>
 800b02e:	9b04      	ldr	r3, [sp, #16]
 800b030:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b034:	4453      	add	r3, sl
 800b036:	9304      	str	r3, [sp, #16]
 800b038:	2300      	movs	r3, #0
 800b03a:	9306      	str	r3, [sp, #24]
 800b03c:	9b05      	ldr	r3, [sp, #20]
 800b03e:	2b09      	cmp	r3, #9
 800b040:	d869      	bhi.n	800b116 <_dtoa_r+0x2ae>
 800b042:	2b05      	cmp	r3, #5
 800b044:	bfc4      	itt	gt
 800b046:	3b04      	subgt	r3, #4
 800b048:	9305      	strgt	r3, [sp, #20]
 800b04a:	9b05      	ldr	r3, [sp, #20]
 800b04c:	f1a3 0302 	sub.w	r3, r3, #2
 800b050:	bfcc      	ite	gt
 800b052:	2500      	movgt	r5, #0
 800b054:	2501      	movle	r5, #1
 800b056:	2b03      	cmp	r3, #3
 800b058:	d869      	bhi.n	800b12e <_dtoa_r+0x2c6>
 800b05a:	e8df f003 	tbb	[pc, r3]
 800b05e:	4e2c      	.short	0x4e2c
 800b060:	5a4c      	.short	0x5a4c
 800b062:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b066:	441d      	add	r5, r3
 800b068:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b06c:	2b20      	cmp	r3, #32
 800b06e:	bfc1      	itttt	gt
 800b070:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b074:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b078:	fa09 f303 	lslgt.w	r3, r9, r3
 800b07c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b080:	bfda      	itte	le
 800b082:	f1c3 0320 	rsble	r3, r3, #32
 800b086:	fa06 f003 	lslle.w	r0, r6, r3
 800b08a:	4318      	orrgt	r0, r3
 800b08c:	f7f5 fa5a 	bl	8000544 <__aeabi_ui2d>
 800b090:	2301      	movs	r3, #1
 800b092:	4606      	mov	r6, r0
 800b094:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b098:	3d01      	subs	r5, #1
 800b09a:	9310      	str	r3, [sp, #64]	; 0x40
 800b09c:	e771      	b.n	800af82 <_dtoa_r+0x11a>
 800b09e:	2301      	movs	r3, #1
 800b0a0:	e7b6      	b.n	800b010 <_dtoa_r+0x1a8>
 800b0a2:	900e      	str	r0, [sp, #56]	; 0x38
 800b0a4:	e7b5      	b.n	800b012 <_dtoa_r+0x1aa>
 800b0a6:	f1ca 0300 	rsb	r3, sl, #0
 800b0aa:	9306      	str	r3, [sp, #24]
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	eba8 080a 	sub.w	r8, r8, sl
 800b0b2:	930d      	str	r3, [sp, #52]	; 0x34
 800b0b4:	e7c2      	b.n	800b03c <_dtoa_r+0x1d4>
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	9308      	str	r3, [sp, #32]
 800b0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	dc39      	bgt.n	800b134 <_dtoa_r+0x2cc>
 800b0c0:	f04f 0901 	mov.w	r9, #1
 800b0c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b0c8:	464b      	mov	r3, r9
 800b0ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b0ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	6042      	str	r2, [r0, #4]
 800b0d4:	2204      	movs	r2, #4
 800b0d6:	f102 0614 	add.w	r6, r2, #20
 800b0da:	429e      	cmp	r6, r3
 800b0dc:	6841      	ldr	r1, [r0, #4]
 800b0de:	d92f      	bls.n	800b140 <_dtoa_r+0x2d8>
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 fcc7 	bl	800ba74 <_Balloc>
 800b0e6:	9000      	str	r0, [sp, #0]
 800b0e8:	2800      	cmp	r0, #0
 800b0ea:	d14b      	bne.n	800b184 <_dtoa_r+0x31c>
 800b0ec:	4b24      	ldr	r3, [pc, #144]	; (800b180 <_dtoa_r+0x318>)
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b0f4:	e6d1      	b.n	800ae9a <_dtoa_r+0x32>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e7de      	b.n	800b0b8 <_dtoa_r+0x250>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9308      	str	r3, [sp, #32]
 800b0fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b100:	eb0a 0903 	add.w	r9, sl, r3
 800b104:	f109 0301 	add.w	r3, r9, #1
 800b108:	2b01      	cmp	r3, #1
 800b10a:	9301      	str	r3, [sp, #4]
 800b10c:	bfb8      	it	lt
 800b10e:	2301      	movlt	r3, #1
 800b110:	e7dd      	b.n	800b0ce <_dtoa_r+0x266>
 800b112:	2301      	movs	r3, #1
 800b114:	e7f2      	b.n	800b0fc <_dtoa_r+0x294>
 800b116:	2501      	movs	r5, #1
 800b118:	2300      	movs	r3, #0
 800b11a:	9305      	str	r3, [sp, #20]
 800b11c:	9508      	str	r5, [sp, #32]
 800b11e:	f04f 39ff 	mov.w	r9, #4294967295
 800b122:	2200      	movs	r2, #0
 800b124:	f8cd 9004 	str.w	r9, [sp, #4]
 800b128:	2312      	movs	r3, #18
 800b12a:	9209      	str	r2, [sp, #36]	; 0x24
 800b12c:	e7cf      	b.n	800b0ce <_dtoa_r+0x266>
 800b12e:	2301      	movs	r3, #1
 800b130:	9308      	str	r3, [sp, #32]
 800b132:	e7f4      	b.n	800b11e <_dtoa_r+0x2b6>
 800b134:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b138:	f8cd 9004 	str.w	r9, [sp, #4]
 800b13c:	464b      	mov	r3, r9
 800b13e:	e7c6      	b.n	800b0ce <_dtoa_r+0x266>
 800b140:	3101      	adds	r1, #1
 800b142:	6041      	str	r1, [r0, #4]
 800b144:	0052      	lsls	r2, r2, #1
 800b146:	e7c6      	b.n	800b0d6 <_dtoa_r+0x26e>
 800b148:	636f4361 	.word	0x636f4361
 800b14c:	3fd287a7 	.word	0x3fd287a7
 800b150:	8b60c8b3 	.word	0x8b60c8b3
 800b154:	3fc68a28 	.word	0x3fc68a28
 800b158:	509f79fb 	.word	0x509f79fb
 800b15c:	3fd34413 	.word	0x3fd34413
 800b160:	0800eca9 	.word	0x0800eca9
 800b164:	0800ecc0 	.word	0x0800ecc0
 800b168:	7ff00000 	.word	0x7ff00000
 800b16c:	0800eca5 	.word	0x0800eca5
 800b170:	0800ec9c 	.word	0x0800ec9c
 800b174:	0800ec79 	.word	0x0800ec79
 800b178:	3ff80000 	.word	0x3ff80000
 800b17c:	0800edb8 	.word	0x0800edb8
 800b180:	0800ed1f 	.word	0x0800ed1f
 800b184:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b186:	9a00      	ldr	r2, [sp, #0]
 800b188:	601a      	str	r2, [r3, #0]
 800b18a:	9b01      	ldr	r3, [sp, #4]
 800b18c:	2b0e      	cmp	r3, #14
 800b18e:	f200 80ad 	bhi.w	800b2ec <_dtoa_r+0x484>
 800b192:	2d00      	cmp	r5, #0
 800b194:	f000 80aa 	beq.w	800b2ec <_dtoa_r+0x484>
 800b198:	f1ba 0f00 	cmp.w	sl, #0
 800b19c:	dd36      	ble.n	800b20c <_dtoa_r+0x3a4>
 800b19e:	4ac3      	ldr	r2, [pc, #780]	; (800b4ac <_dtoa_r+0x644>)
 800b1a0:	f00a 030f 	and.w	r3, sl, #15
 800b1a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b1a8:	ed93 7b00 	vldr	d7, [r3]
 800b1ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b1b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b1b4:	eeb0 8a47 	vmov.f32	s16, s14
 800b1b8:	eef0 8a67 	vmov.f32	s17, s15
 800b1bc:	d016      	beq.n	800b1ec <_dtoa_r+0x384>
 800b1be:	4bbc      	ldr	r3, [pc, #752]	; (800b4b0 <_dtoa_r+0x648>)
 800b1c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b1c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1c8:	f7f5 fb60 	bl	800088c <__aeabi_ddiv>
 800b1cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1d0:	f007 070f 	and.w	r7, r7, #15
 800b1d4:	2503      	movs	r5, #3
 800b1d6:	4eb6      	ldr	r6, [pc, #728]	; (800b4b0 <_dtoa_r+0x648>)
 800b1d8:	b957      	cbnz	r7, 800b1f0 <_dtoa_r+0x388>
 800b1da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1de:	ec53 2b18 	vmov	r2, r3, d8
 800b1e2:	f7f5 fb53 	bl	800088c <__aeabi_ddiv>
 800b1e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ea:	e029      	b.n	800b240 <_dtoa_r+0x3d8>
 800b1ec:	2502      	movs	r5, #2
 800b1ee:	e7f2      	b.n	800b1d6 <_dtoa_r+0x36e>
 800b1f0:	07f9      	lsls	r1, r7, #31
 800b1f2:	d508      	bpl.n	800b206 <_dtoa_r+0x39e>
 800b1f4:	ec51 0b18 	vmov	r0, r1, d8
 800b1f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b1fc:	f7f5 fa1c 	bl	8000638 <__aeabi_dmul>
 800b200:	ec41 0b18 	vmov	d8, r0, r1
 800b204:	3501      	adds	r5, #1
 800b206:	107f      	asrs	r7, r7, #1
 800b208:	3608      	adds	r6, #8
 800b20a:	e7e5      	b.n	800b1d8 <_dtoa_r+0x370>
 800b20c:	f000 80a6 	beq.w	800b35c <_dtoa_r+0x4f4>
 800b210:	f1ca 0600 	rsb	r6, sl, #0
 800b214:	4ba5      	ldr	r3, [pc, #660]	; (800b4ac <_dtoa_r+0x644>)
 800b216:	4fa6      	ldr	r7, [pc, #664]	; (800b4b0 <_dtoa_r+0x648>)
 800b218:	f006 020f 	and.w	r2, r6, #15
 800b21c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b228:	f7f5 fa06 	bl	8000638 <__aeabi_dmul>
 800b22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b230:	1136      	asrs	r6, r6, #4
 800b232:	2300      	movs	r3, #0
 800b234:	2502      	movs	r5, #2
 800b236:	2e00      	cmp	r6, #0
 800b238:	f040 8085 	bne.w	800b346 <_dtoa_r+0x4de>
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d1d2      	bne.n	800b1e6 <_dtoa_r+0x37e>
 800b240:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b242:	2b00      	cmp	r3, #0
 800b244:	f000 808c 	beq.w	800b360 <_dtoa_r+0x4f8>
 800b248:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b24c:	4b99      	ldr	r3, [pc, #612]	; (800b4b4 <_dtoa_r+0x64c>)
 800b24e:	2200      	movs	r2, #0
 800b250:	4630      	mov	r0, r6
 800b252:	4639      	mov	r1, r7
 800b254:	f7f5 fc62 	bl	8000b1c <__aeabi_dcmplt>
 800b258:	2800      	cmp	r0, #0
 800b25a:	f000 8081 	beq.w	800b360 <_dtoa_r+0x4f8>
 800b25e:	9b01      	ldr	r3, [sp, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d07d      	beq.n	800b360 <_dtoa_r+0x4f8>
 800b264:	f1b9 0f00 	cmp.w	r9, #0
 800b268:	dd3c      	ble.n	800b2e4 <_dtoa_r+0x47c>
 800b26a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b26e:	9307      	str	r3, [sp, #28]
 800b270:	2200      	movs	r2, #0
 800b272:	4b91      	ldr	r3, [pc, #580]	; (800b4b8 <_dtoa_r+0x650>)
 800b274:	4630      	mov	r0, r6
 800b276:	4639      	mov	r1, r7
 800b278:	f7f5 f9de 	bl	8000638 <__aeabi_dmul>
 800b27c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b280:	3501      	adds	r5, #1
 800b282:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b286:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b28a:	4628      	mov	r0, r5
 800b28c:	f7f5 f96a 	bl	8000564 <__aeabi_i2d>
 800b290:	4632      	mov	r2, r6
 800b292:	463b      	mov	r3, r7
 800b294:	f7f5 f9d0 	bl	8000638 <__aeabi_dmul>
 800b298:	4b88      	ldr	r3, [pc, #544]	; (800b4bc <_dtoa_r+0x654>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	f7f5 f816 	bl	80002cc <__adddf3>
 800b2a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b2a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a8:	9303      	str	r3, [sp, #12]
 800b2aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d15c      	bne.n	800b36a <_dtoa_r+0x502>
 800b2b0:	4b83      	ldr	r3, [pc, #524]	; (800b4c0 <_dtoa_r+0x658>)
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	4639      	mov	r1, r7
 800b2b8:	f7f5 f806 	bl	80002c8 <__aeabi_dsub>
 800b2bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2c0:	4606      	mov	r6, r0
 800b2c2:	460f      	mov	r7, r1
 800b2c4:	f7f5 fc48 	bl	8000b58 <__aeabi_dcmpgt>
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	f040 8296 	bne.w	800b7fa <_dtoa_r+0x992>
 800b2ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b2d8:	4639      	mov	r1, r7
 800b2da:	f7f5 fc1f 	bl	8000b1c <__aeabi_dcmplt>
 800b2de:	2800      	cmp	r0, #0
 800b2e0:	f040 8288 	bne.w	800b7f4 <_dtoa_r+0x98c>
 800b2e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b2e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	f2c0 8158 	blt.w	800b5a4 <_dtoa_r+0x73c>
 800b2f4:	f1ba 0f0e 	cmp.w	sl, #14
 800b2f8:	f300 8154 	bgt.w	800b5a4 <_dtoa_r+0x73c>
 800b2fc:	4b6b      	ldr	r3, [pc, #428]	; (800b4ac <_dtoa_r+0x644>)
 800b2fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b302:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f280 80e3 	bge.w	800b4d4 <_dtoa_r+0x66c>
 800b30e:	9b01      	ldr	r3, [sp, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f300 80df 	bgt.w	800b4d4 <_dtoa_r+0x66c>
 800b316:	f040 826d 	bne.w	800b7f4 <_dtoa_r+0x98c>
 800b31a:	4b69      	ldr	r3, [pc, #420]	; (800b4c0 <_dtoa_r+0x658>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	4640      	mov	r0, r8
 800b320:	4649      	mov	r1, r9
 800b322:	f7f5 f989 	bl	8000638 <__aeabi_dmul>
 800b326:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b32a:	f7f5 fc0b 	bl	8000b44 <__aeabi_dcmpge>
 800b32e:	9e01      	ldr	r6, [sp, #4]
 800b330:	4637      	mov	r7, r6
 800b332:	2800      	cmp	r0, #0
 800b334:	f040 8243 	bne.w	800b7be <_dtoa_r+0x956>
 800b338:	9d00      	ldr	r5, [sp, #0]
 800b33a:	2331      	movs	r3, #49	; 0x31
 800b33c:	f805 3b01 	strb.w	r3, [r5], #1
 800b340:	f10a 0a01 	add.w	sl, sl, #1
 800b344:	e23f      	b.n	800b7c6 <_dtoa_r+0x95e>
 800b346:	07f2      	lsls	r2, r6, #31
 800b348:	d505      	bpl.n	800b356 <_dtoa_r+0x4ee>
 800b34a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b34e:	f7f5 f973 	bl	8000638 <__aeabi_dmul>
 800b352:	3501      	adds	r5, #1
 800b354:	2301      	movs	r3, #1
 800b356:	1076      	asrs	r6, r6, #1
 800b358:	3708      	adds	r7, #8
 800b35a:	e76c      	b.n	800b236 <_dtoa_r+0x3ce>
 800b35c:	2502      	movs	r5, #2
 800b35e:	e76f      	b.n	800b240 <_dtoa_r+0x3d8>
 800b360:	9b01      	ldr	r3, [sp, #4]
 800b362:	f8cd a01c 	str.w	sl, [sp, #28]
 800b366:	930c      	str	r3, [sp, #48]	; 0x30
 800b368:	e78d      	b.n	800b286 <_dtoa_r+0x41e>
 800b36a:	9900      	ldr	r1, [sp, #0]
 800b36c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b36e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b370:	4b4e      	ldr	r3, [pc, #312]	; (800b4ac <_dtoa_r+0x644>)
 800b372:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b376:	4401      	add	r1, r0
 800b378:	9102      	str	r1, [sp, #8]
 800b37a:	9908      	ldr	r1, [sp, #32]
 800b37c:	eeb0 8a47 	vmov.f32	s16, s14
 800b380:	eef0 8a67 	vmov.f32	s17, s15
 800b384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b38c:	2900      	cmp	r1, #0
 800b38e:	d045      	beq.n	800b41c <_dtoa_r+0x5b4>
 800b390:	494c      	ldr	r1, [pc, #304]	; (800b4c4 <_dtoa_r+0x65c>)
 800b392:	2000      	movs	r0, #0
 800b394:	f7f5 fa7a 	bl	800088c <__aeabi_ddiv>
 800b398:	ec53 2b18 	vmov	r2, r3, d8
 800b39c:	f7f4 ff94 	bl	80002c8 <__aeabi_dsub>
 800b3a0:	9d00      	ldr	r5, [sp, #0]
 800b3a2:	ec41 0b18 	vmov	d8, r0, r1
 800b3a6:	4639      	mov	r1, r7
 800b3a8:	4630      	mov	r0, r6
 800b3aa:	f7f5 fbf5 	bl	8000b98 <__aeabi_d2iz>
 800b3ae:	900c      	str	r0, [sp, #48]	; 0x30
 800b3b0:	f7f5 f8d8 	bl	8000564 <__aeabi_i2d>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	460b      	mov	r3, r1
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	4639      	mov	r1, r7
 800b3bc:	f7f4 ff84 	bl	80002c8 <__aeabi_dsub>
 800b3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3c2:	3330      	adds	r3, #48	; 0x30
 800b3c4:	f805 3b01 	strb.w	r3, [r5], #1
 800b3c8:	ec53 2b18 	vmov	r2, r3, d8
 800b3cc:	4606      	mov	r6, r0
 800b3ce:	460f      	mov	r7, r1
 800b3d0:	f7f5 fba4 	bl	8000b1c <__aeabi_dcmplt>
 800b3d4:	2800      	cmp	r0, #0
 800b3d6:	d165      	bne.n	800b4a4 <_dtoa_r+0x63c>
 800b3d8:	4632      	mov	r2, r6
 800b3da:	463b      	mov	r3, r7
 800b3dc:	4935      	ldr	r1, [pc, #212]	; (800b4b4 <_dtoa_r+0x64c>)
 800b3de:	2000      	movs	r0, #0
 800b3e0:	f7f4 ff72 	bl	80002c8 <__aeabi_dsub>
 800b3e4:	ec53 2b18 	vmov	r2, r3, d8
 800b3e8:	f7f5 fb98 	bl	8000b1c <__aeabi_dcmplt>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	f040 80b9 	bne.w	800b564 <_dtoa_r+0x6fc>
 800b3f2:	9b02      	ldr	r3, [sp, #8]
 800b3f4:	429d      	cmp	r5, r3
 800b3f6:	f43f af75 	beq.w	800b2e4 <_dtoa_r+0x47c>
 800b3fa:	4b2f      	ldr	r3, [pc, #188]	; (800b4b8 <_dtoa_r+0x650>)
 800b3fc:	ec51 0b18 	vmov	r0, r1, d8
 800b400:	2200      	movs	r2, #0
 800b402:	f7f5 f919 	bl	8000638 <__aeabi_dmul>
 800b406:	4b2c      	ldr	r3, [pc, #176]	; (800b4b8 <_dtoa_r+0x650>)
 800b408:	ec41 0b18 	vmov	d8, r0, r1
 800b40c:	2200      	movs	r2, #0
 800b40e:	4630      	mov	r0, r6
 800b410:	4639      	mov	r1, r7
 800b412:	f7f5 f911 	bl	8000638 <__aeabi_dmul>
 800b416:	4606      	mov	r6, r0
 800b418:	460f      	mov	r7, r1
 800b41a:	e7c4      	b.n	800b3a6 <_dtoa_r+0x53e>
 800b41c:	ec51 0b17 	vmov	r0, r1, d7
 800b420:	f7f5 f90a 	bl	8000638 <__aeabi_dmul>
 800b424:	9b02      	ldr	r3, [sp, #8]
 800b426:	9d00      	ldr	r5, [sp, #0]
 800b428:	930c      	str	r3, [sp, #48]	; 0x30
 800b42a:	ec41 0b18 	vmov	d8, r0, r1
 800b42e:	4639      	mov	r1, r7
 800b430:	4630      	mov	r0, r6
 800b432:	f7f5 fbb1 	bl	8000b98 <__aeabi_d2iz>
 800b436:	9011      	str	r0, [sp, #68]	; 0x44
 800b438:	f7f5 f894 	bl	8000564 <__aeabi_i2d>
 800b43c:	4602      	mov	r2, r0
 800b43e:	460b      	mov	r3, r1
 800b440:	4630      	mov	r0, r6
 800b442:	4639      	mov	r1, r7
 800b444:	f7f4 ff40 	bl	80002c8 <__aeabi_dsub>
 800b448:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b44a:	3330      	adds	r3, #48	; 0x30
 800b44c:	f805 3b01 	strb.w	r3, [r5], #1
 800b450:	9b02      	ldr	r3, [sp, #8]
 800b452:	429d      	cmp	r5, r3
 800b454:	4606      	mov	r6, r0
 800b456:	460f      	mov	r7, r1
 800b458:	f04f 0200 	mov.w	r2, #0
 800b45c:	d134      	bne.n	800b4c8 <_dtoa_r+0x660>
 800b45e:	4b19      	ldr	r3, [pc, #100]	; (800b4c4 <_dtoa_r+0x65c>)
 800b460:	ec51 0b18 	vmov	r0, r1, d8
 800b464:	f7f4 ff32 	bl	80002cc <__adddf3>
 800b468:	4602      	mov	r2, r0
 800b46a:	460b      	mov	r3, r1
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f5 fb72 	bl	8000b58 <__aeabi_dcmpgt>
 800b474:	2800      	cmp	r0, #0
 800b476:	d175      	bne.n	800b564 <_dtoa_r+0x6fc>
 800b478:	ec53 2b18 	vmov	r2, r3, d8
 800b47c:	4911      	ldr	r1, [pc, #68]	; (800b4c4 <_dtoa_r+0x65c>)
 800b47e:	2000      	movs	r0, #0
 800b480:	f7f4 ff22 	bl	80002c8 <__aeabi_dsub>
 800b484:	4602      	mov	r2, r0
 800b486:	460b      	mov	r3, r1
 800b488:	4630      	mov	r0, r6
 800b48a:	4639      	mov	r1, r7
 800b48c:	f7f5 fb46 	bl	8000b1c <__aeabi_dcmplt>
 800b490:	2800      	cmp	r0, #0
 800b492:	f43f af27 	beq.w	800b2e4 <_dtoa_r+0x47c>
 800b496:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b498:	1e6b      	subs	r3, r5, #1
 800b49a:	930c      	str	r3, [sp, #48]	; 0x30
 800b49c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b4a0:	2b30      	cmp	r3, #48	; 0x30
 800b4a2:	d0f8      	beq.n	800b496 <_dtoa_r+0x62e>
 800b4a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b4a8:	e04a      	b.n	800b540 <_dtoa_r+0x6d8>
 800b4aa:	bf00      	nop
 800b4ac:	0800edb8 	.word	0x0800edb8
 800b4b0:	0800ed90 	.word	0x0800ed90
 800b4b4:	3ff00000 	.word	0x3ff00000
 800b4b8:	40240000 	.word	0x40240000
 800b4bc:	401c0000 	.word	0x401c0000
 800b4c0:	40140000 	.word	0x40140000
 800b4c4:	3fe00000 	.word	0x3fe00000
 800b4c8:	4baf      	ldr	r3, [pc, #700]	; (800b788 <_dtoa_r+0x920>)
 800b4ca:	f7f5 f8b5 	bl	8000638 <__aeabi_dmul>
 800b4ce:	4606      	mov	r6, r0
 800b4d0:	460f      	mov	r7, r1
 800b4d2:	e7ac      	b.n	800b42e <_dtoa_r+0x5c6>
 800b4d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b4d8:	9d00      	ldr	r5, [sp, #0]
 800b4da:	4642      	mov	r2, r8
 800b4dc:	464b      	mov	r3, r9
 800b4de:	4630      	mov	r0, r6
 800b4e0:	4639      	mov	r1, r7
 800b4e2:	f7f5 f9d3 	bl	800088c <__aeabi_ddiv>
 800b4e6:	f7f5 fb57 	bl	8000b98 <__aeabi_d2iz>
 800b4ea:	9002      	str	r0, [sp, #8]
 800b4ec:	f7f5 f83a 	bl	8000564 <__aeabi_i2d>
 800b4f0:	4642      	mov	r2, r8
 800b4f2:	464b      	mov	r3, r9
 800b4f4:	f7f5 f8a0 	bl	8000638 <__aeabi_dmul>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	460b      	mov	r3, r1
 800b4fc:	4630      	mov	r0, r6
 800b4fe:	4639      	mov	r1, r7
 800b500:	f7f4 fee2 	bl	80002c8 <__aeabi_dsub>
 800b504:	9e02      	ldr	r6, [sp, #8]
 800b506:	9f01      	ldr	r7, [sp, #4]
 800b508:	3630      	adds	r6, #48	; 0x30
 800b50a:	f805 6b01 	strb.w	r6, [r5], #1
 800b50e:	9e00      	ldr	r6, [sp, #0]
 800b510:	1bae      	subs	r6, r5, r6
 800b512:	42b7      	cmp	r7, r6
 800b514:	4602      	mov	r2, r0
 800b516:	460b      	mov	r3, r1
 800b518:	d137      	bne.n	800b58a <_dtoa_r+0x722>
 800b51a:	f7f4 fed7 	bl	80002cc <__adddf3>
 800b51e:	4642      	mov	r2, r8
 800b520:	464b      	mov	r3, r9
 800b522:	4606      	mov	r6, r0
 800b524:	460f      	mov	r7, r1
 800b526:	f7f5 fb17 	bl	8000b58 <__aeabi_dcmpgt>
 800b52a:	b9c8      	cbnz	r0, 800b560 <_dtoa_r+0x6f8>
 800b52c:	4642      	mov	r2, r8
 800b52e:	464b      	mov	r3, r9
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 fae8 	bl	8000b08 <__aeabi_dcmpeq>
 800b538:	b110      	cbz	r0, 800b540 <_dtoa_r+0x6d8>
 800b53a:	9b02      	ldr	r3, [sp, #8]
 800b53c:	07d9      	lsls	r1, r3, #31
 800b53e:	d40f      	bmi.n	800b560 <_dtoa_r+0x6f8>
 800b540:	4620      	mov	r0, r4
 800b542:	4659      	mov	r1, fp
 800b544:	f000 fad6 	bl	800baf4 <_Bfree>
 800b548:	2300      	movs	r3, #0
 800b54a:	702b      	strb	r3, [r5, #0]
 800b54c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b54e:	f10a 0001 	add.w	r0, sl, #1
 800b552:	6018      	str	r0, [r3, #0]
 800b554:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b556:	2b00      	cmp	r3, #0
 800b558:	f43f acd8 	beq.w	800af0c <_dtoa_r+0xa4>
 800b55c:	601d      	str	r5, [r3, #0]
 800b55e:	e4d5      	b.n	800af0c <_dtoa_r+0xa4>
 800b560:	f8cd a01c 	str.w	sl, [sp, #28]
 800b564:	462b      	mov	r3, r5
 800b566:	461d      	mov	r5, r3
 800b568:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b56c:	2a39      	cmp	r2, #57	; 0x39
 800b56e:	d108      	bne.n	800b582 <_dtoa_r+0x71a>
 800b570:	9a00      	ldr	r2, [sp, #0]
 800b572:	429a      	cmp	r2, r3
 800b574:	d1f7      	bne.n	800b566 <_dtoa_r+0x6fe>
 800b576:	9a07      	ldr	r2, [sp, #28]
 800b578:	9900      	ldr	r1, [sp, #0]
 800b57a:	3201      	adds	r2, #1
 800b57c:	9207      	str	r2, [sp, #28]
 800b57e:	2230      	movs	r2, #48	; 0x30
 800b580:	700a      	strb	r2, [r1, #0]
 800b582:	781a      	ldrb	r2, [r3, #0]
 800b584:	3201      	adds	r2, #1
 800b586:	701a      	strb	r2, [r3, #0]
 800b588:	e78c      	b.n	800b4a4 <_dtoa_r+0x63c>
 800b58a:	4b7f      	ldr	r3, [pc, #508]	; (800b788 <_dtoa_r+0x920>)
 800b58c:	2200      	movs	r2, #0
 800b58e:	f7f5 f853 	bl	8000638 <__aeabi_dmul>
 800b592:	2200      	movs	r2, #0
 800b594:	2300      	movs	r3, #0
 800b596:	4606      	mov	r6, r0
 800b598:	460f      	mov	r7, r1
 800b59a:	f7f5 fab5 	bl	8000b08 <__aeabi_dcmpeq>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d09b      	beq.n	800b4da <_dtoa_r+0x672>
 800b5a2:	e7cd      	b.n	800b540 <_dtoa_r+0x6d8>
 800b5a4:	9a08      	ldr	r2, [sp, #32]
 800b5a6:	2a00      	cmp	r2, #0
 800b5a8:	f000 80c4 	beq.w	800b734 <_dtoa_r+0x8cc>
 800b5ac:	9a05      	ldr	r2, [sp, #20]
 800b5ae:	2a01      	cmp	r2, #1
 800b5b0:	f300 80a8 	bgt.w	800b704 <_dtoa_r+0x89c>
 800b5b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b5b6:	2a00      	cmp	r2, #0
 800b5b8:	f000 80a0 	beq.w	800b6fc <_dtoa_r+0x894>
 800b5bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b5c0:	9e06      	ldr	r6, [sp, #24]
 800b5c2:	4645      	mov	r5, r8
 800b5c4:	9a04      	ldr	r2, [sp, #16]
 800b5c6:	2101      	movs	r1, #1
 800b5c8:	441a      	add	r2, r3
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	4498      	add	r8, r3
 800b5ce:	9204      	str	r2, [sp, #16]
 800b5d0:	f000 fb4c 	bl	800bc6c <__i2b>
 800b5d4:	4607      	mov	r7, r0
 800b5d6:	2d00      	cmp	r5, #0
 800b5d8:	dd0b      	ble.n	800b5f2 <_dtoa_r+0x78a>
 800b5da:	9b04      	ldr	r3, [sp, #16]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd08      	ble.n	800b5f2 <_dtoa_r+0x78a>
 800b5e0:	42ab      	cmp	r3, r5
 800b5e2:	9a04      	ldr	r2, [sp, #16]
 800b5e4:	bfa8      	it	ge
 800b5e6:	462b      	movge	r3, r5
 800b5e8:	eba8 0803 	sub.w	r8, r8, r3
 800b5ec:	1aed      	subs	r5, r5, r3
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	b1fb      	cbz	r3, 800b636 <_dtoa_r+0x7ce>
 800b5f6:	9b08      	ldr	r3, [sp, #32]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f000 809f 	beq.w	800b73c <_dtoa_r+0x8d4>
 800b5fe:	2e00      	cmp	r6, #0
 800b600:	dd11      	ble.n	800b626 <_dtoa_r+0x7be>
 800b602:	4639      	mov	r1, r7
 800b604:	4632      	mov	r2, r6
 800b606:	4620      	mov	r0, r4
 800b608:	f000 fbec 	bl	800bde4 <__pow5mult>
 800b60c:	465a      	mov	r2, fp
 800b60e:	4601      	mov	r1, r0
 800b610:	4607      	mov	r7, r0
 800b612:	4620      	mov	r0, r4
 800b614:	f000 fb40 	bl	800bc98 <__multiply>
 800b618:	4659      	mov	r1, fp
 800b61a:	9007      	str	r0, [sp, #28]
 800b61c:	4620      	mov	r0, r4
 800b61e:	f000 fa69 	bl	800baf4 <_Bfree>
 800b622:	9b07      	ldr	r3, [sp, #28]
 800b624:	469b      	mov	fp, r3
 800b626:	9b06      	ldr	r3, [sp, #24]
 800b628:	1b9a      	subs	r2, r3, r6
 800b62a:	d004      	beq.n	800b636 <_dtoa_r+0x7ce>
 800b62c:	4659      	mov	r1, fp
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 fbd8 	bl	800bde4 <__pow5mult>
 800b634:	4683      	mov	fp, r0
 800b636:	2101      	movs	r1, #1
 800b638:	4620      	mov	r0, r4
 800b63a:	f000 fb17 	bl	800bc6c <__i2b>
 800b63e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b640:	2b00      	cmp	r3, #0
 800b642:	4606      	mov	r6, r0
 800b644:	dd7c      	ble.n	800b740 <_dtoa_r+0x8d8>
 800b646:	461a      	mov	r2, r3
 800b648:	4601      	mov	r1, r0
 800b64a:	4620      	mov	r0, r4
 800b64c:	f000 fbca 	bl	800bde4 <__pow5mult>
 800b650:	9b05      	ldr	r3, [sp, #20]
 800b652:	2b01      	cmp	r3, #1
 800b654:	4606      	mov	r6, r0
 800b656:	dd76      	ble.n	800b746 <_dtoa_r+0x8de>
 800b658:	2300      	movs	r3, #0
 800b65a:	9306      	str	r3, [sp, #24]
 800b65c:	6933      	ldr	r3, [r6, #16]
 800b65e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b662:	6918      	ldr	r0, [r3, #16]
 800b664:	f000 fab2 	bl	800bbcc <__hi0bits>
 800b668:	f1c0 0020 	rsb	r0, r0, #32
 800b66c:	9b04      	ldr	r3, [sp, #16]
 800b66e:	4418      	add	r0, r3
 800b670:	f010 001f 	ands.w	r0, r0, #31
 800b674:	f000 8086 	beq.w	800b784 <_dtoa_r+0x91c>
 800b678:	f1c0 0320 	rsb	r3, r0, #32
 800b67c:	2b04      	cmp	r3, #4
 800b67e:	dd7f      	ble.n	800b780 <_dtoa_r+0x918>
 800b680:	f1c0 001c 	rsb	r0, r0, #28
 800b684:	9b04      	ldr	r3, [sp, #16]
 800b686:	4403      	add	r3, r0
 800b688:	4480      	add	r8, r0
 800b68a:	4405      	add	r5, r0
 800b68c:	9304      	str	r3, [sp, #16]
 800b68e:	f1b8 0f00 	cmp.w	r8, #0
 800b692:	dd05      	ble.n	800b6a0 <_dtoa_r+0x838>
 800b694:	4659      	mov	r1, fp
 800b696:	4642      	mov	r2, r8
 800b698:	4620      	mov	r0, r4
 800b69a:	f000 fbfd 	bl	800be98 <__lshift>
 800b69e:	4683      	mov	fp, r0
 800b6a0:	9b04      	ldr	r3, [sp, #16]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	dd05      	ble.n	800b6b2 <_dtoa_r+0x84a>
 800b6a6:	4631      	mov	r1, r6
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fbf4 	bl	800be98 <__lshift>
 800b6b0:	4606      	mov	r6, r0
 800b6b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d069      	beq.n	800b78c <_dtoa_r+0x924>
 800b6b8:	4631      	mov	r1, r6
 800b6ba:	4658      	mov	r0, fp
 800b6bc:	f000 fc58 	bl	800bf70 <__mcmp>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	da63      	bge.n	800b78c <_dtoa_r+0x924>
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	4659      	mov	r1, fp
 800b6c8:	220a      	movs	r2, #10
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fa34 	bl	800bb38 <__multadd>
 800b6d0:	9b08      	ldr	r3, [sp, #32]
 800b6d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b6d6:	4683      	mov	fp, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f000 818f 	beq.w	800b9fc <_dtoa_r+0xb94>
 800b6de:	4639      	mov	r1, r7
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	220a      	movs	r2, #10
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	f000 fa27 	bl	800bb38 <__multadd>
 800b6ea:	f1b9 0f00 	cmp.w	r9, #0
 800b6ee:	4607      	mov	r7, r0
 800b6f0:	f300 808e 	bgt.w	800b810 <_dtoa_r+0x9a8>
 800b6f4:	9b05      	ldr	r3, [sp, #20]
 800b6f6:	2b02      	cmp	r3, #2
 800b6f8:	dc50      	bgt.n	800b79c <_dtoa_r+0x934>
 800b6fa:	e089      	b.n	800b810 <_dtoa_r+0x9a8>
 800b6fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b702:	e75d      	b.n	800b5c0 <_dtoa_r+0x758>
 800b704:	9b01      	ldr	r3, [sp, #4]
 800b706:	1e5e      	subs	r6, r3, #1
 800b708:	9b06      	ldr	r3, [sp, #24]
 800b70a:	42b3      	cmp	r3, r6
 800b70c:	bfbf      	itttt	lt
 800b70e:	9b06      	ldrlt	r3, [sp, #24]
 800b710:	9606      	strlt	r6, [sp, #24]
 800b712:	1af2      	sublt	r2, r6, r3
 800b714:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800b716:	bfb6      	itet	lt
 800b718:	189b      	addlt	r3, r3, r2
 800b71a:	1b9e      	subge	r6, r3, r6
 800b71c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800b71e:	9b01      	ldr	r3, [sp, #4]
 800b720:	bfb8      	it	lt
 800b722:	2600      	movlt	r6, #0
 800b724:	2b00      	cmp	r3, #0
 800b726:	bfb5      	itete	lt
 800b728:	eba8 0503 	sublt.w	r5, r8, r3
 800b72c:	9b01      	ldrge	r3, [sp, #4]
 800b72e:	2300      	movlt	r3, #0
 800b730:	4645      	movge	r5, r8
 800b732:	e747      	b.n	800b5c4 <_dtoa_r+0x75c>
 800b734:	9e06      	ldr	r6, [sp, #24]
 800b736:	9f08      	ldr	r7, [sp, #32]
 800b738:	4645      	mov	r5, r8
 800b73a:	e74c      	b.n	800b5d6 <_dtoa_r+0x76e>
 800b73c:	9a06      	ldr	r2, [sp, #24]
 800b73e:	e775      	b.n	800b62c <_dtoa_r+0x7c4>
 800b740:	9b05      	ldr	r3, [sp, #20]
 800b742:	2b01      	cmp	r3, #1
 800b744:	dc18      	bgt.n	800b778 <_dtoa_r+0x910>
 800b746:	9b02      	ldr	r3, [sp, #8]
 800b748:	b9b3      	cbnz	r3, 800b778 <_dtoa_r+0x910>
 800b74a:	9b03      	ldr	r3, [sp, #12]
 800b74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b750:	b9a3      	cbnz	r3, 800b77c <_dtoa_r+0x914>
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b758:	0d1b      	lsrs	r3, r3, #20
 800b75a:	051b      	lsls	r3, r3, #20
 800b75c:	b12b      	cbz	r3, 800b76a <_dtoa_r+0x902>
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	3301      	adds	r3, #1
 800b762:	9304      	str	r3, [sp, #16]
 800b764:	f108 0801 	add.w	r8, r8, #1
 800b768:	2301      	movs	r3, #1
 800b76a:	9306      	str	r3, [sp, #24]
 800b76c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f47f af74 	bne.w	800b65c <_dtoa_r+0x7f4>
 800b774:	2001      	movs	r0, #1
 800b776:	e779      	b.n	800b66c <_dtoa_r+0x804>
 800b778:	2300      	movs	r3, #0
 800b77a:	e7f6      	b.n	800b76a <_dtoa_r+0x902>
 800b77c:	9b02      	ldr	r3, [sp, #8]
 800b77e:	e7f4      	b.n	800b76a <_dtoa_r+0x902>
 800b780:	d085      	beq.n	800b68e <_dtoa_r+0x826>
 800b782:	4618      	mov	r0, r3
 800b784:	301c      	adds	r0, #28
 800b786:	e77d      	b.n	800b684 <_dtoa_r+0x81c>
 800b788:	40240000 	.word	0x40240000
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	dc38      	bgt.n	800b804 <_dtoa_r+0x99c>
 800b792:	9b05      	ldr	r3, [sp, #20]
 800b794:	2b02      	cmp	r3, #2
 800b796:	dd35      	ble.n	800b804 <_dtoa_r+0x99c>
 800b798:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b79c:	f1b9 0f00 	cmp.w	r9, #0
 800b7a0:	d10d      	bne.n	800b7be <_dtoa_r+0x956>
 800b7a2:	4631      	mov	r1, r6
 800b7a4:	464b      	mov	r3, r9
 800b7a6:	2205      	movs	r2, #5
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f000 f9c5 	bl	800bb38 <__multadd>
 800b7ae:	4601      	mov	r1, r0
 800b7b0:	4606      	mov	r6, r0
 800b7b2:	4658      	mov	r0, fp
 800b7b4:	f000 fbdc 	bl	800bf70 <__mcmp>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	f73f adbd 	bgt.w	800b338 <_dtoa_r+0x4d0>
 800b7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7c0:	9d00      	ldr	r5, [sp, #0]
 800b7c2:	ea6f 0a03 	mvn.w	sl, r3
 800b7c6:	f04f 0800 	mov.w	r8, #0
 800b7ca:	4631      	mov	r1, r6
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	f000 f991 	bl	800baf4 <_Bfree>
 800b7d2:	2f00      	cmp	r7, #0
 800b7d4:	f43f aeb4 	beq.w	800b540 <_dtoa_r+0x6d8>
 800b7d8:	f1b8 0f00 	cmp.w	r8, #0
 800b7dc:	d005      	beq.n	800b7ea <_dtoa_r+0x982>
 800b7de:	45b8      	cmp	r8, r7
 800b7e0:	d003      	beq.n	800b7ea <_dtoa_r+0x982>
 800b7e2:	4641      	mov	r1, r8
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f000 f985 	bl	800baf4 <_Bfree>
 800b7ea:	4639      	mov	r1, r7
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f000 f981 	bl	800baf4 <_Bfree>
 800b7f2:	e6a5      	b.n	800b540 <_dtoa_r+0x6d8>
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	4637      	mov	r7, r6
 800b7f8:	e7e1      	b.n	800b7be <_dtoa_r+0x956>
 800b7fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b7fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800b800:	4637      	mov	r7, r6
 800b802:	e599      	b.n	800b338 <_dtoa_r+0x4d0>
 800b804:	9b08      	ldr	r3, [sp, #32]
 800b806:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	f000 80fd 	beq.w	800ba0a <_dtoa_r+0xba2>
 800b810:	2d00      	cmp	r5, #0
 800b812:	dd05      	ble.n	800b820 <_dtoa_r+0x9b8>
 800b814:	4639      	mov	r1, r7
 800b816:	462a      	mov	r2, r5
 800b818:	4620      	mov	r0, r4
 800b81a:	f000 fb3d 	bl	800be98 <__lshift>
 800b81e:	4607      	mov	r7, r0
 800b820:	9b06      	ldr	r3, [sp, #24]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d05c      	beq.n	800b8e0 <_dtoa_r+0xa78>
 800b826:	6879      	ldr	r1, [r7, #4]
 800b828:	4620      	mov	r0, r4
 800b82a:	f000 f923 	bl	800ba74 <_Balloc>
 800b82e:	4605      	mov	r5, r0
 800b830:	b928      	cbnz	r0, 800b83e <_dtoa_r+0x9d6>
 800b832:	4b80      	ldr	r3, [pc, #512]	; (800ba34 <_dtoa_r+0xbcc>)
 800b834:	4602      	mov	r2, r0
 800b836:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b83a:	f7ff bb2e 	b.w	800ae9a <_dtoa_r+0x32>
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	3202      	adds	r2, #2
 800b842:	0092      	lsls	r2, r2, #2
 800b844:	f107 010c 	add.w	r1, r7, #12
 800b848:	300c      	adds	r0, #12
 800b84a:	f000 f905 	bl	800ba58 <memcpy>
 800b84e:	2201      	movs	r2, #1
 800b850:	4629      	mov	r1, r5
 800b852:	4620      	mov	r0, r4
 800b854:	f000 fb20 	bl	800be98 <__lshift>
 800b858:	9b00      	ldr	r3, [sp, #0]
 800b85a:	3301      	adds	r3, #1
 800b85c:	9301      	str	r3, [sp, #4]
 800b85e:	9b00      	ldr	r3, [sp, #0]
 800b860:	444b      	add	r3, r9
 800b862:	9307      	str	r3, [sp, #28]
 800b864:	9b02      	ldr	r3, [sp, #8]
 800b866:	f003 0301 	and.w	r3, r3, #1
 800b86a:	46b8      	mov	r8, r7
 800b86c:	9306      	str	r3, [sp, #24]
 800b86e:	4607      	mov	r7, r0
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	4631      	mov	r1, r6
 800b874:	3b01      	subs	r3, #1
 800b876:	4658      	mov	r0, fp
 800b878:	9302      	str	r3, [sp, #8]
 800b87a:	f7ff fa69 	bl	800ad50 <quorem>
 800b87e:	4603      	mov	r3, r0
 800b880:	3330      	adds	r3, #48	; 0x30
 800b882:	9004      	str	r0, [sp, #16]
 800b884:	4641      	mov	r1, r8
 800b886:	4658      	mov	r0, fp
 800b888:	9308      	str	r3, [sp, #32]
 800b88a:	f000 fb71 	bl	800bf70 <__mcmp>
 800b88e:	463a      	mov	r2, r7
 800b890:	4681      	mov	r9, r0
 800b892:	4631      	mov	r1, r6
 800b894:	4620      	mov	r0, r4
 800b896:	f000 fb87 	bl	800bfa8 <__mdiff>
 800b89a:	68c2      	ldr	r2, [r0, #12]
 800b89c:	9b08      	ldr	r3, [sp, #32]
 800b89e:	4605      	mov	r5, r0
 800b8a0:	bb02      	cbnz	r2, 800b8e4 <_dtoa_r+0xa7c>
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4658      	mov	r0, fp
 800b8a6:	f000 fb63 	bl	800bf70 <__mcmp>
 800b8aa:	9b08      	ldr	r3, [sp, #32]
 800b8ac:	4602      	mov	r2, r0
 800b8ae:	4629      	mov	r1, r5
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800b8b6:	f000 f91d 	bl	800baf4 <_Bfree>
 800b8ba:	9b05      	ldr	r3, [sp, #20]
 800b8bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8be:	9d01      	ldr	r5, [sp, #4]
 800b8c0:	ea43 0102 	orr.w	r1, r3, r2
 800b8c4:	9b06      	ldr	r3, [sp, #24]
 800b8c6:	430b      	orrs	r3, r1
 800b8c8:	9b08      	ldr	r3, [sp, #32]
 800b8ca:	d10d      	bne.n	800b8e8 <_dtoa_r+0xa80>
 800b8cc:	2b39      	cmp	r3, #57	; 0x39
 800b8ce:	d029      	beq.n	800b924 <_dtoa_r+0xabc>
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	dd01      	ble.n	800b8da <_dtoa_r+0xa72>
 800b8d6:	9b04      	ldr	r3, [sp, #16]
 800b8d8:	3331      	adds	r3, #49	; 0x31
 800b8da:	9a02      	ldr	r2, [sp, #8]
 800b8dc:	7013      	strb	r3, [r2, #0]
 800b8de:	e774      	b.n	800b7ca <_dtoa_r+0x962>
 800b8e0:	4638      	mov	r0, r7
 800b8e2:	e7b9      	b.n	800b858 <_dtoa_r+0x9f0>
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	e7e2      	b.n	800b8ae <_dtoa_r+0xa46>
 800b8e8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ec:	db06      	blt.n	800b8fc <_dtoa_r+0xa94>
 800b8ee:	9905      	ldr	r1, [sp, #20]
 800b8f0:	ea41 0909 	orr.w	r9, r1, r9
 800b8f4:	9906      	ldr	r1, [sp, #24]
 800b8f6:	ea59 0101 	orrs.w	r1, r9, r1
 800b8fa:	d120      	bne.n	800b93e <_dtoa_r+0xad6>
 800b8fc:	2a00      	cmp	r2, #0
 800b8fe:	ddec      	ble.n	800b8da <_dtoa_r+0xa72>
 800b900:	4659      	mov	r1, fp
 800b902:	2201      	movs	r2, #1
 800b904:	4620      	mov	r0, r4
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	f000 fac6 	bl	800be98 <__lshift>
 800b90c:	4631      	mov	r1, r6
 800b90e:	4683      	mov	fp, r0
 800b910:	f000 fb2e 	bl	800bf70 <__mcmp>
 800b914:	2800      	cmp	r0, #0
 800b916:	9b01      	ldr	r3, [sp, #4]
 800b918:	dc02      	bgt.n	800b920 <_dtoa_r+0xab8>
 800b91a:	d1de      	bne.n	800b8da <_dtoa_r+0xa72>
 800b91c:	07da      	lsls	r2, r3, #31
 800b91e:	d5dc      	bpl.n	800b8da <_dtoa_r+0xa72>
 800b920:	2b39      	cmp	r3, #57	; 0x39
 800b922:	d1d8      	bne.n	800b8d6 <_dtoa_r+0xa6e>
 800b924:	9a02      	ldr	r2, [sp, #8]
 800b926:	2339      	movs	r3, #57	; 0x39
 800b928:	7013      	strb	r3, [r2, #0]
 800b92a:	462b      	mov	r3, r5
 800b92c:	461d      	mov	r5, r3
 800b92e:	3b01      	subs	r3, #1
 800b930:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b934:	2a39      	cmp	r2, #57	; 0x39
 800b936:	d050      	beq.n	800b9da <_dtoa_r+0xb72>
 800b938:	3201      	adds	r2, #1
 800b93a:	701a      	strb	r2, [r3, #0]
 800b93c:	e745      	b.n	800b7ca <_dtoa_r+0x962>
 800b93e:	2a00      	cmp	r2, #0
 800b940:	dd03      	ble.n	800b94a <_dtoa_r+0xae2>
 800b942:	2b39      	cmp	r3, #57	; 0x39
 800b944:	d0ee      	beq.n	800b924 <_dtoa_r+0xabc>
 800b946:	3301      	adds	r3, #1
 800b948:	e7c7      	b.n	800b8da <_dtoa_r+0xa72>
 800b94a:	9a01      	ldr	r2, [sp, #4]
 800b94c:	9907      	ldr	r1, [sp, #28]
 800b94e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b952:	428a      	cmp	r2, r1
 800b954:	d02a      	beq.n	800b9ac <_dtoa_r+0xb44>
 800b956:	4659      	mov	r1, fp
 800b958:	2300      	movs	r3, #0
 800b95a:	220a      	movs	r2, #10
 800b95c:	4620      	mov	r0, r4
 800b95e:	f000 f8eb 	bl	800bb38 <__multadd>
 800b962:	45b8      	cmp	r8, r7
 800b964:	4683      	mov	fp, r0
 800b966:	f04f 0300 	mov.w	r3, #0
 800b96a:	f04f 020a 	mov.w	r2, #10
 800b96e:	4641      	mov	r1, r8
 800b970:	4620      	mov	r0, r4
 800b972:	d107      	bne.n	800b984 <_dtoa_r+0xb1c>
 800b974:	f000 f8e0 	bl	800bb38 <__multadd>
 800b978:	4680      	mov	r8, r0
 800b97a:	4607      	mov	r7, r0
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	3301      	adds	r3, #1
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	e775      	b.n	800b870 <_dtoa_r+0xa08>
 800b984:	f000 f8d8 	bl	800bb38 <__multadd>
 800b988:	4639      	mov	r1, r7
 800b98a:	4680      	mov	r8, r0
 800b98c:	2300      	movs	r3, #0
 800b98e:	220a      	movs	r2, #10
 800b990:	4620      	mov	r0, r4
 800b992:	f000 f8d1 	bl	800bb38 <__multadd>
 800b996:	4607      	mov	r7, r0
 800b998:	e7f0      	b.n	800b97c <_dtoa_r+0xb14>
 800b99a:	f1b9 0f00 	cmp.w	r9, #0
 800b99e:	9a00      	ldr	r2, [sp, #0]
 800b9a0:	bfcc      	ite	gt
 800b9a2:	464d      	movgt	r5, r9
 800b9a4:	2501      	movle	r5, #1
 800b9a6:	4415      	add	r5, r2
 800b9a8:	f04f 0800 	mov.w	r8, #0
 800b9ac:	4659      	mov	r1, fp
 800b9ae:	2201      	movs	r2, #1
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	9301      	str	r3, [sp, #4]
 800b9b4:	f000 fa70 	bl	800be98 <__lshift>
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	4683      	mov	fp, r0
 800b9bc:	f000 fad8 	bl	800bf70 <__mcmp>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	dcb2      	bgt.n	800b92a <_dtoa_r+0xac2>
 800b9c4:	d102      	bne.n	800b9cc <_dtoa_r+0xb64>
 800b9c6:	9b01      	ldr	r3, [sp, #4]
 800b9c8:	07db      	lsls	r3, r3, #31
 800b9ca:	d4ae      	bmi.n	800b92a <_dtoa_r+0xac2>
 800b9cc:	462b      	mov	r3, r5
 800b9ce:	461d      	mov	r5, r3
 800b9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9d4:	2a30      	cmp	r2, #48	; 0x30
 800b9d6:	d0fa      	beq.n	800b9ce <_dtoa_r+0xb66>
 800b9d8:	e6f7      	b.n	800b7ca <_dtoa_r+0x962>
 800b9da:	9a00      	ldr	r2, [sp, #0]
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d1a5      	bne.n	800b92c <_dtoa_r+0xac4>
 800b9e0:	f10a 0a01 	add.w	sl, sl, #1
 800b9e4:	2331      	movs	r3, #49	; 0x31
 800b9e6:	e779      	b.n	800b8dc <_dtoa_r+0xa74>
 800b9e8:	4b13      	ldr	r3, [pc, #76]	; (800ba38 <_dtoa_r+0xbd0>)
 800b9ea:	f7ff baaf 	b.w	800af4c <_dtoa_r+0xe4>
 800b9ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	f47f aa86 	bne.w	800af02 <_dtoa_r+0x9a>
 800b9f6:	4b11      	ldr	r3, [pc, #68]	; (800ba3c <_dtoa_r+0xbd4>)
 800b9f8:	f7ff baa8 	b.w	800af4c <_dtoa_r+0xe4>
 800b9fc:	f1b9 0f00 	cmp.w	r9, #0
 800ba00:	dc03      	bgt.n	800ba0a <_dtoa_r+0xba2>
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	2b02      	cmp	r3, #2
 800ba06:	f73f aec9 	bgt.w	800b79c <_dtoa_r+0x934>
 800ba0a:	9d00      	ldr	r5, [sp, #0]
 800ba0c:	4631      	mov	r1, r6
 800ba0e:	4658      	mov	r0, fp
 800ba10:	f7ff f99e 	bl	800ad50 <quorem>
 800ba14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ba18:	f805 3b01 	strb.w	r3, [r5], #1
 800ba1c:	9a00      	ldr	r2, [sp, #0]
 800ba1e:	1aaa      	subs	r2, r5, r2
 800ba20:	4591      	cmp	r9, r2
 800ba22:	ddba      	ble.n	800b99a <_dtoa_r+0xb32>
 800ba24:	4659      	mov	r1, fp
 800ba26:	2300      	movs	r3, #0
 800ba28:	220a      	movs	r2, #10
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f000 f884 	bl	800bb38 <__multadd>
 800ba30:	4683      	mov	fp, r0
 800ba32:	e7eb      	b.n	800ba0c <_dtoa_r+0xba4>
 800ba34:	0800ed1f 	.word	0x0800ed1f
 800ba38:	0800ec78 	.word	0x0800ec78
 800ba3c:	0800ec9c 	.word	0x0800ec9c

0800ba40 <_localeconv_r>:
 800ba40:	4800      	ldr	r0, [pc, #0]	; (800ba44 <_localeconv_r+0x4>)
 800ba42:	4770      	bx	lr
 800ba44:	20000194 	.word	0x20000194

0800ba48 <malloc>:
 800ba48:	4b02      	ldr	r3, [pc, #8]	; (800ba54 <malloc+0xc>)
 800ba4a:	4601      	mov	r1, r0
 800ba4c:	6818      	ldr	r0, [r3, #0]
 800ba4e:	f000 bbef 	b.w	800c230 <_malloc_r>
 800ba52:	bf00      	nop
 800ba54:	20000040 	.word	0x20000040

0800ba58 <memcpy>:
 800ba58:	440a      	add	r2, r1
 800ba5a:	4291      	cmp	r1, r2
 800ba5c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ba60:	d100      	bne.n	800ba64 <memcpy+0xc>
 800ba62:	4770      	bx	lr
 800ba64:	b510      	push	{r4, lr}
 800ba66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba6e:	4291      	cmp	r1, r2
 800ba70:	d1f9      	bne.n	800ba66 <memcpy+0xe>
 800ba72:	bd10      	pop	{r4, pc}

0800ba74 <_Balloc>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba78:	4604      	mov	r4, r0
 800ba7a:	460d      	mov	r5, r1
 800ba7c:	b976      	cbnz	r6, 800ba9c <_Balloc+0x28>
 800ba7e:	2010      	movs	r0, #16
 800ba80:	f7ff ffe2 	bl	800ba48 <malloc>
 800ba84:	4602      	mov	r2, r0
 800ba86:	6260      	str	r0, [r4, #36]	; 0x24
 800ba88:	b920      	cbnz	r0, 800ba94 <_Balloc+0x20>
 800ba8a:	4b18      	ldr	r3, [pc, #96]	; (800baec <_Balloc+0x78>)
 800ba8c:	4818      	ldr	r0, [pc, #96]	; (800baf0 <_Balloc+0x7c>)
 800ba8e:	2166      	movs	r1, #102	; 0x66
 800ba90:	f000 fd94 	bl	800c5bc <__assert_func>
 800ba94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba98:	6006      	str	r6, [r0, #0]
 800ba9a:	60c6      	str	r6, [r0, #12]
 800ba9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba9e:	68f3      	ldr	r3, [r6, #12]
 800baa0:	b183      	cbz	r3, 800bac4 <_Balloc+0x50>
 800baa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baa4:	68db      	ldr	r3, [r3, #12]
 800baa6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800baaa:	b9b8      	cbnz	r0, 800badc <_Balloc+0x68>
 800baac:	2101      	movs	r1, #1
 800baae:	fa01 f605 	lsl.w	r6, r1, r5
 800bab2:	1d72      	adds	r2, r6, #5
 800bab4:	0092      	lsls	r2, r2, #2
 800bab6:	4620      	mov	r0, r4
 800bab8:	f000 fb5a 	bl	800c170 <_calloc_r>
 800babc:	b160      	cbz	r0, 800bad8 <_Balloc+0x64>
 800babe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bac2:	e00e      	b.n	800bae2 <_Balloc+0x6e>
 800bac4:	2221      	movs	r2, #33	; 0x21
 800bac6:	2104      	movs	r1, #4
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 fb51 	bl	800c170 <_calloc_r>
 800bace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bad0:	60f0      	str	r0, [r6, #12]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e4      	bne.n	800baa2 <_Balloc+0x2e>
 800bad8:	2000      	movs	r0, #0
 800bada:	bd70      	pop	{r4, r5, r6, pc}
 800badc:	6802      	ldr	r2, [r0, #0]
 800bade:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bae2:	2300      	movs	r3, #0
 800bae4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bae8:	e7f7      	b.n	800bada <_Balloc+0x66>
 800baea:	bf00      	nop
 800baec:	0800eca9 	.word	0x0800eca9
 800baf0:	0800ed30 	.word	0x0800ed30

0800baf4 <_Bfree>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800baf8:	4605      	mov	r5, r0
 800bafa:	460c      	mov	r4, r1
 800bafc:	b976      	cbnz	r6, 800bb1c <_Bfree+0x28>
 800bafe:	2010      	movs	r0, #16
 800bb00:	f7ff ffa2 	bl	800ba48 <malloc>
 800bb04:	4602      	mov	r2, r0
 800bb06:	6268      	str	r0, [r5, #36]	; 0x24
 800bb08:	b920      	cbnz	r0, 800bb14 <_Bfree+0x20>
 800bb0a:	4b09      	ldr	r3, [pc, #36]	; (800bb30 <_Bfree+0x3c>)
 800bb0c:	4809      	ldr	r0, [pc, #36]	; (800bb34 <_Bfree+0x40>)
 800bb0e:	218a      	movs	r1, #138	; 0x8a
 800bb10:	f000 fd54 	bl	800c5bc <__assert_func>
 800bb14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb18:	6006      	str	r6, [r0, #0]
 800bb1a:	60c6      	str	r6, [r0, #12]
 800bb1c:	b13c      	cbz	r4, 800bb2e <_Bfree+0x3a>
 800bb1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb20:	6862      	ldr	r2, [r4, #4]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb28:	6021      	str	r1, [r4, #0]
 800bb2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	0800eca9 	.word	0x0800eca9
 800bb34:	0800ed30 	.word	0x0800ed30

0800bb38 <__multadd>:
 800bb38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb3c:	690e      	ldr	r6, [r1, #16]
 800bb3e:	4607      	mov	r7, r0
 800bb40:	4698      	mov	r8, r3
 800bb42:	460c      	mov	r4, r1
 800bb44:	f101 0014 	add.w	r0, r1, #20
 800bb48:	2300      	movs	r3, #0
 800bb4a:	6805      	ldr	r5, [r0, #0]
 800bb4c:	b2a9      	uxth	r1, r5
 800bb4e:	fb02 8101 	mla	r1, r2, r1, r8
 800bb52:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bb56:	0c2d      	lsrs	r5, r5, #16
 800bb58:	fb02 c505 	mla	r5, r2, r5, ip
 800bb5c:	b289      	uxth	r1, r1
 800bb5e:	3301      	adds	r3, #1
 800bb60:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bb64:	429e      	cmp	r6, r3
 800bb66:	f840 1b04 	str.w	r1, [r0], #4
 800bb6a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bb6e:	dcec      	bgt.n	800bb4a <__multadd+0x12>
 800bb70:	f1b8 0f00 	cmp.w	r8, #0
 800bb74:	d022      	beq.n	800bbbc <__multadd+0x84>
 800bb76:	68a3      	ldr	r3, [r4, #8]
 800bb78:	42b3      	cmp	r3, r6
 800bb7a:	dc19      	bgt.n	800bbb0 <__multadd+0x78>
 800bb7c:	6861      	ldr	r1, [r4, #4]
 800bb7e:	4638      	mov	r0, r7
 800bb80:	3101      	adds	r1, #1
 800bb82:	f7ff ff77 	bl	800ba74 <_Balloc>
 800bb86:	4605      	mov	r5, r0
 800bb88:	b928      	cbnz	r0, 800bb96 <__multadd+0x5e>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	4b0d      	ldr	r3, [pc, #52]	; (800bbc4 <__multadd+0x8c>)
 800bb8e:	480e      	ldr	r0, [pc, #56]	; (800bbc8 <__multadd+0x90>)
 800bb90:	21b5      	movs	r1, #181	; 0xb5
 800bb92:	f000 fd13 	bl	800c5bc <__assert_func>
 800bb96:	6922      	ldr	r2, [r4, #16]
 800bb98:	3202      	adds	r2, #2
 800bb9a:	f104 010c 	add.w	r1, r4, #12
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	300c      	adds	r0, #12
 800bba2:	f7ff ff59 	bl	800ba58 <memcpy>
 800bba6:	4621      	mov	r1, r4
 800bba8:	4638      	mov	r0, r7
 800bbaa:	f7ff ffa3 	bl	800baf4 <_Bfree>
 800bbae:	462c      	mov	r4, r5
 800bbb0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bbb4:	3601      	adds	r6, #1
 800bbb6:	f8c3 8014 	str.w	r8, [r3, #20]
 800bbba:	6126      	str	r6, [r4, #16]
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc2:	bf00      	nop
 800bbc4:	0800ed1f 	.word	0x0800ed1f
 800bbc8:	0800ed30 	.word	0x0800ed30

0800bbcc <__hi0bits>:
 800bbcc:	0c03      	lsrs	r3, r0, #16
 800bbce:	041b      	lsls	r3, r3, #16
 800bbd0:	b9d3      	cbnz	r3, 800bc08 <__hi0bits+0x3c>
 800bbd2:	0400      	lsls	r0, r0, #16
 800bbd4:	2310      	movs	r3, #16
 800bbd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbda:	bf04      	itt	eq
 800bbdc:	0200      	lsleq	r0, r0, #8
 800bbde:	3308      	addeq	r3, #8
 800bbe0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbe4:	bf04      	itt	eq
 800bbe6:	0100      	lsleq	r0, r0, #4
 800bbe8:	3304      	addeq	r3, #4
 800bbea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbee:	bf04      	itt	eq
 800bbf0:	0080      	lsleq	r0, r0, #2
 800bbf2:	3302      	addeq	r3, #2
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	db05      	blt.n	800bc04 <__hi0bits+0x38>
 800bbf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bbfc:	f103 0301 	add.w	r3, r3, #1
 800bc00:	bf08      	it	eq
 800bc02:	2320      	moveq	r3, #32
 800bc04:	4618      	mov	r0, r3
 800bc06:	4770      	bx	lr
 800bc08:	2300      	movs	r3, #0
 800bc0a:	e7e4      	b.n	800bbd6 <__hi0bits+0xa>

0800bc0c <__lo0bits>:
 800bc0c:	6803      	ldr	r3, [r0, #0]
 800bc0e:	f013 0207 	ands.w	r2, r3, #7
 800bc12:	4601      	mov	r1, r0
 800bc14:	d00b      	beq.n	800bc2e <__lo0bits+0x22>
 800bc16:	07da      	lsls	r2, r3, #31
 800bc18:	d424      	bmi.n	800bc64 <__lo0bits+0x58>
 800bc1a:	0798      	lsls	r0, r3, #30
 800bc1c:	bf49      	itett	mi
 800bc1e:	085b      	lsrmi	r3, r3, #1
 800bc20:	089b      	lsrpl	r3, r3, #2
 800bc22:	2001      	movmi	r0, #1
 800bc24:	600b      	strmi	r3, [r1, #0]
 800bc26:	bf5c      	itt	pl
 800bc28:	600b      	strpl	r3, [r1, #0]
 800bc2a:	2002      	movpl	r0, #2
 800bc2c:	4770      	bx	lr
 800bc2e:	b298      	uxth	r0, r3
 800bc30:	b9b0      	cbnz	r0, 800bc60 <__lo0bits+0x54>
 800bc32:	0c1b      	lsrs	r3, r3, #16
 800bc34:	2010      	movs	r0, #16
 800bc36:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bc3a:	bf04      	itt	eq
 800bc3c:	0a1b      	lsreq	r3, r3, #8
 800bc3e:	3008      	addeq	r0, #8
 800bc40:	071a      	lsls	r2, r3, #28
 800bc42:	bf04      	itt	eq
 800bc44:	091b      	lsreq	r3, r3, #4
 800bc46:	3004      	addeq	r0, #4
 800bc48:	079a      	lsls	r2, r3, #30
 800bc4a:	bf04      	itt	eq
 800bc4c:	089b      	lsreq	r3, r3, #2
 800bc4e:	3002      	addeq	r0, #2
 800bc50:	07da      	lsls	r2, r3, #31
 800bc52:	d403      	bmi.n	800bc5c <__lo0bits+0x50>
 800bc54:	085b      	lsrs	r3, r3, #1
 800bc56:	f100 0001 	add.w	r0, r0, #1
 800bc5a:	d005      	beq.n	800bc68 <__lo0bits+0x5c>
 800bc5c:	600b      	str	r3, [r1, #0]
 800bc5e:	4770      	bx	lr
 800bc60:	4610      	mov	r0, r2
 800bc62:	e7e8      	b.n	800bc36 <__lo0bits+0x2a>
 800bc64:	2000      	movs	r0, #0
 800bc66:	4770      	bx	lr
 800bc68:	2020      	movs	r0, #32
 800bc6a:	4770      	bx	lr

0800bc6c <__i2b>:
 800bc6c:	b510      	push	{r4, lr}
 800bc6e:	460c      	mov	r4, r1
 800bc70:	2101      	movs	r1, #1
 800bc72:	f7ff feff 	bl	800ba74 <_Balloc>
 800bc76:	4602      	mov	r2, r0
 800bc78:	b928      	cbnz	r0, 800bc86 <__i2b+0x1a>
 800bc7a:	4b05      	ldr	r3, [pc, #20]	; (800bc90 <__i2b+0x24>)
 800bc7c:	4805      	ldr	r0, [pc, #20]	; (800bc94 <__i2b+0x28>)
 800bc7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc82:	f000 fc9b 	bl	800c5bc <__assert_func>
 800bc86:	2301      	movs	r3, #1
 800bc88:	6144      	str	r4, [r0, #20]
 800bc8a:	6103      	str	r3, [r0, #16]
 800bc8c:	bd10      	pop	{r4, pc}
 800bc8e:	bf00      	nop
 800bc90:	0800ed1f 	.word	0x0800ed1f
 800bc94:	0800ed30 	.word	0x0800ed30

0800bc98 <__multiply>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	4614      	mov	r4, r2
 800bc9e:	690a      	ldr	r2, [r1, #16]
 800bca0:	6923      	ldr	r3, [r4, #16]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	bfb8      	it	lt
 800bca6:	460b      	movlt	r3, r1
 800bca8:	460d      	mov	r5, r1
 800bcaa:	bfbc      	itt	lt
 800bcac:	4625      	movlt	r5, r4
 800bcae:	461c      	movlt	r4, r3
 800bcb0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800bcb4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bcb8:	68ab      	ldr	r3, [r5, #8]
 800bcba:	6869      	ldr	r1, [r5, #4]
 800bcbc:	eb0a 0709 	add.w	r7, sl, r9
 800bcc0:	42bb      	cmp	r3, r7
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	bfb8      	it	lt
 800bcc6:	3101      	addlt	r1, #1
 800bcc8:	f7ff fed4 	bl	800ba74 <_Balloc>
 800bccc:	b930      	cbnz	r0, 800bcdc <__multiply+0x44>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	4b42      	ldr	r3, [pc, #264]	; (800bddc <__multiply+0x144>)
 800bcd2:	4843      	ldr	r0, [pc, #268]	; (800bde0 <__multiply+0x148>)
 800bcd4:	f240 115d 	movw	r1, #349	; 0x15d
 800bcd8:	f000 fc70 	bl	800c5bc <__assert_func>
 800bcdc:	f100 0614 	add.w	r6, r0, #20
 800bce0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bce4:	4633      	mov	r3, r6
 800bce6:	2200      	movs	r2, #0
 800bce8:	4543      	cmp	r3, r8
 800bcea:	d31e      	bcc.n	800bd2a <__multiply+0x92>
 800bcec:	f105 0c14 	add.w	ip, r5, #20
 800bcf0:	f104 0314 	add.w	r3, r4, #20
 800bcf4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800bcf8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800bcfc:	9202      	str	r2, [sp, #8]
 800bcfe:	ebac 0205 	sub.w	r2, ip, r5
 800bd02:	3a15      	subs	r2, #21
 800bd04:	f022 0203 	bic.w	r2, r2, #3
 800bd08:	3204      	adds	r2, #4
 800bd0a:	f105 0115 	add.w	r1, r5, #21
 800bd0e:	458c      	cmp	ip, r1
 800bd10:	bf38      	it	cc
 800bd12:	2204      	movcc	r2, #4
 800bd14:	9201      	str	r2, [sp, #4]
 800bd16:	9a02      	ldr	r2, [sp, #8]
 800bd18:	9303      	str	r3, [sp, #12]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d808      	bhi.n	800bd30 <__multiply+0x98>
 800bd1e:	2f00      	cmp	r7, #0
 800bd20:	dc55      	bgt.n	800bdce <__multiply+0x136>
 800bd22:	6107      	str	r7, [r0, #16]
 800bd24:	b005      	add	sp, #20
 800bd26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2a:	f843 2b04 	str.w	r2, [r3], #4
 800bd2e:	e7db      	b.n	800bce8 <__multiply+0x50>
 800bd30:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd34:	f1ba 0f00 	cmp.w	sl, #0
 800bd38:	d020      	beq.n	800bd7c <__multiply+0xe4>
 800bd3a:	f105 0e14 	add.w	lr, r5, #20
 800bd3e:	46b1      	mov	r9, r6
 800bd40:	2200      	movs	r2, #0
 800bd42:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bd46:	f8d9 b000 	ldr.w	fp, [r9]
 800bd4a:	b2a1      	uxth	r1, r4
 800bd4c:	fa1f fb8b 	uxth.w	fp, fp
 800bd50:	fb0a b101 	mla	r1, sl, r1, fp
 800bd54:	4411      	add	r1, r2
 800bd56:	f8d9 2000 	ldr.w	r2, [r9]
 800bd5a:	0c24      	lsrs	r4, r4, #16
 800bd5c:	0c12      	lsrs	r2, r2, #16
 800bd5e:	fb0a 2404 	mla	r4, sl, r4, r2
 800bd62:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bd66:	b289      	uxth	r1, r1
 800bd68:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bd6c:	45f4      	cmp	ip, lr
 800bd6e:	f849 1b04 	str.w	r1, [r9], #4
 800bd72:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bd76:	d8e4      	bhi.n	800bd42 <__multiply+0xaa>
 800bd78:	9901      	ldr	r1, [sp, #4]
 800bd7a:	5072      	str	r2, [r6, r1]
 800bd7c:	9a03      	ldr	r2, [sp, #12]
 800bd7e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd82:	3304      	adds	r3, #4
 800bd84:	f1b9 0f00 	cmp.w	r9, #0
 800bd88:	d01f      	beq.n	800bdca <__multiply+0x132>
 800bd8a:	6834      	ldr	r4, [r6, #0]
 800bd8c:	f105 0114 	add.w	r1, r5, #20
 800bd90:	46b6      	mov	lr, r6
 800bd92:	f04f 0a00 	mov.w	sl, #0
 800bd96:	880a      	ldrh	r2, [r1, #0]
 800bd98:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bd9c:	fb09 b202 	mla	r2, r9, r2, fp
 800bda0:	4492      	add	sl, r2
 800bda2:	b2a4      	uxth	r4, r4
 800bda4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bda8:	f84e 4b04 	str.w	r4, [lr], #4
 800bdac:	f851 4b04 	ldr.w	r4, [r1], #4
 800bdb0:	f8be 2000 	ldrh.w	r2, [lr]
 800bdb4:	0c24      	lsrs	r4, r4, #16
 800bdb6:	fb09 2404 	mla	r4, r9, r4, r2
 800bdba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bdbe:	458c      	cmp	ip, r1
 800bdc0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bdc4:	d8e7      	bhi.n	800bd96 <__multiply+0xfe>
 800bdc6:	9a01      	ldr	r2, [sp, #4]
 800bdc8:	50b4      	str	r4, [r6, r2]
 800bdca:	3604      	adds	r6, #4
 800bdcc:	e7a3      	b.n	800bd16 <__multiply+0x7e>
 800bdce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1a5      	bne.n	800bd22 <__multiply+0x8a>
 800bdd6:	3f01      	subs	r7, #1
 800bdd8:	e7a1      	b.n	800bd1e <__multiply+0x86>
 800bdda:	bf00      	nop
 800bddc:	0800ed1f 	.word	0x0800ed1f
 800bde0:	0800ed30 	.word	0x0800ed30

0800bde4 <__pow5mult>:
 800bde4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bde8:	4615      	mov	r5, r2
 800bdea:	f012 0203 	ands.w	r2, r2, #3
 800bdee:	4606      	mov	r6, r0
 800bdf0:	460f      	mov	r7, r1
 800bdf2:	d007      	beq.n	800be04 <__pow5mult+0x20>
 800bdf4:	4c25      	ldr	r4, [pc, #148]	; (800be8c <__pow5mult+0xa8>)
 800bdf6:	3a01      	subs	r2, #1
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bdfe:	f7ff fe9b 	bl	800bb38 <__multadd>
 800be02:	4607      	mov	r7, r0
 800be04:	10ad      	asrs	r5, r5, #2
 800be06:	d03d      	beq.n	800be84 <__pow5mult+0xa0>
 800be08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be0a:	b97c      	cbnz	r4, 800be2c <__pow5mult+0x48>
 800be0c:	2010      	movs	r0, #16
 800be0e:	f7ff fe1b 	bl	800ba48 <malloc>
 800be12:	4602      	mov	r2, r0
 800be14:	6270      	str	r0, [r6, #36]	; 0x24
 800be16:	b928      	cbnz	r0, 800be24 <__pow5mult+0x40>
 800be18:	4b1d      	ldr	r3, [pc, #116]	; (800be90 <__pow5mult+0xac>)
 800be1a:	481e      	ldr	r0, [pc, #120]	; (800be94 <__pow5mult+0xb0>)
 800be1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be20:	f000 fbcc 	bl	800c5bc <__assert_func>
 800be24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be28:	6004      	str	r4, [r0, #0]
 800be2a:	60c4      	str	r4, [r0, #12]
 800be2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be34:	b94c      	cbnz	r4, 800be4a <__pow5mult+0x66>
 800be36:	f240 2171 	movw	r1, #625	; 0x271
 800be3a:	4630      	mov	r0, r6
 800be3c:	f7ff ff16 	bl	800bc6c <__i2b>
 800be40:	2300      	movs	r3, #0
 800be42:	f8c8 0008 	str.w	r0, [r8, #8]
 800be46:	4604      	mov	r4, r0
 800be48:	6003      	str	r3, [r0, #0]
 800be4a:	f04f 0900 	mov.w	r9, #0
 800be4e:	07eb      	lsls	r3, r5, #31
 800be50:	d50a      	bpl.n	800be68 <__pow5mult+0x84>
 800be52:	4639      	mov	r1, r7
 800be54:	4622      	mov	r2, r4
 800be56:	4630      	mov	r0, r6
 800be58:	f7ff ff1e 	bl	800bc98 <__multiply>
 800be5c:	4639      	mov	r1, r7
 800be5e:	4680      	mov	r8, r0
 800be60:	4630      	mov	r0, r6
 800be62:	f7ff fe47 	bl	800baf4 <_Bfree>
 800be66:	4647      	mov	r7, r8
 800be68:	106d      	asrs	r5, r5, #1
 800be6a:	d00b      	beq.n	800be84 <__pow5mult+0xa0>
 800be6c:	6820      	ldr	r0, [r4, #0]
 800be6e:	b938      	cbnz	r0, 800be80 <__pow5mult+0x9c>
 800be70:	4622      	mov	r2, r4
 800be72:	4621      	mov	r1, r4
 800be74:	4630      	mov	r0, r6
 800be76:	f7ff ff0f 	bl	800bc98 <__multiply>
 800be7a:	6020      	str	r0, [r4, #0]
 800be7c:	f8c0 9000 	str.w	r9, [r0]
 800be80:	4604      	mov	r4, r0
 800be82:	e7e4      	b.n	800be4e <__pow5mult+0x6a>
 800be84:	4638      	mov	r0, r7
 800be86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be8a:	bf00      	nop
 800be8c:	0800ee80 	.word	0x0800ee80
 800be90:	0800eca9 	.word	0x0800eca9
 800be94:	0800ed30 	.word	0x0800ed30

0800be98 <__lshift>:
 800be98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be9c:	460c      	mov	r4, r1
 800be9e:	6849      	ldr	r1, [r1, #4]
 800bea0:	6923      	ldr	r3, [r4, #16]
 800bea2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bea6:	68a3      	ldr	r3, [r4, #8]
 800bea8:	4607      	mov	r7, r0
 800beaa:	4691      	mov	r9, r2
 800beac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800beb0:	f108 0601 	add.w	r6, r8, #1
 800beb4:	42b3      	cmp	r3, r6
 800beb6:	db0b      	blt.n	800bed0 <__lshift+0x38>
 800beb8:	4638      	mov	r0, r7
 800beba:	f7ff fddb 	bl	800ba74 <_Balloc>
 800bebe:	4605      	mov	r5, r0
 800bec0:	b948      	cbnz	r0, 800bed6 <__lshift+0x3e>
 800bec2:	4602      	mov	r2, r0
 800bec4:	4b28      	ldr	r3, [pc, #160]	; (800bf68 <__lshift+0xd0>)
 800bec6:	4829      	ldr	r0, [pc, #164]	; (800bf6c <__lshift+0xd4>)
 800bec8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800becc:	f000 fb76 	bl	800c5bc <__assert_func>
 800bed0:	3101      	adds	r1, #1
 800bed2:	005b      	lsls	r3, r3, #1
 800bed4:	e7ee      	b.n	800beb4 <__lshift+0x1c>
 800bed6:	2300      	movs	r3, #0
 800bed8:	f100 0114 	add.w	r1, r0, #20
 800bedc:	f100 0210 	add.w	r2, r0, #16
 800bee0:	4618      	mov	r0, r3
 800bee2:	4553      	cmp	r3, sl
 800bee4:	db33      	blt.n	800bf4e <__lshift+0xb6>
 800bee6:	6920      	ldr	r0, [r4, #16]
 800bee8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800beec:	f104 0314 	add.w	r3, r4, #20
 800bef0:	f019 091f 	ands.w	r9, r9, #31
 800bef4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bef8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800befc:	d02b      	beq.n	800bf56 <__lshift+0xbe>
 800befe:	f1c9 0e20 	rsb	lr, r9, #32
 800bf02:	468a      	mov	sl, r1
 800bf04:	2200      	movs	r2, #0
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	fa00 f009 	lsl.w	r0, r0, r9
 800bf0c:	4302      	orrs	r2, r0
 800bf0e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf12:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf16:	459c      	cmp	ip, r3
 800bf18:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf1c:	d8f3      	bhi.n	800bf06 <__lshift+0x6e>
 800bf1e:	ebac 0304 	sub.w	r3, ip, r4
 800bf22:	3b15      	subs	r3, #21
 800bf24:	f023 0303 	bic.w	r3, r3, #3
 800bf28:	3304      	adds	r3, #4
 800bf2a:	f104 0015 	add.w	r0, r4, #21
 800bf2e:	4584      	cmp	ip, r0
 800bf30:	bf38      	it	cc
 800bf32:	2304      	movcc	r3, #4
 800bf34:	50ca      	str	r2, [r1, r3]
 800bf36:	b10a      	cbz	r2, 800bf3c <__lshift+0xa4>
 800bf38:	f108 0602 	add.w	r6, r8, #2
 800bf3c:	3e01      	subs	r6, #1
 800bf3e:	4638      	mov	r0, r7
 800bf40:	612e      	str	r6, [r5, #16]
 800bf42:	4621      	mov	r1, r4
 800bf44:	f7ff fdd6 	bl	800baf4 <_Bfree>
 800bf48:	4628      	mov	r0, r5
 800bf4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf52:	3301      	adds	r3, #1
 800bf54:	e7c5      	b.n	800bee2 <__lshift+0x4a>
 800bf56:	3904      	subs	r1, #4
 800bf58:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf60:	459c      	cmp	ip, r3
 800bf62:	d8f9      	bhi.n	800bf58 <__lshift+0xc0>
 800bf64:	e7ea      	b.n	800bf3c <__lshift+0xa4>
 800bf66:	bf00      	nop
 800bf68:	0800ed1f 	.word	0x0800ed1f
 800bf6c:	0800ed30 	.word	0x0800ed30

0800bf70 <__mcmp>:
 800bf70:	b530      	push	{r4, r5, lr}
 800bf72:	6902      	ldr	r2, [r0, #16]
 800bf74:	690c      	ldr	r4, [r1, #16]
 800bf76:	1b12      	subs	r2, r2, r4
 800bf78:	d10e      	bne.n	800bf98 <__mcmp+0x28>
 800bf7a:	f100 0314 	add.w	r3, r0, #20
 800bf7e:	3114      	adds	r1, #20
 800bf80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bf8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bf90:	42a5      	cmp	r5, r4
 800bf92:	d003      	beq.n	800bf9c <__mcmp+0x2c>
 800bf94:	d305      	bcc.n	800bfa2 <__mcmp+0x32>
 800bf96:	2201      	movs	r2, #1
 800bf98:	4610      	mov	r0, r2
 800bf9a:	bd30      	pop	{r4, r5, pc}
 800bf9c:	4283      	cmp	r3, r0
 800bf9e:	d3f3      	bcc.n	800bf88 <__mcmp+0x18>
 800bfa0:	e7fa      	b.n	800bf98 <__mcmp+0x28>
 800bfa2:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa6:	e7f7      	b.n	800bf98 <__mcmp+0x28>

0800bfa8 <__mdiff>:
 800bfa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfac:	460c      	mov	r4, r1
 800bfae:	4606      	mov	r6, r0
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	4620      	mov	r0, r4
 800bfb4:	4617      	mov	r7, r2
 800bfb6:	f7ff ffdb 	bl	800bf70 <__mcmp>
 800bfba:	1e05      	subs	r5, r0, #0
 800bfbc:	d110      	bne.n	800bfe0 <__mdiff+0x38>
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	4630      	mov	r0, r6
 800bfc2:	f7ff fd57 	bl	800ba74 <_Balloc>
 800bfc6:	b930      	cbnz	r0, 800bfd6 <__mdiff+0x2e>
 800bfc8:	4b39      	ldr	r3, [pc, #228]	; (800c0b0 <__mdiff+0x108>)
 800bfca:	4602      	mov	r2, r0
 800bfcc:	f240 2132 	movw	r1, #562	; 0x232
 800bfd0:	4838      	ldr	r0, [pc, #224]	; (800c0b4 <__mdiff+0x10c>)
 800bfd2:	f000 faf3 	bl	800c5bc <__assert_func>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bfdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfe0:	bfa4      	itt	ge
 800bfe2:	463b      	movge	r3, r7
 800bfe4:	4627      	movge	r7, r4
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	bfa6      	itte	ge
 800bfec:	461c      	movge	r4, r3
 800bfee:	2500      	movge	r5, #0
 800bff0:	2501      	movlt	r5, #1
 800bff2:	f7ff fd3f 	bl	800ba74 <_Balloc>
 800bff6:	b920      	cbnz	r0, 800c002 <__mdiff+0x5a>
 800bff8:	4b2d      	ldr	r3, [pc, #180]	; (800c0b0 <__mdiff+0x108>)
 800bffa:	4602      	mov	r2, r0
 800bffc:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c000:	e7e6      	b.n	800bfd0 <__mdiff+0x28>
 800c002:	693e      	ldr	r6, [r7, #16]
 800c004:	60c5      	str	r5, [r0, #12]
 800c006:	6925      	ldr	r5, [r4, #16]
 800c008:	f107 0114 	add.w	r1, r7, #20
 800c00c:	f104 0914 	add.w	r9, r4, #20
 800c010:	f100 0e14 	add.w	lr, r0, #20
 800c014:	f107 0210 	add.w	r2, r7, #16
 800c018:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c01c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c020:	46f2      	mov	sl, lr
 800c022:	2700      	movs	r7, #0
 800c024:	f859 3b04 	ldr.w	r3, [r9], #4
 800c028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c02c:	fa1f f883 	uxth.w	r8, r3
 800c030:	fa17 f78b 	uxtah	r7, r7, fp
 800c034:	0c1b      	lsrs	r3, r3, #16
 800c036:	eba7 0808 	sub.w	r8, r7, r8
 800c03a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c03e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c042:	fa1f f888 	uxth.w	r8, r8
 800c046:	141f      	asrs	r7, r3, #16
 800c048:	454d      	cmp	r5, r9
 800c04a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c04e:	f84a 3b04 	str.w	r3, [sl], #4
 800c052:	d8e7      	bhi.n	800c024 <__mdiff+0x7c>
 800c054:	1b2b      	subs	r3, r5, r4
 800c056:	3b15      	subs	r3, #21
 800c058:	f023 0303 	bic.w	r3, r3, #3
 800c05c:	3304      	adds	r3, #4
 800c05e:	3415      	adds	r4, #21
 800c060:	42a5      	cmp	r5, r4
 800c062:	bf38      	it	cc
 800c064:	2304      	movcc	r3, #4
 800c066:	4419      	add	r1, r3
 800c068:	4473      	add	r3, lr
 800c06a:	469e      	mov	lr, r3
 800c06c:	460d      	mov	r5, r1
 800c06e:	4565      	cmp	r5, ip
 800c070:	d30e      	bcc.n	800c090 <__mdiff+0xe8>
 800c072:	f10c 0203 	add.w	r2, ip, #3
 800c076:	1a52      	subs	r2, r2, r1
 800c078:	f022 0203 	bic.w	r2, r2, #3
 800c07c:	3903      	subs	r1, #3
 800c07e:	458c      	cmp	ip, r1
 800c080:	bf38      	it	cc
 800c082:	2200      	movcc	r2, #0
 800c084:	441a      	add	r2, r3
 800c086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c08a:	b17b      	cbz	r3, 800c0ac <__mdiff+0x104>
 800c08c:	6106      	str	r6, [r0, #16]
 800c08e:	e7a5      	b.n	800bfdc <__mdiff+0x34>
 800c090:	f855 8b04 	ldr.w	r8, [r5], #4
 800c094:	fa17 f488 	uxtah	r4, r7, r8
 800c098:	1422      	asrs	r2, r4, #16
 800c09a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c09e:	b2a4      	uxth	r4, r4
 800c0a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c0a4:	f84e 4b04 	str.w	r4, [lr], #4
 800c0a8:	1417      	asrs	r7, r2, #16
 800c0aa:	e7e0      	b.n	800c06e <__mdiff+0xc6>
 800c0ac:	3e01      	subs	r6, #1
 800c0ae:	e7ea      	b.n	800c086 <__mdiff+0xde>
 800c0b0:	0800ed1f 	.word	0x0800ed1f
 800c0b4:	0800ed30 	.word	0x0800ed30

0800c0b8 <__d2b>:
 800c0b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0bc:	4689      	mov	r9, r1
 800c0be:	2101      	movs	r1, #1
 800c0c0:	ec57 6b10 	vmov	r6, r7, d0
 800c0c4:	4690      	mov	r8, r2
 800c0c6:	f7ff fcd5 	bl	800ba74 <_Balloc>
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	b930      	cbnz	r0, 800c0dc <__d2b+0x24>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	4b25      	ldr	r3, [pc, #148]	; (800c168 <__d2b+0xb0>)
 800c0d2:	4826      	ldr	r0, [pc, #152]	; (800c16c <__d2b+0xb4>)
 800c0d4:	f240 310a 	movw	r1, #778	; 0x30a
 800c0d8:	f000 fa70 	bl	800c5bc <__assert_func>
 800c0dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c0e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c0e4:	bb35      	cbnz	r5, 800c134 <__d2b+0x7c>
 800c0e6:	2e00      	cmp	r6, #0
 800c0e8:	9301      	str	r3, [sp, #4]
 800c0ea:	d028      	beq.n	800c13e <__d2b+0x86>
 800c0ec:	4668      	mov	r0, sp
 800c0ee:	9600      	str	r6, [sp, #0]
 800c0f0:	f7ff fd8c 	bl	800bc0c <__lo0bits>
 800c0f4:	9900      	ldr	r1, [sp, #0]
 800c0f6:	b300      	cbz	r0, 800c13a <__d2b+0x82>
 800c0f8:	9a01      	ldr	r2, [sp, #4]
 800c0fa:	f1c0 0320 	rsb	r3, r0, #32
 800c0fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c102:	430b      	orrs	r3, r1
 800c104:	40c2      	lsrs	r2, r0
 800c106:	6163      	str	r3, [r4, #20]
 800c108:	9201      	str	r2, [sp, #4]
 800c10a:	9b01      	ldr	r3, [sp, #4]
 800c10c:	61a3      	str	r3, [r4, #24]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	bf14      	ite	ne
 800c112:	2202      	movne	r2, #2
 800c114:	2201      	moveq	r2, #1
 800c116:	6122      	str	r2, [r4, #16]
 800c118:	b1d5      	cbz	r5, 800c150 <__d2b+0x98>
 800c11a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c11e:	4405      	add	r5, r0
 800c120:	f8c9 5000 	str.w	r5, [r9]
 800c124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c128:	f8c8 0000 	str.w	r0, [r8]
 800c12c:	4620      	mov	r0, r4
 800c12e:	b003      	add	sp, #12
 800c130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c138:	e7d5      	b.n	800c0e6 <__d2b+0x2e>
 800c13a:	6161      	str	r1, [r4, #20]
 800c13c:	e7e5      	b.n	800c10a <__d2b+0x52>
 800c13e:	a801      	add	r0, sp, #4
 800c140:	f7ff fd64 	bl	800bc0c <__lo0bits>
 800c144:	9b01      	ldr	r3, [sp, #4]
 800c146:	6163      	str	r3, [r4, #20]
 800c148:	2201      	movs	r2, #1
 800c14a:	6122      	str	r2, [r4, #16]
 800c14c:	3020      	adds	r0, #32
 800c14e:	e7e3      	b.n	800c118 <__d2b+0x60>
 800c150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c158:	f8c9 0000 	str.w	r0, [r9]
 800c15c:	6918      	ldr	r0, [r3, #16]
 800c15e:	f7ff fd35 	bl	800bbcc <__hi0bits>
 800c162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c166:	e7df      	b.n	800c128 <__d2b+0x70>
 800c168:	0800ed1f 	.word	0x0800ed1f
 800c16c:	0800ed30 	.word	0x0800ed30

0800c170 <_calloc_r>:
 800c170:	b513      	push	{r0, r1, r4, lr}
 800c172:	434a      	muls	r2, r1
 800c174:	4611      	mov	r1, r2
 800c176:	9201      	str	r2, [sp, #4]
 800c178:	f000 f85a 	bl	800c230 <_malloc_r>
 800c17c:	4604      	mov	r4, r0
 800c17e:	b118      	cbz	r0, 800c188 <_calloc_r+0x18>
 800c180:	9a01      	ldr	r2, [sp, #4]
 800c182:	2100      	movs	r1, #0
 800c184:	f7fe f952 	bl	800a42c <memset>
 800c188:	4620      	mov	r0, r4
 800c18a:	b002      	add	sp, #8
 800c18c:	bd10      	pop	{r4, pc}
	...

0800c190 <_free_r>:
 800c190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c192:	2900      	cmp	r1, #0
 800c194:	d048      	beq.n	800c228 <_free_r+0x98>
 800c196:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c19a:	9001      	str	r0, [sp, #4]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	f1a1 0404 	sub.w	r4, r1, #4
 800c1a2:	bfb8      	it	lt
 800c1a4:	18e4      	addlt	r4, r4, r3
 800c1a6:	f000 fa65 	bl	800c674 <__malloc_lock>
 800c1aa:	4a20      	ldr	r2, [pc, #128]	; (800c22c <_free_r+0x9c>)
 800c1ac:	9801      	ldr	r0, [sp, #4]
 800c1ae:	6813      	ldr	r3, [r2, #0]
 800c1b0:	4615      	mov	r5, r2
 800c1b2:	b933      	cbnz	r3, 800c1c2 <_free_r+0x32>
 800c1b4:	6063      	str	r3, [r4, #4]
 800c1b6:	6014      	str	r4, [r2, #0]
 800c1b8:	b003      	add	sp, #12
 800c1ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c1be:	f000 ba5f 	b.w	800c680 <__malloc_unlock>
 800c1c2:	42a3      	cmp	r3, r4
 800c1c4:	d90b      	bls.n	800c1de <_free_r+0x4e>
 800c1c6:	6821      	ldr	r1, [r4, #0]
 800c1c8:	1862      	adds	r2, r4, r1
 800c1ca:	4293      	cmp	r3, r2
 800c1cc:	bf04      	itt	eq
 800c1ce:	681a      	ldreq	r2, [r3, #0]
 800c1d0:	685b      	ldreq	r3, [r3, #4]
 800c1d2:	6063      	str	r3, [r4, #4]
 800c1d4:	bf04      	itt	eq
 800c1d6:	1852      	addeq	r2, r2, r1
 800c1d8:	6022      	streq	r2, [r4, #0]
 800c1da:	602c      	str	r4, [r5, #0]
 800c1dc:	e7ec      	b.n	800c1b8 <_free_r+0x28>
 800c1de:	461a      	mov	r2, r3
 800c1e0:	685b      	ldr	r3, [r3, #4]
 800c1e2:	b10b      	cbz	r3, 800c1e8 <_free_r+0x58>
 800c1e4:	42a3      	cmp	r3, r4
 800c1e6:	d9fa      	bls.n	800c1de <_free_r+0x4e>
 800c1e8:	6811      	ldr	r1, [r2, #0]
 800c1ea:	1855      	adds	r5, r2, r1
 800c1ec:	42a5      	cmp	r5, r4
 800c1ee:	d10b      	bne.n	800c208 <_free_r+0x78>
 800c1f0:	6824      	ldr	r4, [r4, #0]
 800c1f2:	4421      	add	r1, r4
 800c1f4:	1854      	adds	r4, r2, r1
 800c1f6:	42a3      	cmp	r3, r4
 800c1f8:	6011      	str	r1, [r2, #0]
 800c1fa:	d1dd      	bne.n	800c1b8 <_free_r+0x28>
 800c1fc:	681c      	ldr	r4, [r3, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	6053      	str	r3, [r2, #4]
 800c202:	4421      	add	r1, r4
 800c204:	6011      	str	r1, [r2, #0]
 800c206:	e7d7      	b.n	800c1b8 <_free_r+0x28>
 800c208:	d902      	bls.n	800c210 <_free_r+0x80>
 800c20a:	230c      	movs	r3, #12
 800c20c:	6003      	str	r3, [r0, #0]
 800c20e:	e7d3      	b.n	800c1b8 <_free_r+0x28>
 800c210:	6825      	ldr	r5, [r4, #0]
 800c212:	1961      	adds	r1, r4, r5
 800c214:	428b      	cmp	r3, r1
 800c216:	bf04      	itt	eq
 800c218:	6819      	ldreq	r1, [r3, #0]
 800c21a:	685b      	ldreq	r3, [r3, #4]
 800c21c:	6063      	str	r3, [r4, #4]
 800c21e:	bf04      	itt	eq
 800c220:	1949      	addeq	r1, r1, r5
 800c222:	6021      	streq	r1, [r4, #0]
 800c224:	6054      	str	r4, [r2, #4]
 800c226:	e7c7      	b.n	800c1b8 <_free_r+0x28>
 800c228:	b003      	add	sp, #12
 800c22a:	bd30      	pop	{r4, r5, pc}
 800c22c:	2000043c 	.word	0x2000043c

0800c230 <_malloc_r>:
 800c230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c232:	1ccd      	adds	r5, r1, #3
 800c234:	f025 0503 	bic.w	r5, r5, #3
 800c238:	3508      	adds	r5, #8
 800c23a:	2d0c      	cmp	r5, #12
 800c23c:	bf38      	it	cc
 800c23e:	250c      	movcc	r5, #12
 800c240:	2d00      	cmp	r5, #0
 800c242:	4606      	mov	r6, r0
 800c244:	db01      	blt.n	800c24a <_malloc_r+0x1a>
 800c246:	42a9      	cmp	r1, r5
 800c248:	d903      	bls.n	800c252 <_malloc_r+0x22>
 800c24a:	230c      	movs	r3, #12
 800c24c:	6033      	str	r3, [r6, #0]
 800c24e:	2000      	movs	r0, #0
 800c250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c252:	f000 fa0f 	bl	800c674 <__malloc_lock>
 800c256:	4921      	ldr	r1, [pc, #132]	; (800c2dc <_malloc_r+0xac>)
 800c258:	680a      	ldr	r2, [r1, #0]
 800c25a:	4614      	mov	r4, r2
 800c25c:	b99c      	cbnz	r4, 800c286 <_malloc_r+0x56>
 800c25e:	4f20      	ldr	r7, [pc, #128]	; (800c2e0 <_malloc_r+0xb0>)
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	b923      	cbnz	r3, 800c26e <_malloc_r+0x3e>
 800c264:	4621      	mov	r1, r4
 800c266:	4630      	mov	r0, r6
 800c268:	f000 f998 	bl	800c59c <_sbrk_r>
 800c26c:	6038      	str	r0, [r7, #0]
 800c26e:	4629      	mov	r1, r5
 800c270:	4630      	mov	r0, r6
 800c272:	f000 f993 	bl	800c59c <_sbrk_r>
 800c276:	1c43      	adds	r3, r0, #1
 800c278:	d123      	bne.n	800c2c2 <_malloc_r+0x92>
 800c27a:	230c      	movs	r3, #12
 800c27c:	6033      	str	r3, [r6, #0]
 800c27e:	4630      	mov	r0, r6
 800c280:	f000 f9fe 	bl	800c680 <__malloc_unlock>
 800c284:	e7e3      	b.n	800c24e <_malloc_r+0x1e>
 800c286:	6823      	ldr	r3, [r4, #0]
 800c288:	1b5b      	subs	r3, r3, r5
 800c28a:	d417      	bmi.n	800c2bc <_malloc_r+0x8c>
 800c28c:	2b0b      	cmp	r3, #11
 800c28e:	d903      	bls.n	800c298 <_malloc_r+0x68>
 800c290:	6023      	str	r3, [r4, #0]
 800c292:	441c      	add	r4, r3
 800c294:	6025      	str	r5, [r4, #0]
 800c296:	e004      	b.n	800c2a2 <_malloc_r+0x72>
 800c298:	6863      	ldr	r3, [r4, #4]
 800c29a:	42a2      	cmp	r2, r4
 800c29c:	bf0c      	ite	eq
 800c29e:	600b      	streq	r3, [r1, #0]
 800c2a0:	6053      	strne	r3, [r2, #4]
 800c2a2:	4630      	mov	r0, r6
 800c2a4:	f000 f9ec 	bl	800c680 <__malloc_unlock>
 800c2a8:	f104 000b 	add.w	r0, r4, #11
 800c2ac:	1d23      	adds	r3, r4, #4
 800c2ae:	f020 0007 	bic.w	r0, r0, #7
 800c2b2:	1ac2      	subs	r2, r0, r3
 800c2b4:	d0cc      	beq.n	800c250 <_malloc_r+0x20>
 800c2b6:	1a1b      	subs	r3, r3, r0
 800c2b8:	50a3      	str	r3, [r4, r2]
 800c2ba:	e7c9      	b.n	800c250 <_malloc_r+0x20>
 800c2bc:	4622      	mov	r2, r4
 800c2be:	6864      	ldr	r4, [r4, #4]
 800c2c0:	e7cc      	b.n	800c25c <_malloc_r+0x2c>
 800c2c2:	1cc4      	adds	r4, r0, #3
 800c2c4:	f024 0403 	bic.w	r4, r4, #3
 800c2c8:	42a0      	cmp	r0, r4
 800c2ca:	d0e3      	beq.n	800c294 <_malloc_r+0x64>
 800c2cc:	1a21      	subs	r1, r4, r0
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f000 f964 	bl	800c59c <_sbrk_r>
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	d1dd      	bne.n	800c294 <_malloc_r+0x64>
 800c2d8:	e7cf      	b.n	800c27a <_malloc_r+0x4a>
 800c2da:	bf00      	nop
 800c2dc:	2000043c 	.word	0x2000043c
 800c2e0:	20000440 	.word	0x20000440

0800c2e4 <__ssputs_r>:
 800c2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e8:	688e      	ldr	r6, [r1, #8]
 800c2ea:	429e      	cmp	r6, r3
 800c2ec:	4682      	mov	sl, r0
 800c2ee:	460c      	mov	r4, r1
 800c2f0:	4690      	mov	r8, r2
 800c2f2:	461f      	mov	r7, r3
 800c2f4:	d838      	bhi.n	800c368 <__ssputs_r+0x84>
 800c2f6:	898a      	ldrh	r2, [r1, #12]
 800c2f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2fc:	d032      	beq.n	800c364 <__ssputs_r+0x80>
 800c2fe:	6825      	ldr	r5, [r4, #0]
 800c300:	6909      	ldr	r1, [r1, #16]
 800c302:	eba5 0901 	sub.w	r9, r5, r1
 800c306:	6965      	ldr	r5, [r4, #20]
 800c308:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c30c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c310:	3301      	adds	r3, #1
 800c312:	444b      	add	r3, r9
 800c314:	106d      	asrs	r5, r5, #1
 800c316:	429d      	cmp	r5, r3
 800c318:	bf38      	it	cc
 800c31a:	461d      	movcc	r5, r3
 800c31c:	0553      	lsls	r3, r2, #21
 800c31e:	d531      	bpl.n	800c384 <__ssputs_r+0xa0>
 800c320:	4629      	mov	r1, r5
 800c322:	f7ff ff85 	bl	800c230 <_malloc_r>
 800c326:	4606      	mov	r6, r0
 800c328:	b950      	cbnz	r0, 800c340 <__ssputs_r+0x5c>
 800c32a:	230c      	movs	r3, #12
 800c32c:	f8ca 3000 	str.w	r3, [sl]
 800c330:	89a3      	ldrh	r3, [r4, #12]
 800c332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c336:	81a3      	strh	r3, [r4, #12]
 800c338:	f04f 30ff 	mov.w	r0, #4294967295
 800c33c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c340:	6921      	ldr	r1, [r4, #16]
 800c342:	464a      	mov	r2, r9
 800c344:	f7ff fb88 	bl	800ba58 <memcpy>
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c352:	81a3      	strh	r3, [r4, #12]
 800c354:	6126      	str	r6, [r4, #16]
 800c356:	6165      	str	r5, [r4, #20]
 800c358:	444e      	add	r6, r9
 800c35a:	eba5 0509 	sub.w	r5, r5, r9
 800c35e:	6026      	str	r6, [r4, #0]
 800c360:	60a5      	str	r5, [r4, #8]
 800c362:	463e      	mov	r6, r7
 800c364:	42be      	cmp	r6, r7
 800c366:	d900      	bls.n	800c36a <__ssputs_r+0x86>
 800c368:	463e      	mov	r6, r7
 800c36a:	4632      	mov	r2, r6
 800c36c:	6820      	ldr	r0, [r4, #0]
 800c36e:	4641      	mov	r1, r8
 800c370:	f000 f966 	bl	800c640 <memmove>
 800c374:	68a3      	ldr	r3, [r4, #8]
 800c376:	6822      	ldr	r2, [r4, #0]
 800c378:	1b9b      	subs	r3, r3, r6
 800c37a:	4432      	add	r2, r6
 800c37c:	60a3      	str	r3, [r4, #8]
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	2000      	movs	r0, #0
 800c382:	e7db      	b.n	800c33c <__ssputs_r+0x58>
 800c384:	462a      	mov	r2, r5
 800c386:	f000 f981 	bl	800c68c <_realloc_r>
 800c38a:	4606      	mov	r6, r0
 800c38c:	2800      	cmp	r0, #0
 800c38e:	d1e1      	bne.n	800c354 <__ssputs_r+0x70>
 800c390:	6921      	ldr	r1, [r4, #16]
 800c392:	4650      	mov	r0, sl
 800c394:	f7ff fefc 	bl	800c190 <_free_r>
 800c398:	e7c7      	b.n	800c32a <__ssputs_r+0x46>
	...

0800c39c <_svfiprintf_r>:
 800c39c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3a0:	4698      	mov	r8, r3
 800c3a2:	898b      	ldrh	r3, [r1, #12]
 800c3a4:	061b      	lsls	r3, r3, #24
 800c3a6:	b09d      	sub	sp, #116	; 0x74
 800c3a8:	4607      	mov	r7, r0
 800c3aa:	460d      	mov	r5, r1
 800c3ac:	4614      	mov	r4, r2
 800c3ae:	d50e      	bpl.n	800c3ce <_svfiprintf_r+0x32>
 800c3b0:	690b      	ldr	r3, [r1, #16]
 800c3b2:	b963      	cbnz	r3, 800c3ce <_svfiprintf_r+0x32>
 800c3b4:	2140      	movs	r1, #64	; 0x40
 800c3b6:	f7ff ff3b 	bl	800c230 <_malloc_r>
 800c3ba:	6028      	str	r0, [r5, #0]
 800c3bc:	6128      	str	r0, [r5, #16]
 800c3be:	b920      	cbnz	r0, 800c3ca <_svfiprintf_r+0x2e>
 800c3c0:	230c      	movs	r3, #12
 800c3c2:	603b      	str	r3, [r7, #0]
 800c3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3c8:	e0d1      	b.n	800c56e <_svfiprintf_r+0x1d2>
 800c3ca:	2340      	movs	r3, #64	; 0x40
 800c3cc:	616b      	str	r3, [r5, #20]
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3d2:	2320      	movs	r3, #32
 800c3d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3dc:	2330      	movs	r3, #48	; 0x30
 800c3de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c588 <_svfiprintf_r+0x1ec>
 800c3e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3e6:	f04f 0901 	mov.w	r9, #1
 800c3ea:	4623      	mov	r3, r4
 800c3ec:	469a      	mov	sl, r3
 800c3ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3f2:	b10a      	cbz	r2, 800c3f8 <_svfiprintf_r+0x5c>
 800c3f4:	2a25      	cmp	r2, #37	; 0x25
 800c3f6:	d1f9      	bne.n	800c3ec <_svfiprintf_r+0x50>
 800c3f8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3fc:	d00b      	beq.n	800c416 <_svfiprintf_r+0x7a>
 800c3fe:	465b      	mov	r3, fp
 800c400:	4622      	mov	r2, r4
 800c402:	4629      	mov	r1, r5
 800c404:	4638      	mov	r0, r7
 800c406:	f7ff ff6d 	bl	800c2e4 <__ssputs_r>
 800c40a:	3001      	adds	r0, #1
 800c40c:	f000 80aa 	beq.w	800c564 <_svfiprintf_r+0x1c8>
 800c410:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c412:	445a      	add	r2, fp
 800c414:	9209      	str	r2, [sp, #36]	; 0x24
 800c416:	f89a 3000 	ldrb.w	r3, [sl]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	f000 80a2 	beq.w	800c564 <_svfiprintf_r+0x1c8>
 800c420:	2300      	movs	r3, #0
 800c422:	f04f 32ff 	mov.w	r2, #4294967295
 800c426:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c42a:	f10a 0a01 	add.w	sl, sl, #1
 800c42e:	9304      	str	r3, [sp, #16]
 800c430:	9307      	str	r3, [sp, #28]
 800c432:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c436:	931a      	str	r3, [sp, #104]	; 0x68
 800c438:	4654      	mov	r4, sl
 800c43a:	2205      	movs	r2, #5
 800c43c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c440:	4851      	ldr	r0, [pc, #324]	; (800c588 <_svfiprintf_r+0x1ec>)
 800c442:	f7f3 feed 	bl	8000220 <memchr>
 800c446:	9a04      	ldr	r2, [sp, #16]
 800c448:	b9d8      	cbnz	r0, 800c482 <_svfiprintf_r+0xe6>
 800c44a:	06d0      	lsls	r0, r2, #27
 800c44c:	bf44      	itt	mi
 800c44e:	2320      	movmi	r3, #32
 800c450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c454:	0711      	lsls	r1, r2, #28
 800c456:	bf44      	itt	mi
 800c458:	232b      	movmi	r3, #43	; 0x2b
 800c45a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c45e:	f89a 3000 	ldrb.w	r3, [sl]
 800c462:	2b2a      	cmp	r3, #42	; 0x2a
 800c464:	d015      	beq.n	800c492 <_svfiprintf_r+0xf6>
 800c466:	9a07      	ldr	r2, [sp, #28]
 800c468:	4654      	mov	r4, sl
 800c46a:	2000      	movs	r0, #0
 800c46c:	f04f 0c0a 	mov.w	ip, #10
 800c470:	4621      	mov	r1, r4
 800c472:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c476:	3b30      	subs	r3, #48	; 0x30
 800c478:	2b09      	cmp	r3, #9
 800c47a:	d94e      	bls.n	800c51a <_svfiprintf_r+0x17e>
 800c47c:	b1b0      	cbz	r0, 800c4ac <_svfiprintf_r+0x110>
 800c47e:	9207      	str	r2, [sp, #28]
 800c480:	e014      	b.n	800c4ac <_svfiprintf_r+0x110>
 800c482:	eba0 0308 	sub.w	r3, r0, r8
 800c486:	fa09 f303 	lsl.w	r3, r9, r3
 800c48a:	4313      	orrs	r3, r2
 800c48c:	9304      	str	r3, [sp, #16]
 800c48e:	46a2      	mov	sl, r4
 800c490:	e7d2      	b.n	800c438 <_svfiprintf_r+0x9c>
 800c492:	9b03      	ldr	r3, [sp, #12]
 800c494:	1d19      	adds	r1, r3, #4
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	9103      	str	r1, [sp, #12]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	bfbb      	ittet	lt
 800c49e:	425b      	neglt	r3, r3
 800c4a0:	f042 0202 	orrlt.w	r2, r2, #2
 800c4a4:	9307      	strge	r3, [sp, #28]
 800c4a6:	9307      	strlt	r3, [sp, #28]
 800c4a8:	bfb8      	it	lt
 800c4aa:	9204      	strlt	r2, [sp, #16]
 800c4ac:	7823      	ldrb	r3, [r4, #0]
 800c4ae:	2b2e      	cmp	r3, #46	; 0x2e
 800c4b0:	d10c      	bne.n	800c4cc <_svfiprintf_r+0x130>
 800c4b2:	7863      	ldrb	r3, [r4, #1]
 800c4b4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4b6:	d135      	bne.n	800c524 <_svfiprintf_r+0x188>
 800c4b8:	9b03      	ldr	r3, [sp, #12]
 800c4ba:	1d1a      	adds	r2, r3, #4
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	9203      	str	r2, [sp, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bfb8      	it	lt
 800c4c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4c8:	3402      	adds	r4, #2
 800c4ca:	9305      	str	r3, [sp, #20]
 800c4cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c598 <_svfiprintf_r+0x1fc>
 800c4d0:	7821      	ldrb	r1, [r4, #0]
 800c4d2:	2203      	movs	r2, #3
 800c4d4:	4650      	mov	r0, sl
 800c4d6:	f7f3 fea3 	bl	8000220 <memchr>
 800c4da:	b140      	cbz	r0, 800c4ee <_svfiprintf_r+0x152>
 800c4dc:	2340      	movs	r3, #64	; 0x40
 800c4de:	eba0 000a 	sub.w	r0, r0, sl
 800c4e2:	fa03 f000 	lsl.w	r0, r3, r0
 800c4e6:	9b04      	ldr	r3, [sp, #16]
 800c4e8:	4303      	orrs	r3, r0
 800c4ea:	3401      	adds	r4, #1
 800c4ec:	9304      	str	r3, [sp, #16]
 800c4ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f2:	4826      	ldr	r0, [pc, #152]	; (800c58c <_svfiprintf_r+0x1f0>)
 800c4f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4f8:	2206      	movs	r2, #6
 800c4fa:	f7f3 fe91 	bl	8000220 <memchr>
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d038      	beq.n	800c574 <_svfiprintf_r+0x1d8>
 800c502:	4b23      	ldr	r3, [pc, #140]	; (800c590 <_svfiprintf_r+0x1f4>)
 800c504:	bb1b      	cbnz	r3, 800c54e <_svfiprintf_r+0x1b2>
 800c506:	9b03      	ldr	r3, [sp, #12]
 800c508:	3307      	adds	r3, #7
 800c50a:	f023 0307 	bic.w	r3, r3, #7
 800c50e:	3308      	adds	r3, #8
 800c510:	9303      	str	r3, [sp, #12]
 800c512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c514:	4433      	add	r3, r6
 800c516:	9309      	str	r3, [sp, #36]	; 0x24
 800c518:	e767      	b.n	800c3ea <_svfiprintf_r+0x4e>
 800c51a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c51e:	460c      	mov	r4, r1
 800c520:	2001      	movs	r0, #1
 800c522:	e7a5      	b.n	800c470 <_svfiprintf_r+0xd4>
 800c524:	2300      	movs	r3, #0
 800c526:	3401      	adds	r4, #1
 800c528:	9305      	str	r3, [sp, #20]
 800c52a:	4619      	mov	r1, r3
 800c52c:	f04f 0c0a 	mov.w	ip, #10
 800c530:	4620      	mov	r0, r4
 800c532:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c536:	3a30      	subs	r2, #48	; 0x30
 800c538:	2a09      	cmp	r2, #9
 800c53a:	d903      	bls.n	800c544 <_svfiprintf_r+0x1a8>
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d0c5      	beq.n	800c4cc <_svfiprintf_r+0x130>
 800c540:	9105      	str	r1, [sp, #20]
 800c542:	e7c3      	b.n	800c4cc <_svfiprintf_r+0x130>
 800c544:	fb0c 2101 	mla	r1, ip, r1, r2
 800c548:	4604      	mov	r4, r0
 800c54a:	2301      	movs	r3, #1
 800c54c:	e7f0      	b.n	800c530 <_svfiprintf_r+0x194>
 800c54e:	ab03      	add	r3, sp, #12
 800c550:	9300      	str	r3, [sp, #0]
 800c552:	462a      	mov	r2, r5
 800c554:	4b0f      	ldr	r3, [pc, #60]	; (800c594 <_svfiprintf_r+0x1f8>)
 800c556:	a904      	add	r1, sp, #16
 800c558:	4638      	mov	r0, r7
 800c55a:	f7fe f80f 	bl	800a57c <_printf_float>
 800c55e:	1c42      	adds	r2, r0, #1
 800c560:	4606      	mov	r6, r0
 800c562:	d1d6      	bne.n	800c512 <_svfiprintf_r+0x176>
 800c564:	89ab      	ldrh	r3, [r5, #12]
 800c566:	065b      	lsls	r3, r3, #25
 800c568:	f53f af2c 	bmi.w	800c3c4 <_svfiprintf_r+0x28>
 800c56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c56e:	b01d      	add	sp, #116	; 0x74
 800c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c574:	ab03      	add	r3, sp, #12
 800c576:	9300      	str	r3, [sp, #0]
 800c578:	462a      	mov	r2, r5
 800c57a:	4b06      	ldr	r3, [pc, #24]	; (800c594 <_svfiprintf_r+0x1f8>)
 800c57c:	a904      	add	r1, sp, #16
 800c57e:	4638      	mov	r0, r7
 800c580:	f7fe faa0 	bl	800aac4 <_printf_i>
 800c584:	e7eb      	b.n	800c55e <_svfiprintf_r+0x1c2>
 800c586:	bf00      	nop
 800c588:	0800ee8c 	.word	0x0800ee8c
 800c58c:	0800ee96 	.word	0x0800ee96
 800c590:	0800a57d 	.word	0x0800a57d
 800c594:	0800c2e5 	.word	0x0800c2e5
 800c598:	0800ee92 	.word	0x0800ee92

0800c59c <_sbrk_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4d06      	ldr	r5, [pc, #24]	; (800c5b8 <_sbrk_r+0x1c>)
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4604      	mov	r4, r0
 800c5a4:	4608      	mov	r0, r1
 800c5a6:	602b      	str	r3, [r5, #0]
 800c5a8:	f7f6 fbe8 	bl	8002d7c <_sbrk>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d102      	bne.n	800c5b6 <_sbrk_r+0x1a>
 800c5b0:	682b      	ldr	r3, [r5, #0]
 800c5b2:	b103      	cbz	r3, 800c5b6 <_sbrk_r+0x1a>
 800c5b4:	6023      	str	r3, [r4, #0]
 800c5b6:	bd38      	pop	{r3, r4, r5, pc}
 800c5b8:	20000ee4 	.word	0x20000ee4

0800c5bc <__assert_func>:
 800c5bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c5be:	4614      	mov	r4, r2
 800c5c0:	461a      	mov	r2, r3
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <__assert_func+0x2c>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	4605      	mov	r5, r0
 800c5c8:	68d8      	ldr	r0, [r3, #12]
 800c5ca:	b14c      	cbz	r4, 800c5e0 <__assert_func+0x24>
 800c5cc:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <__assert_func+0x30>)
 800c5ce:	9100      	str	r1, [sp, #0]
 800c5d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c5d4:	4906      	ldr	r1, [pc, #24]	; (800c5f0 <__assert_func+0x34>)
 800c5d6:	462b      	mov	r3, r5
 800c5d8:	f000 f80e 	bl	800c5f8 <fiprintf>
 800c5dc:	f000 faa4 	bl	800cb28 <abort>
 800c5e0:	4b04      	ldr	r3, [pc, #16]	; (800c5f4 <__assert_func+0x38>)
 800c5e2:	461c      	mov	r4, r3
 800c5e4:	e7f3      	b.n	800c5ce <__assert_func+0x12>
 800c5e6:	bf00      	nop
 800c5e8:	20000040 	.word	0x20000040
 800c5ec:	0800ee9d 	.word	0x0800ee9d
 800c5f0:	0800eeaa 	.word	0x0800eeaa
 800c5f4:	0800eed8 	.word	0x0800eed8

0800c5f8 <fiprintf>:
 800c5f8:	b40e      	push	{r1, r2, r3}
 800c5fa:	b503      	push	{r0, r1, lr}
 800c5fc:	4601      	mov	r1, r0
 800c5fe:	ab03      	add	r3, sp, #12
 800c600:	4805      	ldr	r0, [pc, #20]	; (800c618 <fiprintf+0x20>)
 800c602:	f853 2b04 	ldr.w	r2, [r3], #4
 800c606:	6800      	ldr	r0, [r0, #0]
 800c608:	9301      	str	r3, [sp, #4]
 800c60a:	f000 f88f 	bl	800c72c <_vfiprintf_r>
 800c60e:	b002      	add	sp, #8
 800c610:	f85d eb04 	ldr.w	lr, [sp], #4
 800c614:	b003      	add	sp, #12
 800c616:	4770      	bx	lr
 800c618:	20000040 	.word	0x20000040

0800c61c <__ascii_mbtowc>:
 800c61c:	b082      	sub	sp, #8
 800c61e:	b901      	cbnz	r1, 800c622 <__ascii_mbtowc+0x6>
 800c620:	a901      	add	r1, sp, #4
 800c622:	b142      	cbz	r2, 800c636 <__ascii_mbtowc+0x1a>
 800c624:	b14b      	cbz	r3, 800c63a <__ascii_mbtowc+0x1e>
 800c626:	7813      	ldrb	r3, [r2, #0]
 800c628:	600b      	str	r3, [r1, #0]
 800c62a:	7812      	ldrb	r2, [r2, #0]
 800c62c:	1e10      	subs	r0, r2, #0
 800c62e:	bf18      	it	ne
 800c630:	2001      	movne	r0, #1
 800c632:	b002      	add	sp, #8
 800c634:	4770      	bx	lr
 800c636:	4610      	mov	r0, r2
 800c638:	e7fb      	b.n	800c632 <__ascii_mbtowc+0x16>
 800c63a:	f06f 0001 	mvn.w	r0, #1
 800c63e:	e7f8      	b.n	800c632 <__ascii_mbtowc+0x16>

0800c640 <memmove>:
 800c640:	4288      	cmp	r0, r1
 800c642:	b510      	push	{r4, lr}
 800c644:	eb01 0402 	add.w	r4, r1, r2
 800c648:	d902      	bls.n	800c650 <memmove+0x10>
 800c64a:	4284      	cmp	r4, r0
 800c64c:	4623      	mov	r3, r4
 800c64e:	d807      	bhi.n	800c660 <memmove+0x20>
 800c650:	1e43      	subs	r3, r0, #1
 800c652:	42a1      	cmp	r1, r4
 800c654:	d008      	beq.n	800c668 <memmove+0x28>
 800c656:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c65e:	e7f8      	b.n	800c652 <memmove+0x12>
 800c660:	4402      	add	r2, r0
 800c662:	4601      	mov	r1, r0
 800c664:	428a      	cmp	r2, r1
 800c666:	d100      	bne.n	800c66a <memmove+0x2a>
 800c668:	bd10      	pop	{r4, pc}
 800c66a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c66e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c672:	e7f7      	b.n	800c664 <memmove+0x24>

0800c674 <__malloc_lock>:
 800c674:	4801      	ldr	r0, [pc, #4]	; (800c67c <__malloc_lock+0x8>)
 800c676:	f000 bc17 	b.w	800cea8 <__retarget_lock_acquire_recursive>
 800c67a:	bf00      	nop
 800c67c:	20000eec 	.word	0x20000eec

0800c680 <__malloc_unlock>:
 800c680:	4801      	ldr	r0, [pc, #4]	; (800c688 <__malloc_unlock+0x8>)
 800c682:	f000 bc12 	b.w	800ceaa <__retarget_lock_release_recursive>
 800c686:	bf00      	nop
 800c688:	20000eec 	.word	0x20000eec

0800c68c <_realloc_r>:
 800c68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c68e:	4607      	mov	r7, r0
 800c690:	4614      	mov	r4, r2
 800c692:	460e      	mov	r6, r1
 800c694:	b921      	cbnz	r1, 800c6a0 <_realloc_r+0x14>
 800c696:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c69a:	4611      	mov	r1, r2
 800c69c:	f7ff bdc8 	b.w	800c230 <_malloc_r>
 800c6a0:	b922      	cbnz	r2, 800c6ac <_realloc_r+0x20>
 800c6a2:	f7ff fd75 	bl	800c190 <_free_r>
 800c6a6:	4625      	mov	r5, r4
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6ac:	f000 fc62 	bl	800cf74 <_malloc_usable_size_r>
 800c6b0:	42a0      	cmp	r0, r4
 800c6b2:	d20f      	bcs.n	800c6d4 <_realloc_r+0x48>
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	4638      	mov	r0, r7
 800c6b8:	f7ff fdba 	bl	800c230 <_malloc_r>
 800c6bc:	4605      	mov	r5, r0
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d0f2      	beq.n	800c6a8 <_realloc_r+0x1c>
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4622      	mov	r2, r4
 800c6c6:	f7ff f9c7 	bl	800ba58 <memcpy>
 800c6ca:	4631      	mov	r1, r6
 800c6cc:	4638      	mov	r0, r7
 800c6ce:	f7ff fd5f 	bl	800c190 <_free_r>
 800c6d2:	e7e9      	b.n	800c6a8 <_realloc_r+0x1c>
 800c6d4:	4635      	mov	r5, r6
 800c6d6:	e7e7      	b.n	800c6a8 <_realloc_r+0x1c>

0800c6d8 <__sfputc_r>:
 800c6d8:	6893      	ldr	r3, [r2, #8]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	b410      	push	{r4}
 800c6e0:	6093      	str	r3, [r2, #8]
 800c6e2:	da08      	bge.n	800c6f6 <__sfputc_r+0x1e>
 800c6e4:	6994      	ldr	r4, [r2, #24]
 800c6e6:	42a3      	cmp	r3, r4
 800c6e8:	db01      	blt.n	800c6ee <__sfputc_r+0x16>
 800c6ea:	290a      	cmp	r1, #10
 800c6ec:	d103      	bne.n	800c6f6 <__sfputc_r+0x1e>
 800c6ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c6f2:	f000 b94b 	b.w	800c98c <__swbuf_r>
 800c6f6:	6813      	ldr	r3, [r2, #0]
 800c6f8:	1c58      	adds	r0, r3, #1
 800c6fa:	6010      	str	r0, [r2, #0]
 800c6fc:	7019      	strb	r1, [r3, #0]
 800c6fe:	4608      	mov	r0, r1
 800c700:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <__sfputs_r>:
 800c706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c708:	4606      	mov	r6, r0
 800c70a:	460f      	mov	r7, r1
 800c70c:	4614      	mov	r4, r2
 800c70e:	18d5      	adds	r5, r2, r3
 800c710:	42ac      	cmp	r4, r5
 800c712:	d101      	bne.n	800c718 <__sfputs_r+0x12>
 800c714:	2000      	movs	r0, #0
 800c716:	e007      	b.n	800c728 <__sfputs_r+0x22>
 800c718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c71c:	463a      	mov	r2, r7
 800c71e:	4630      	mov	r0, r6
 800c720:	f7ff ffda 	bl	800c6d8 <__sfputc_r>
 800c724:	1c43      	adds	r3, r0, #1
 800c726:	d1f3      	bne.n	800c710 <__sfputs_r+0xa>
 800c728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c72c <_vfiprintf_r>:
 800c72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c730:	460d      	mov	r5, r1
 800c732:	b09d      	sub	sp, #116	; 0x74
 800c734:	4614      	mov	r4, r2
 800c736:	4698      	mov	r8, r3
 800c738:	4606      	mov	r6, r0
 800c73a:	b118      	cbz	r0, 800c744 <_vfiprintf_r+0x18>
 800c73c:	6983      	ldr	r3, [r0, #24]
 800c73e:	b90b      	cbnz	r3, 800c744 <_vfiprintf_r+0x18>
 800c740:	f000 fb14 	bl	800cd6c <__sinit>
 800c744:	4b89      	ldr	r3, [pc, #548]	; (800c96c <_vfiprintf_r+0x240>)
 800c746:	429d      	cmp	r5, r3
 800c748:	d11b      	bne.n	800c782 <_vfiprintf_r+0x56>
 800c74a:	6875      	ldr	r5, [r6, #4]
 800c74c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c74e:	07d9      	lsls	r1, r3, #31
 800c750:	d405      	bmi.n	800c75e <_vfiprintf_r+0x32>
 800c752:	89ab      	ldrh	r3, [r5, #12]
 800c754:	059a      	lsls	r2, r3, #22
 800c756:	d402      	bmi.n	800c75e <_vfiprintf_r+0x32>
 800c758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c75a:	f000 fba5 	bl	800cea8 <__retarget_lock_acquire_recursive>
 800c75e:	89ab      	ldrh	r3, [r5, #12]
 800c760:	071b      	lsls	r3, r3, #28
 800c762:	d501      	bpl.n	800c768 <_vfiprintf_r+0x3c>
 800c764:	692b      	ldr	r3, [r5, #16]
 800c766:	b9eb      	cbnz	r3, 800c7a4 <_vfiprintf_r+0x78>
 800c768:	4629      	mov	r1, r5
 800c76a:	4630      	mov	r0, r6
 800c76c:	f000 f96e 	bl	800ca4c <__swsetup_r>
 800c770:	b1c0      	cbz	r0, 800c7a4 <_vfiprintf_r+0x78>
 800c772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c774:	07dc      	lsls	r4, r3, #31
 800c776:	d50e      	bpl.n	800c796 <_vfiprintf_r+0x6a>
 800c778:	f04f 30ff 	mov.w	r0, #4294967295
 800c77c:	b01d      	add	sp, #116	; 0x74
 800c77e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c782:	4b7b      	ldr	r3, [pc, #492]	; (800c970 <_vfiprintf_r+0x244>)
 800c784:	429d      	cmp	r5, r3
 800c786:	d101      	bne.n	800c78c <_vfiprintf_r+0x60>
 800c788:	68b5      	ldr	r5, [r6, #8]
 800c78a:	e7df      	b.n	800c74c <_vfiprintf_r+0x20>
 800c78c:	4b79      	ldr	r3, [pc, #484]	; (800c974 <_vfiprintf_r+0x248>)
 800c78e:	429d      	cmp	r5, r3
 800c790:	bf08      	it	eq
 800c792:	68f5      	ldreq	r5, [r6, #12]
 800c794:	e7da      	b.n	800c74c <_vfiprintf_r+0x20>
 800c796:	89ab      	ldrh	r3, [r5, #12]
 800c798:	0598      	lsls	r0, r3, #22
 800c79a:	d4ed      	bmi.n	800c778 <_vfiprintf_r+0x4c>
 800c79c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c79e:	f000 fb84 	bl	800ceaa <__retarget_lock_release_recursive>
 800c7a2:	e7e9      	b.n	800c778 <_vfiprintf_r+0x4c>
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c7a8:	2320      	movs	r3, #32
 800c7aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7b2:	2330      	movs	r3, #48	; 0x30
 800c7b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c978 <_vfiprintf_r+0x24c>
 800c7b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7bc:	f04f 0901 	mov.w	r9, #1
 800c7c0:	4623      	mov	r3, r4
 800c7c2:	469a      	mov	sl, r3
 800c7c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7c8:	b10a      	cbz	r2, 800c7ce <_vfiprintf_r+0xa2>
 800c7ca:	2a25      	cmp	r2, #37	; 0x25
 800c7cc:	d1f9      	bne.n	800c7c2 <_vfiprintf_r+0x96>
 800c7ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c7d2:	d00b      	beq.n	800c7ec <_vfiprintf_r+0xc0>
 800c7d4:	465b      	mov	r3, fp
 800c7d6:	4622      	mov	r2, r4
 800c7d8:	4629      	mov	r1, r5
 800c7da:	4630      	mov	r0, r6
 800c7dc:	f7ff ff93 	bl	800c706 <__sfputs_r>
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	f000 80aa 	beq.w	800c93a <_vfiprintf_r+0x20e>
 800c7e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7e8:	445a      	add	r2, fp
 800c7ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c7ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	f000 80a2 	beq.w	800c93a <_vfiprintf_r+0x20e>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c800:	f10a 0a01 	add.w	sl, sl, #1
 800c804:	9304      	str	r3, [sp, #16]
 800c806:	9307      	str	r3, [sp, #28]
 800c808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c80c:	931a      	str	r3, [sp, #104]	; 0x68
 800c80e:	4654      	mov	r4, sl
 800c810:	2205      	movs	r2, #5
 800c812:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c816:	4858      	ldr	r0, [pc, #352]	; (800c978 <_vfiprintf_r+0x24c>)
 800c818:	f7f3 fd02 	bl	8000220 <memchr>
 800c81c:	9a04      	ldr	r2, [sp, #16]
 800c81e:	b9d8      	cbnz	r0, 800c858 <_vfiprintf_r+0x12c>
 800c820:	06d1      	lsls	r1, r2, #27
 800c822:	bf44      	itt	mi
 800c824:	2320      	movmi	r3, #32
 800c826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c82a:	0713      	lsls	r3, r2, #28
 800c82c:	bf44      	itt	mi
 800c82e:	232b      	movmi	r3, #43	; 0x2b
 800c830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c834:	f89a 3000 	ldrb.w	r3, [sl]
 800c838:	2b2a      	cmp	r3, #42	; 0x2a
 800c83a:	d015      	beq.n	800c868 <_vfiprintf_r+0x13c>
 800c83c:	9a07      	ldr	r2, [sp, #28]
 800c83e:	4654      	mov	r4, sl
 800c840:	2000      	movs	r0, #0
 800c842:	f04f 0c0a 	mov.w	ip, #10
 800c846:	4621      	mov	r1, r4
 800c848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c84c:	3b30      	subs	r3, #48	; 0x30
 800c84e:	2b09      	cmp	r3, #9
 800c850:	d94e      	bls.n	800c8f0 <_vfiprintf_r+0x1c4>
 800c852:	b1b0      	cbz	r0, 800c882 <_vfiprintf_r+0x156>
 800c854:	9207      	str	r2, [sp, #28]
 800c856:	e014      	b.n	800c882 <_vfiprintf_r+0x156>
 800c858:	eba0 0308 	sub.w	r3, r0, r8
 800c85c:	fa09 f303 	lsl.w	r3, r9, r3
 800c860:	4313      	orrs	r3, r2
 800c862:	9304      	str	r3, [sp, #16]
 800c864:	46a2      	mov	sl, r4
 800c866:	e7d2      	b.n	800c80e <_vfiprintf_r+0xe2>
 800c868:	9b03      	ldr	r3, [sp, #12]
 800c86a:	1d19      	adds	r1, r3, #4
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	9103      	str	r1, [sp, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	bfbb      	ittet	lt
 800c874:	425b      	neglt	r3, r3
 800c876:	f042 0202 	orrlt.w	r2, r2, #2
 800c87a:	9307      	strge	r3, [sp, #28]
 800c87c:	9307      	strlt	r3, [sp, #28]
 800c87e:	bfb8      	it	lt
 800c880:	9204      	strlt	r2, [sp, #16]
 800c882:	7823      	ldrb	r3, [r4, #0]
 800c884:	2b2e      	cmp	r3, #46	; 0x2e
 800c886:	d10c      	bne.n	800c8a2 <_vfiprintf_r+0x176>
 800c888:	7863      	ldrb	r3, [r4, #1]
 800c88a:	2b2a      	cmp	r3, #42	; 0x2a
 800c88c:	d135      	bne.n	800c8fa <_vfiprintf_r+0x1ce>
 800c88e:	9b03      	ldr	r3, [sp, #12]
 800c890:	1d1a      	adds	r2, r3, #4
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	9203      	str	r2, [sp, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	bfb8      	it	lt
 800c89a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c89e:	3402      	adds	r4, #2
 800c8a0:	9305      	str	r3, [sp, #20]
 800c8a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c988 <_vfiprintf_r+0x25c>
 800c8a6:	7821      	ldrb	r1, [r4, #0]
 800c8a8:	2203      	movs	r2, #3
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	f7f3 fcb8 	bl	8000220 <memchr>
 800c8b0:	b140      	cbz	r0, 800c8c4 <_vfiprintf_r+0x198>
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	eba0 000a 	sub.w	r0, r0, sl
 800c8b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c8bc:	9b04      	ldr	r3, [sp, #16]
 800c8be:	4303      	orrs	r3, r0
 800c8c0:	3401      	adds	r4, #1
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8c8:	482c      	ldr	r0, [pc, #176]	; (800c97c <_vfiprintf_r+0x250>)
 800c8ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8ce:	2206      	movs	r2, #6
 800c8d0:	f7f3 fca6 	bl	8000220 <memchr>
 800c8d4:	2800      	cmp	r0, #0
 800c8d6:	d03f      	beq.n	800c958 <_vfiprintf_r+0x22c>
 800c8d8:	4b29      	ldr	r3, [pc, #164]	; (800c980 <_vfiprintf_r+0x254>)
 800c8da:	bb1b      	cbnz	r3, 800c924 <_vfiprintf_r+0x1f8>
 800c8dc:	9b03      	ldr	r3, [sp, #12]
 800c8de:	3307      	adds	r3, #7
 800c8e0:	f023 0307 	bic.w	r3, r3, #7
 800c8e4:	3308      	adds	r3, #8
 800c8e6:	9303      	str	r3, [sp, #12]
 800c8e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8ea:	443b      	add	r3, r7
 800c8ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ee:	e767      	b.n	800c7c0 <_vfiprintf_r+0x94>
 800c8f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	2001      	movs	r0, #1
 800c8f8:	e7a5      	b.n	800c846 <_vfiprintf_r+0x11a>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	3401      	adds	r4, #1
 800c8fe:	9305      	str	r3, [sp, #20]
 800c900:	4619      	mov	r1, r3
 800c902:	f04f 0c0a 	mov.w	ip, #10
 800c906:	4620      	mov	r0, r4
 800c908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c90c:	3a30      	subs	r2, #48	; 0x30
 800c90e:	2a09      	cmp	r2, #9
 800c910:	d903      	bls.n	800c91a <_vfiprintf_r+0x1ee>
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0c5      	beq.n	800c8a2 <_vfiprintf_r+0x176>
 800c916:	9105      	str	r1, [sp, #20]
 800c918:	e7c3      	b.n	800c8a2 <_vfiprintf_r+0x176>
 800c91a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c91e:	4604      	mov	r4, r0
 800c920:	2301      	movs	r3, #1
 800c922:	e7f0      	b.n	800c906 <_vfiprintf_r+0x1da>
 800c924:	ab03      	add	r3, sp, #12
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	462a      	mov	r2, r5
 800c92a:	4b16      	ldr	r3, [pc, #88]	; (800c984 <_vfiprintf_r+0x258>)
 800c92c:	a904      	add	r1, sp, #16
 800c92e:	4630      	mov	r0, r6
 800c930:	f7fd fe24 	bl	800a57c <_printf_float>
 800c934:	4607      	mov	r7, r0
 800c936:	1c78      	adds	r0, r7, #1
 800c938:	d1d6      	bne.n	800c8e8 <_vfiprintf_r+0x1bc>
 800c93a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c93c:	07d9      	lsls	r1, r3, #31
 800c93e:	d405      	bmi.n	800c94c <_vfiprintf_r+0x220>
 800c940:	89ab      	ldrh	r3, [r5, #12]
 800c942:	059a      	lsls	r2, r3, #22
 800c944:	d402      	bmi.n	800c94c <_vfiprintf_r+0x220>
 800c946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c948:	f000 faaf 	bl	800ceaa <__retarget_lock_release_recursive>
 800c94c:	89ab      	ldrh	r3, [r5, #12]
 800c94e:	065b      	lsls	r3, r3, #25
 800c950:	f53f af12 	bmi.w	800c778 <_vfiprintf_r+0x4c>
 800c954:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c956:	e711      	b.n	800c77c <_vfiprintf_r+0x50>
 800c958:	ab03      	add	r3, sp, #12
 800c95a:	9300      	str	r3, [sp, #0]
 800c95c:	462a      	mov	r2, r5
 800c95e:	4b09      	ldr	r3, [pc, #36]	; (800c984 <_vfiprintf_r+0x258>)
 800c960:	a904      	add	r1, sp, #16
 800c962:	4630      	mov	r0, r6
 800c964:	f7fe f8ae 	bl	800aac4 <_printf_i>
 800c968:	e7e4      	b.n	800c934 <_vfiprintf_r+0x208>
 800c96a:	bf00      	nop
 800c96c:	0800f004 	.word	0x0800f004
 800c970:	0800f024 	.word	0x0800f024
 800c974:	0800efe4 	.word	0x0800efe4
 800c978:	0800ee8c 	.word	0x0800ee8c
 800c97c:	0800ee96 	.word	0x0800ee96
 800c980:	0800a57d 	.word	0x0800a57d
 800c984:	0800c707 	.word	0x0800c707
 800c988:	0800ee92 	.word	0x0800ee92

0800c98c <__swbuf_r>:
 800c98c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c98e:	460e      	mov	r6, r1
 800c990:	4614      	mov	r4, r2
 800c992:	4605      	mov	r5, r0
 800c994:	b118      	cbz	r0, 800c99e <__swbuf_r+0x12>
 800c996:	6983      	ldr	r3, [r0, #24]
 800c998:	b90b      	cbnz	r3, 800c99e <__swbuf_r+0x12>
 800c99a:	f000 f9e7 	bl	800cd6c <__sinit>
 800c99e:	4b21      	ldr	r3, [pc, #132]	; (800ca24 <__swbuf_r+0x98>)
 800c9a0:	429c      	cmp	r4, r3
 800c9a2:	d12b      	bne.n	800c9fc <__swbuf_r+0x70>
 800c9a4:	686c      	ldr	r4, [r5, #4]
 800c9a6:	69a3      	ldr	r3, [r4, #24]
 800c9a8:	60a3      	str	r3, [r4, #8]
 800c9aa:	89a3      	ldrh	r3, [r4, #12]
 800c9ac:	071a      	lsls	r2, r3, #28
 800c9ae:	d52f      	bpl.n	800ca10 <__swbuf_r+0x84>
 800c9b0:	6923      	ldr	r3, [r4, #16]
 800c9b2:	b36b      	cbz	r3, 800ca10 <__swbuf_r+0x84>
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	6820      	ldr	r0, [r4, #0]
 800c9b8:	1ac0      	subs	r0, r0, r3
 800c9ba:	6963      	ldr	r3, [r4, #20]
 800c9bc:	b2f6      	uxtb	r6, r6
 800c9be:	4283      	cmp	r3, r0
 800c9c0:	4637      	mov	r7, r6
 800c9c2:	dc04      	bgt.n	800c9ce <__swbuf_r+0x42>
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	4628      	mov	r0, r5
 800c9c8:	f000 f93c 	bl	800cc44 <_fflush_r>
 800c9cc:	bb30      	cbnz	r0, 800ca1c <__swbuf_r+0x90>
 800c9ce:	68a3      	ldr	r3, [r4, #8]
 800c9d0:	3b01      	subs	r3, #1
 800c9d2:	60a3      	str	r3, [r4, #8]
 800c9d4:	6823      	ldr	r3, [r4, #0]
 800c9d6:	1c5a      	adds	r2, r3, #1
 800c9d8:	6022      	str	r2, [r4, #0]
 800c9da:	701e      	strb	r6, [r3, #0]
 800c9dc:	6963      	ldr	r3, [r4, #20]
 800c9de:	3001      	adds	r0, #1
 800c9e0:	4283      	cmp	r3, r0
 800c9e2:	d004      	beq.n	800c9ee <__swbuf_r+0x62>
 800c9e4:	89a3      	ldrh	r3, [r4, #12]
 800c9e6:	07db      	lsls	r3, r3, #31
 800c9e8:	d506      	bpl.n	800c9f8 <__swbuf_r+0x6c>
 800c9ea:	2e0a      	cmp	r6, #10
 800c9ec:	d104      	bne.n	800c9f8 <__swbuf_r+0x6c>
 800c9ee:	4621      	mov	r1, r4
 800c9f0:	4628      	mov	r0, r5
 800c9f2:	f000 f927 	bl	800cc44 <_fflush_r>
 800c9f6:	b988      	cbnz	r0, 800ca1c <__swbuf_r+0x90>
 800c9f8:	4638      	mov	r0, r7
 800c9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ca28 <__swbuf_r+0x9c>)
 800c9fe:	429c      	cmp	r4, r3
 800ca00:	d101      	bne.n	800ca06 <__swbuf_r+0x7a>
 800ca02:	68ac      	ldr	r4, [r5, #8]
 800ca04:	e7cf      	b.n	800c9a6 <__swbuf_r+0x1a>
 800ca06:	4b09      	ldr	r3, [pc, #36]	; (800ca2c <__swbuf_r+0xa0>)
 800ca08:	429c      	cmp	r4, r3
 800ca0a:	bf08      	it	eq
 800ca0c:	68ec      	ldreq	r4, [r5, #12]
 800ca0e:	e7ca      	b.n	800c9a6 <__swbuf_r+0x1a>
 800ca10:	4621      	mov	r1, r4
 800ca12:	4628      	mov	r0, r5
 800ca14:	f000 f81a 	bl	800ca4c <__swsetup_r>
 800ca18:	2800      	cmp	r0, #0
 800ca1a:	d0cb      	beq.n	800c9b4 <__swbuf_r+0x28>
 800ca1c:	f04f 37ff 	mov.w	r7, #4294967295
 800ca20:	e7ea      	b.n	800c9f8 <__swbuf_r+0x6c>
 800ca22:	bf00      	nop
 800ca24:	0800f004 	.word	0x0800f004
 800ca28:	0800f024 	.word	0x0800f024
 800ca2c:	0800efe4 	.word	0x0800efe4

0800ca30 <__ascii_wctomb>:
 800ca30:	b149      	cbz	r1, 800ca46 <__ascii_wctomb+0x16>
 800ca32:	2aff      	cmp	r2, #255	; 0xff
 800ca34:	bf85      	ittet	hi
 800ca36:	238a      	movhi	r3, #138	; 0x8a
 800ca38:	6003      	strhi	r3, [r0, #0]
 800ca3a:	700a      	strbls	r2, [r1, #0]
 800ca3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca40:	bf98      	it	ls
 800ca42:	2001      	movls	r0, #1
 800ca44:	4770      	bx	lr
 800ca46:	4608      	mov	r0, r1
 800ca48:	4770      	bx	lr
	...

0800ca4c <__swsetup_r>:
 800ca4c:	4b32      	ldr	r3, [pc, #200]	; (800cb18 <__swsetup_r+0xcc>)
 800ca4e:	b570      	push	{r4, r5, r6, lr}
 800ca50:	681d      	ldr	r5, [r3, #0]
 800ca52:	4606      	mov	r6, r0
 800ca54:	460c      	mov	r4, r1
 800ca56:	b125      	cbz	r5, 800ca62 <__swsetup_r+0x16>
 800ca58:	69ab      	ldr	r3, [r5, #24]
 800ca5a:	b913      	cbnz	r3, 800ca62 <__swsetup_r+0x16>
 800ca5c:	4628      	mov	r0, r5
 800ca5e:	f000 f985 	bl	800cd6c <__sinit>
 800ca62:	4b2e      	ldr	r3, [pc, #184]	; (800cb1c <__swsetup_r+0xd0>)
 800ca64:	429c      	cmp	r4, r3
 800ca66:	d10f      	bne.n	800ca88 <__swsetup_r+0x3c>
 800ca68:	686c      	ldr	r4, [r5, #4]
 800ca6a:	89a3      	ldrh	r3, [r4, #12]
 800ca6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca70:	0719      	lsls	r1, r3, #28
 800ca72:	d42c      	bmi.n	800cace <__swsetup_r+0x82>
 800ca74:	06dd      	lsls	r5, r3, #27
 800ca76:	d411      	bmi.n	800ca9c <__swsetup_r+0x50>
 800ca78:	2309      	movs	r3, #9
 800ca7a:	6033      	str	r3, [r6, #0]
 800ca7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca80:	81a3      	strh	r3, [r4, #12]
 800ca82:	f04f 30ff 	mov.w	r0, #4294967295
 800ca86:	e03e      	b.n	800cb06 <__swsetup_r+0xba>
 800ca88:	4b25      	ldr	r3, [pc, #148]	; (800cb20 <__swsetup_r+0xd4>)
 800ca8a:	429c      	cmp	r4, r3
 800ca8c:	d101      	bne.n	800ca92 <__swsetup_r+0x46>
 800ca8e:	68ac      	ldr	r4, [r5, #8]
 800ca90:	e7eb      	b.n	800ca6a <__swsetup_r+0x1e>
 800ca92:	4b24      	ldr	r3, [pc, #144]	; (800cb24 <__swsetup_r+0xd8>)
 800ca94:	429c      	cmp	r4, r3
 800ca96:	bf08      	it	eq
 800ca98:	68ec      	ldreq	r4, [r5, #12]
 800ca9a:	e7e6      	b.n	800ca6a <__swsetup_r+0x1e>
 800ca9c:	0758      	lsls	r0, r3, #29
 800ca9e:	d512      	bpl.n	800cac6 <__swsetup_r+0x7a>
 800caa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800caa2:	b141      	cbz	r1, 800cab6 <__swsetup_r+0x6a>
 800caa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800caa8:	4299      	cmp	r1, r3
 800caaa:	d002      	beq.n	800cab2 <__swsetup_r+0x66>
 800caac:	4630      	mov	r0, r6
 800caae:	f7ff fb6f 	bl	800c190 <_free_r>
 800cab2:	2300      	movs	r3, #0
 800cab4:	6363      	str	r3, [r4, #52]	; 0x34
 800cab6:	89a3      	ldrh	r3, [r4, #12]
 800cab8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cabc:	81a3      	strh	r3, [r4, #12]
 800cabe:	2300      	movs	r3, #0
 800cac0:	6063      	str	r3, [r4, #4]
 800cac2:	6923      	ldr	r3, [r4, #16]
 800cac4:	6023      	str	r3, [r4, #0]
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f043 0308 	orr.w	r3, r3, #8
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	6923      	ldr	r3, [r4, #16]
 800cad0:	b94b      	cbnz	r3, 800cae6 <__swsetup_r+0x9a>
 800cad2:	89a3      	ldrh	r3, [r4, #12]
 800cad4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cadc:	d003      	beq.n	800cae6 <__swsetup_r+0x9a>
 800cade:	4621      	mov	r1, r4
 800cae0:	4630      	mov	r0, r6
 800cae2:	f000 fa07 	bl	800cef4 <__smakebuf_r>
 800cae6:	89a0      	ldrh	r0, [r4, #12]
 800cae8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caec:	f010 0301 	ands.w	r3, r0, #1
 800caf0:	d00a      	beq.n	800cb08 <__swsetup_r+0xbc>
 800caf2:	2300      	movs	r3, #0
 800caf4:	60a3      	str	r3, [r4, #8]
 800caf6:	6963      	ldr	r3, [r4, #20]
 800caf8:	425b      	negs	r3, r3
 800cafa:	61a3      	str	r3, [r4, #24]
 800cafc:	6923      	ldr	r3, [r4, #16]
 800cafe:	b943      	cbnz	r3, 800cb12 <__swsetup_r+0xc6>
 800cb00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb04:	d1ba      	bne.n	800ca7c <__swsetup_r+0x30>
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	0781      	lsls	r1, r0, #30
 800cb0a:	bf58      	it	pl
 800cb0c:	6963      	ldrpl	r3, [r4, #20]
 800cb0e:	60a3      	str	r3, [r4, #8]
 800cb10:	e7f4      	b.n	800cafc <__swsetup_r+0xb0>
 800cb12:	2000      	movs	r0, #0
 800cb14:	e7f7      	b.n	800cb06 <__swsetup_r+0xba>
 800cb16:	bf00      	nop
 800cb18:	20000040 	.word	0x20000040
 800cb1c:	0800f004 	.word	0x0800f004
 800cb20:	0800f024 	.word	0x0800f024
 800cb24:	0800efe4 	.word	0x0800efe4

0800cb28 <abort>:
 800cb28:	b508      	push	{r3, lr}
 800cb2a:	2006      	movs	r0, #6
 800cb2c:	f000 fa52 	bl	800cfd4 <raise>
 800cb30:	2001      	movs	r0, #1
 800cb32:	f7f6 f8ab 	bl	8002c8c <_exit>
	...

0800cb38 <__sflush_r>:
 800cb38:	898a      	ldrh	r2, [r1, #12]
 800cb3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb3e:	4605      	mov	r5, r0
 800cb40:	0710      	lsls	r0, r2, #28
 800cb42:	460c      	mov	r4, r1
 800cb44:	d458      	bmi.n	800cbf8 <__sflush_r+0xc0>
 800cb46:	684b      	ldr	r3, [r1, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	dc05      	bgt.n	800cb58 <__sflush_r+0x20>
 800cb4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	dc02      	bgt.n	800cb58 <__sflush_r+0x20>
 800cb52:	2000      	movs	r0, #0
 800cb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb5a:	2e00      	cmp	r6, #0
 800cb5c:	d0f9      	beq.n	800cb52 <__sflush_r+0x1a>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb64:	682f      	ldr	r7, [r5, #0]
 800cb66:	602b      	str	r3, [r5, #0]
 800cb68:	d032      	beq.n	800cbd0 <__sflush_r+0x98>
 800cb6a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	075a      	lsls	r2, r3, #29
 800cb70:	d505      	bpl.n	800cb7e <__sflush_r+0x46>
 800cb72:	6863      	ldr	r3, [r4, #4]
 800cb74:	1ac0      	subs	r0, r0, r3
 800cb76:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb78:	b10b      	cbz	r3, 800cb7e <__sflush_r+0x46>
 800cb7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb7c:	1ac0      	subs	r0, r0, r3
 800cb7e:	2300      	movs	r3, #0
 800cb80:	4602      	mov	r2, r0
 800cb82:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb84:	6a21      	ldr	r1, [r4, #32]
 800cb86:	4628      	mov	r0, r5
 800cb88:	47b0      	blx	r6
 800cb8a:	1c43      	adds	r3, r0, #1
 800cb8c:	89a3      	ldrh	r3, [r4, #12]
 800cb8e:	d106      	bne.n	800cb9e <__sflush_r+0x66>
 800cb90:	6829      	ldr	r1, [r5, #0]
 800cb92:	291d      	cmp	r1, #29
 800cb94:	d82c      	bhi.n	800cbf0 <__sflush_r+0xb8>
 800cb96:	4a2a      	ldr	r2, [pc, #168]	; (800cc40 <__sflush_r+0x108>)
 800cb98:	40ca      	lsrs	r2, r1
 800cb9a:	07d6      	lsls	r6, r2, #31
 800cb9c:	d528      	bpl.n	800cbf0 <__sflush_r+0xb8>
 800cb9e:	2200      	movs	r2, #0
 800cba0:	6062      	str	r2, [r4, #4]
 800cba2:	04d9      	lsls	r1, r3, #19
 800cba4:	6922      	ldr	r2, [r4, #16]
 800cba6:	6022      	str	r2, [r4, #0]
 800cba8:	d504      	bpl.n	800cbb4 <__sflush_r+0x7c>
 800cbaa:	1c42      	adds	r2, r0, #1
 800cbac:	d101      	bne.n	800cbb2 <__sflush_r+0x7a>
 800cbae:	682b      	ldr	r3, [r5, #0]
 800cbb0:	b903      	cbnz	r3, 800cbb4 <__sflush_r+0x7c>
 800cbb2:	6560      	str	r0, [r4, #84]	; 0x54
 800cbb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbb6:	602f      	str	r7, [r5, #0]
 800cbb8:	2900      	cmp	r1, #0
 800cbba:	d0ca      	beq.n	800cb52 <__sflush_r+0x1a>
 800cbbc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbc0:	4299      	cmp	r1, r3
 800cbc2:	d002      	beq.n	800cbca <__sflush_r+0x92>
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f7ff fae3 	bl	800c190 <_free_r>
 800cbca:	2000      	movs	r0, #0
 800cbcc:	6360      	str	r0, [r4, #52]	; 0x34
 800cbce:	e7c1      	b.n	800cb54 <__sflush_r+0x1c>
 800cbd0:	6a21      	ldr	r1, [r4, #32]
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	4628      	mov	r0, r5
 800cbd6:	47b0      	blx	r6
 800cbd8:	1c41      	adds	r1, r0, #1
 800cbda:	d1c7      	bne.n	800cb6c <__sflush_r+0x34>
 800cbdc:	682b      	ldr	r3, [r5, #0]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d0c4      	beq.n	800cb6c <__sflush_r+0x34>
 800cbe2:	2b1d      	cmp	r3, #29
 800cbe4:	d001      	beq.n	800cbea <__sflush_r+0xb2>
 800cbe6:	2b16      	cmp	r3, #22
 800cbe8:	d101      	bne.n	800cbee <__sflush_r+0xb6>
 800cbea:	602f      	str	r7, [r5, #0]
 800cbec:	e7b1      	b.n	800cb52 <__sflush_r+0x1a>
 800cbee:	89a3      	ldrh	r3, [r4, #12]
 800cbf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	e7ad      	b.n	800cb54 <__sflush_r+0x1c>
 800cbf8:	690f      	ldr	r7, [r1, #16]
 800cbfa:	2f00      	cmp	r7, #0
 800cbfc:	d0a9      	beq.n	800cb52 <__sflush_r+0x1a>
 800cbfe:	0793      	lsls	r3, r2, #30
 800cc00:	680e      	ldr	r6, [r1, #0]
 800cc02:	bf08      	it	eq
 800cc04:	694b      	ldreq	r3, [r1, #20]
 800cc06:	600f      	str	r7, [r1, #0]
 800cc08:	bf18      	it	ne
 800cc0a:	2300      	movne	r3, #0
 800cc0c:	eba6 0807 	sub.w	r8, r6, r7
 800cc10:	608b      	str	r3, [r1, #8]
 800cc12:	f1b8 0f00 	cmp.w	r8, #0
 800cc16:	dd9c      	ble.n	800cb52 <__sflush_r+0x1a>
 800cc18:	6a21      	ldr	r1, [r4, #32]
 800cc1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cc1c:	4643      	mov	r3, r8
 800cc1e:	463a      	mov	r2, r7
 800cc20:	4628      	mov	r0, r5
 800cc22:	47b0      	blx	r6
 800cc24:	2800      	cmp	r0, #0
 800cc26:	dc06      	bgt.n	800cc36 <__sflush_r+0xfe>
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	f04f 30ff 	mov.w	r0, #4294967295
 800cc34:	e78e      	b.n	800cb54 <__sflush_r+0x1c>
 800cc36:	4407      	add	r7, r0
 800cc38:	eba8 0800 	sub.w	r8, r8, r0
 800cc3c:	e7e9      	b.n	800cc12 <__sflush_r+0xda>
 800cc3e:	bf00      	nop
 800cc40:	20400001 	.word	0x20400001

0800cc44 <_fflush_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	690b      	ldr	r3, [r1, #16]
 800cc48:	4605      	mov	r5, r0
 800cc4a:	460c      	mov	r4, r1
 800cc4c:	b913      	cbnz	r3, 800cc54 <_fflush_r+0x10>
 800cc4e:	2500      	movs	r5, #0
 800cc50:	4628      	mov	r0, r5
 800cc52:	bd38      	pop	{r3, r4, r5, pc}
 800cc54:	b118      	cbz	r0, 800cc5e <_fflush_r+0x1a>
 800cc56:	6983      	ldr	r3, [r0, #24]
 800cc58:	b90b      	cbnz	r3, 800cc5e <_fflush_r+0x1a>
 800cc5a:	f000 f887 	bl	800cd6c <__sinit>
 800cc5e:	4b14      	ldr	r3, [pc, #80]	; (800ccb0 <_fflush_r+0x6c>)
 800cc60:	429c      	cmp	r4, r3
 800cc62:	d11b      	bne.n	800cc9c <_fflush_r+0x58>
 800cc64:	686c      	ldr	r4, [r5, #4]
 800cc66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d0ef      	beq.n	800cc4e <_fflush_r+0xa>
 800cc6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc70:	07d0      	lsls	r0, r2, #31
 800cc72:	d404      	bmi.n	800cc7e <_fflush_r+0x3a>
 800cc74:	0599      	lsls	r1, r3, #22
 800cc76:	d402      	bmi.n	800cc7e <_fflush_r+0x3a>
 800cc78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc7a:	f000 f915 	bl	800cea8 <__retarget_lock_acquire_recursive>
 800cc7e:	4628      	mov	r0, r5
 800cc80:	4621      	mov	r1, r4
 800cc82:	f7ff ff59 	bl	800cb38 <__sflush_r>
 800cc86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc88:	07da      	lsls	r2, r3, #31
 800cc8a:	4605      	mov	r5, r0
 800cc8c:	d4e0      	bmi.n	800cc50 <_fflush_r+0xc>
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	059b      	lsls	r3, r3, #22
 800cc92:	d4dd      	bmi.n	800cc50 <_fflush_r+0xc>
 800cc94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc96:	f000 f908 	bl	800ceaa <__retarget_lock_release_recursive>
 800cc9a:	e7d9      	b.n	800cc50 <_fflush_r+0xc>
 800cc9c:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <_fflush_r+0x70>)
 800cc9e:	429c      	cmp	r4, r3
 800cca0:	d101      	bne.n	800cca6 <_fflush_r+0x62>
 800cca2:	68ac      	ldr	r4, [r5, #8]
 800cca4:	e7df      	b.n	800cc66 <_fflush_r+0x22>
 800cca6:	4b04      	ldr	r3, [pc, #16]	; (800ccb8 <_fflush_r+0x74>)
 800cca8:	429c      	cmp	r4, r3
 800ccaa:	bf08      	it	eq
 800ccac:	68ec      	ldreq	r4, [r5, #12]
 800ccae:	e7da      	b.n	800cc66 <_fflush_r+0x22>
 800ccb0:	0800f004 	.word	0x0800f004
 800ccb4:	0800f024 	.word	0x0800f024
 800ccb8:	0800efe4 	.word	0x0800efe4

0800ccbc <std>:
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	b510      	push	{r4, lr}
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	e9c0 3300 	strd	r3, r3, [r0]
 800ccc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ccca:	6083      	str	r3, [r0, #8]
 800cccc:	8181      	strh	r1, [r0, #12]
 800ccce:	6643      	str	r3, [r0, #100]	; 0x64
 800ccd0:	81c2      	strh	r2, [r0, #14]
 800ccd2:	6183      	str	r3, [r0, #24]
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	2208      	movs	r2, #8
 800ccd8:	305c      	adds	r0, #92	; 0x5c
 800ccda:	f7fd fba7 	bl	800a42c <memset>
 800ccde:	4b05      	ldr	r3, [pc, #20]	; (800ccf4 <std+0x38>)
 800cce0:	6263      	str	r3, [r4, #36]	; 0x24
 800cce2:	4b05      	ldr	r3, [pc, #20]	; (800ccf8 <std+0x3c>)
 800cce4:	62a3      	str	r3, [r4, #40]	; 0x28
 800cce6:	4b05      	ldr	r3, [pc, #20]	; (800ccfc <std+0x40>)
 800cce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ccea:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <std+0x44>)
 800ccec:	6224      	str	r4, [r4, #32]
 800ccee:	6323      	str	r3, [r4, #48]	; 0x30
 800ccf0:	bd10      	pop	{r4, pc}
 800ccf2:	bf00      	nop
 800ccf4:	0800d00d 	.word	0x0800d00d
 800ccf8:	0800d02f 	.word	0x0800d02f
 800ccfc:	0800d067 	.word	0x0800d067
 800cd00:	0800d08b 	.word	0x0800d08b

0800cd04 <_cleanup_r>:
 800cd04:	4901      	ldr	r1, [pc, #4]	; (800cd0c <_cleanup_r+0x8>)
 800cd06:	f000 b8af 	b.w	800ce68 <_fwalk_reent>
 800cd0a:	bf00      	nop
 800cd0c:	0800cc45 	.word	0x0800cc45

0800cd10 <__sfmoreglue>:
 800cd10:	b570      	push	{r4, r5, r6, lr}
 800cd12:	1e4a      	subs	r2, r1, #1
 800cd14:	2568      	movs	r5, #104	; 0x68
 800cd16:	4355      	muls	r5, r2
 800cd18:	460e      	mov	r6, r1
 800cd1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cd1e:	f7ff fa87 	bl	800c230 <_malloc_r>
 800cd22:	4604      	mov	r4, r0
 800cd24:	b140      	cbz	r0, 800cd38 <__sfmoreglue+0x28>
 800cd26:	2100      	movs	r1, #0
 800cd28:	e9c0 1600 	strd	r1, r6, [r0]
 800cd2c:	300c      	adds	r0, #12
 800cd2e:	60a0      	str	r0, [r4, #8]
 800cd30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cd34:	f7fd fb7a 	bl	800a42c <memset>
 800cd38:	4620      	mov	r0, r4
 800cd3a:	bd70      	pop	{r4, r5, r6, pc}

0800cd3c <__sfp_lock_acquire>:
 800cd3c:	4801      	ldr	r0, [pc, #4]	; (800cd44 <__sfp_lock_acquire+0x8>)
 800cd3e:	f000 b8b3 	b.w	800cea8 <__retarget_lock_acquire_recursive>
 800cd42:	bf00      	nop
 800cd44:	20000ef0 	.word	0x20000ef0

0800cd48 <__sfp_lock_release>:
 800cd48:	4801      	ldr	r0, [pc, #4]	; (800cd50 <__sfp_lock_release+0x8>)
 800cd4a:	f000 b8ae 	b.w	800ceaa <__retarget_lock_release_recursive>
 800cd4e:	bf00      	nop
 800cd50:	20000ef0 	.word	0x20000ef0

0800cd54 <__sinit_lock_acquire>:
 800cd54:	4801      	ldr	r0, [pc, #4]	; (800cd5c <__sinit_lock_acquire+0x8>)
 800cd56:	f000 b8a7 	b.w	800cea8 <__retarget_lock_acquire_recursive>
 800cd5a:	bf00      	nop
 800cd5c:	20000eeb 	.word	0x20000eeb

0800cd60 <__sinit_lock_release>:
 800cd60:	4801      	ldr	r0, [pc, #4]	; (800cd68 <__sinit_lock_release+0x8>)
 800cd62:	f000 b8a2 	b.w	800ceaa <__retarget_lock_release_recursive>
 800cd66:	bf00      	nop
 800cd68:	20000eeb 	.word	0x20000eeb

0800cd6c <__sinit>:
 800cd6c:	b510      	push	{r4, lr}
 800cd6e:	4604      	mov	r4, r0
 800cd70:	f7ff fff0 	bl	800cd54 <__sinit_lock_acquire>
 800cd74:	69a3      	ldr	r3, [r4, #24]
 800cd76:	b11b      	cbz	r3, 800cd80 <__sinit+0x14>
 800cd78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd7c:	f7ff bff0 	b.w	800cd60 <__sinit_lock_release>
 800cd80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cd84:	6523      	str	r3, [r4, #80]	; 0x50
 800cd86:	4b13      	ldr	r3, [pc, #76]	; (800cdd4 <__sinit+0x68>)
 800cd88:	4a13      	ldr	r2, [pc, #76]	; (800cdd8 <__sinit+0x6c>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800cd8e:	42a3      	cmp	r3, r4
 800cd90:	bf04      	itt	eq
 800cd92:	2301      	moveq	r3, #1
 800cd94:	61a3      	streq	r3, [r4, #24]
 800cd96:	4620      	mov	r0, r4
 800cd98:	f000 f820 	bl	800cddc <__sfp>
 800cd9c:	6060      	str	r0, [r4, #4]
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f000 f81c 	bl	800cddc <__sfp>
 800cda4:	60a0      	str	r0, [r4, #8]
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 f818 	bl	800cddc <__sfp>
 800cdac:	2200      	movs	r2, #0
 800cdae:	60e0      	str	r0, [r4, #12]
 800cdb0:	2104      	movs	r1, #4
 800cdb2:	6860      	ldr	r0, [r4, #4]
 800cdb4:	f7ff ff82 	bl	800ccbc <std>
 800cdb8:	68a0      	ldr	r0, [r4, #8]
 800cdba:	2201      	movs	r2, #1
 800cdbc:	2109      	movs	r1, #9
 800cdbe:	f7ff ff7d 	bl	800ccbc <std>
 800cdc2:	68e0      	ldr	r0, [r4, #12]
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	2112      	movs	r1, #18
 800cdc8:	f7ff ff78 	bl	800ccbc <std>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	61a3      	str	r3, [r4, #24]
 800cdd0:	e7d2      	b.n	800cd78 <__sinit+0xc>
 800cdd2:	bf00      	nop
 800cdd4:	0800ec64 	.word	0x0800ec64
 800cdd8:	0800cd05 	.word	0x0800cd05

0800cddc <__sfp>:
 800cddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdde:	4607      	mov	r7, r0
 800cde0:	f7ff ffac 	bl	800cd3c <__sfp_lock_acquire>
 800cde4:	4b1e      	ldr	r3, [pc, #120]	; (800ce60 <__sfp+0x84>)
 800cde6:	681e      	ldr	r6, [r3, #0]
 800cde8:	69b3      	ldr	r3, [r6, #24]
 800cdea:	b913      	cbnz	r3, 800cdf2 <__sfp+0x16>
 800cdec:	4630      	mov	r0, r6
 800cdee:	f7ff ffbd 	bl	800cd6c <__sinit>
 800cdf2:	3648      	adds	r6, #72	; 0x48
 800cdf4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	d503      	bpl.n	800ce04 <__sfp+0x28>
 800cdfc:	6833      	ldr	r3, [r6, #0]
 800cdfe:	b30b      	cbz	r3, 800ce44 <__sfp+0x68>
 800ce00:	6836      	ldr	r6, [r6, #0]
 800ce02:	e7f7      	b.n	800cdf4 <__sfp+0x18>
 800ce04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ce08:	b9d5      	cbnz	r5, 800ce40 <__sfp+0x64>
 800ce0a:	4b16      	ldr	r3, [pc, #88]	; (800ce64 <__sfp+0x88>)
 800ce0c:	60e3      	str	r3, [r4, #12]
 800ce0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ce12:	6665      	str	r5, [r4, #100]	; 0x64
 800ce14:	f000 f847 	bl	800cea6 <__retarget_lock_init_recursive>
 800ce18:	f7ff ff96 	bl	800cd48 <__sfp_lock_release>
 800ce1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ce20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ce24:	6025      	str	r5, [r4, #0]
 800ce26:	61a5      	str	r5, [r4, #24]
 800ce28:	2208      	movs	r2, #8
 800ce2a:	4629      	mov	r1, r5
 800ce2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ce30:	f7fd fafc 	bl	800a42c <memset>
 800ce34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ce38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ce3c:	4620      	mov	r0, r4
 800ce3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce40:	3468      	adds	r4, #104	; 0x68
 800ce42:	e7d9      	b.n	800cdf8 <__sfp+0x1c>
 800ce44:	2104      	movs	r1, #4
 800ce46:	4638      	mov	r0, r7
 800ce48:	f7ff ff62 	bl	800cd10 <__sfmoreglue>
 800ce4c:	4604      	mov	r4, r0
 800ce4e:	6030      	str	r0, [r6, #0]
 800ce50:	2800      	cmp	r0, #0
 800ce52:	d1d5      	bne.n	800ce00 <__sfp+0x24>
 800ce54:	f7ff ff78 	bl	800cd48 <__sfp_lock_release>
 800ce58:	230c      	movs	r3, #12
 800ce5a:	603b      	str	r3, [r7, #0]
 800ce5c:	e7ee      	b.n	800ce3c <__sfp+0x60>
 800ce5e:	bf00      	nop
 800ce60:	0800ec64 	.word	0x0800ec64
 800ce64:	ffff0001 	.word	0xffff0001

0800ce68 <_fwalk_reent>:
 800ce68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce6c:	4606      	mov	r6, r0
 800ce6e:	4688      	mov	r8, r1
 800ce70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ce74:	2700      	movs	r7, #0
 800ce76:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce7a:	f1b9 0901 	subs.w	r9, r9, #1
 800ce7e:	d505      	bpl.n	800ce8c <_fwalk_reent+0x24>
 800ce80:	6824      	ldr	r4, [r4, #0]
 800ce82:	2c00      	cmp	r4, #0
 800ce84:	d1f7      	bne.n	800ce76 <_fwalk_reent+0xe>
 800ce86:	4638      	mov	r0, r7
 800ce88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce8c:	89ab      	ldrh	r3, [r5, #12]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d907      	bls.n	800cea2 <_fwalk_reent+0x3a>
 800ce92:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ce96:	3301      	adds	r3, #1
 800ce98:	d003      	beq.n	800cea2 <_fwalk_reent+0x3a>
 800ce9a:	4629      	mov	r1, r5
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	47c0      	blx	r8
 800cea0:	4307      	orrs	r7, r0
 800cea2:	3568      	adds	r5, #104	; 0x68
 800cea4:	e7e9      	b.n	800ce7a <_fwalk_reent+0x12>

0800cea6 <__retarget_lock_init_recursive>:
 800cea6:	4770      	bx	lr

0800cea8 <__retarget_lock_acquire_recursive>:
 800cea8:	4770      	bx	lr

0800ceaa <__retarget_lock_release_recursive>:
 800ceaa:	4770      	bx	lr

0800ceac <__swhatbuf_r>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	460e      	mov	r6, r1
 800ceb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ceb4:	2900      	cmp	r1, #0
 800ceb6:	b096      	sub	sp, #88	; 0x58
 800ceb8:	4614      	mov	r4, r2
 800ceba:	461d      	mov	r5, r3
 800cebc:	da07      	bge.n	800cece <__swhatbuf_r+0x22>
 800cebe:	2300      	movs	r3, #0
 800cec0:	602b      	str	r3, [r5, #0]
 800cec2:	89b3      	ldrh	r3, [r6, #12]
 800cec4:	061a      	lsls	r2, r3, #24
 800cec6:	d410      	bmi.n	800ceea <__swhatbuf_r+0x3e>
 800cec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cecc:	e00e      	b.n	800ceec <__swhatbuf_r+0x40>
 800cece:	466a      	mov	r2, sp
 800ced0:	f000 f902 	bl	800d0d8 <_fstat_r>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	dbf2      	blt.n	800cebe <__swhatbuf_r+0x12>
 800ced8:	9a01      	ldr	r2, [sp, #4]
 800ceda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cede:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cee2:	425a      	negs	r2, r3
 800cee4:	415a      	adcs	r2, r3
 800cee6:	602a      	str	r2, [r5, #0]
 800cee8:	e7ee      	b.n	800cec8 <__swhatbuf_r+0x1c>
 800ceea:	2340      	movs	r3, #64	; 0x40
 800ceec:	2000      	movs	r0, #0
 800ceee:	6023      	str	r3, [r4, #0]
 800cef0:	b016      	add	sp, #88	; 0x58
 800cef2:	bd70      	pop	{r4, r5, r6, pc}

0800cef4 <__smakebuf_r>:
 800cef4:	898b      	ldrh	r3, [r1, #12]
 800cef6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cef8:	079d      	lsls	r5, r3, #30
 800cefa:	4606      	mov	r6, r0
 800cefc:	460c      	mov	r4, r1
 800cefe:	d507      	bpl.n	800cf10 <__smakebuf_r+0x1c>
 800cf00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cf04:	6023      	str	r3, [r4, #0]
 800cf06:	6123      	str	r3, [r4, #16]
 800cf08:	2301      	movs	r3, #1
 800cf0a:	6163      	str	r3, [r4, #20]
 800cf0c:	b002      	add	sp, #8
 800cf0e:	bd70      	pop	{r4, r5, r6, pc}
 800cf10:	ab01      	add	r3, sp, #4
 800cf12:	466a      	mov	r2, sp
 800cf14:	f7ff ffca 	bl	800ceac <__swhatbuf_r>
 800cf18:	9900      	ldr	r1, [sp, #0]
 800cf1a:	4605      	mov	r5, r0
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7ff f987 	bl	800c230 <_malloc_r>
 800cf22:	b948      	cbnz	r0, 800cf38 <__smakebuf_r+0x44>
 800cf24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf28:	059a      	lsls	r2, r3, #22
 800cf2a:	d4ef      	bmi.n	800cf0c <__smakebuf_r+0x18>
 800cf2c:	f023 0303 	bic.w	r3, r3, #3
 800cf30:	f043 0302 	orr.w	r3, r3, #2
 800cf34:	81a3      	strh	r3, [r4, #12]
 800cf36:	e7e3      	b.n	800cf00 <__smakebuf_r+0xc>
 800cf38:	4b0d      	ldr	r3, [pc, #52]	; (800cf70 <__smakebuf_r+0x7c>)
 800cf3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cf3c:	89a3      	ldrh	r3, [r4, #12]
 800cf3e:	6020      	str	r0, [r4, #0]
 800cf40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf44:	81a3      	strh	r3, [r4, #12]
 800cf46:	9b00      	ldr	r3, [sp, #0]
 800cf48:	6163      	str	r3, [r4, #20]
 800cf4a:	9b01      	ldr	r3, [sp, #4]
 800cf4c:	6120      	str	r0, [r4, #16]
 800cf4e:	b15b      	cbz	r3, 800cf68 <__smakebuf_r+0x74>
 800cf50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf54:	4630      	mov	r0, r6
 800cf56:	f000 f8d1 	bl	800d0fc <_isatty_r>
 800cf5a:	b128      	cbz	r0, 800cf68 <__smakebuf_r+0x74>
 800cf5c:	89a3      	ldrh	r3, [r4, #12]
 800cf5e:	f023 0303 	bic.w	r3, r3, #3
 800cf62:	f043 0301 	orr.w	r3, r3, #1
 800cf66:	81a3      	strh	r3, [r4, #12]
 800cf68:	89a0      	ldrh	r0, [r4, #12]
 800cf6a:	4305      	orrs	r5, r0
 800cf6c:	81a5      	strh	r5, [r4, #12]
 800cf6e:	e7cd      	b.n	800cf0c <__smakebuf_r+0x18>
 800cf70:	0800cd05 	.word	0x0800cd05

0800cf74 <_malloc_usable_size_r>:
 800cf74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf78:	1f18      	subs	r0, r3, #4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	bfbc      	itt	lt
 800cf7e:	580b      	ldrlt	r3, [r1, r0]
 800cf80:	18c0      	addlt	r0, r0, r3
 800cf82:	4770      	bx	lr

0800cf84 <_raise_r>:
 800cf84:	291f      	cmp	r1, #31
 800cf86:	b538      	push	{r3, r4, r5, lr}
 800cf88:	4604      	mov	r4, r0
 800cf8a:	460d      	mov	r5, r1
 800cf8c:	d904      	bls.n	800cf98 <_raise_r+0x14>
 800cf8e:	2316      	movs	r3, #22
 800cf90:	6003      	str	r3, [r0, #0]
 800cf92:	f04f 30ff 	mov.w	r0, #4294967295
 800cf96:	bd38      	pop	{r3, r4, r5, pc}
 800cf98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cf9a:	b112      	cbz	r2, 800cfa2 <_raise_r+0x1e>
 800cf9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfa0:	b94b      	cbnz	r3, 800cfb6 <_raise_r+0x32>
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f000 f830 	bl	800d008 <_getpid_r>
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	4601      	mov	r1, r0
 800cfac:	4620      	mov	r0, r4
 800cfae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb2:	f000 b817 	b.w	800cfe4 <_kill_r>
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d00a      	beq.n	800cfd0 <_raise_r+0x4c>
 800cfba:	1c59      	adds	r1, r3, #1
 800cfbc:	d103      	bne.n	800cfc6 <_raise_r+0x42>
 800cfbe:	2316      	movs	r3, #22
 800cfc0:	6003      	str	r3, [r0, #0]
 800cfc2:	2001      	movs	r0, #1
 800cfc4:	e7e7      	b.n	800cf96 <_raise_r+0x12>
 800cfc6:	2400      	movs	r4, #0
 800cfc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cfcc:	4628      	mov	r0, r5
 800cfce:	4798      	blx	r3
 800cfd0:	2000      	movs	r0, #0
 800cfd2:	e7e0      	b.n	800cf96 <_raise_r+0x12>

0800cfd4 <raise>:
 800cfd4:	4b02      	ldr	r3, [pc, #8]	; (800cfe0 <raise+0xc>)
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	6818      	ldr	r0, [r3, #0]
 800cfda:	f7ff bfd3 	b.w	800cf84 <_raise_r>
 800cfde:	bf00      	nop
 800cfe0:	20000040 	.word	0x20000040

0800cfe4 <_kill_r>:
 800cfe4:	b538      	push	{r3, r4, r5, lr}
 800cfe6:	4d07      	ldr	r5, [pc, #28]	; (800d004 <_kill_r+0x20>)
 800cfe8:	2300      	movs	r3, #0
 800cfea:	4604      	mov	r4, r0
 800cfec:	4608      	mov	r0, r1
 800cfee:	4611      	mov	r1, r2
 800cff0:	602b      	str	r3, [r5, #0]
 800cff2:	f7f5 fe3b 	bl	8002c6c <_kill>
 800cff6:	1c43      	adds	r3, r0, #1
 800cff8:	d102      	bne.n	800d000 <_kill_r+0x1c>
 800cffa:	682b      	ldr	r3, [r5, #0]
 800cffc:	b103      	cbz	r3, 800d000 <_kill_r+0x1c>
 800cffe:	6023      	str	r3, [r4, #0]
 800d000:	bd38      	pop	{r3, r4, r5, pc}
 800d002:	bf00      	nop
 800d004:	20000ee4 	.word	0x20000ee4

0800d008 <_getpid_r>:
 800d008:	f7f5 be28 	b.w	8002c5c <_getpid>

0800d00c <__sread>:
 800d00c:	b510      	push	{r4, lr}
 800d00e:	460c      	mov	r4, r1
 800d010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d014:	f000 f894 	bl	800d140 <_read_r>
 800d018:	2800      	cmp	r0, #0
 800d01a:	bfab      	itete	ge
 800d01c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d01e:	89a3      	ldrhlt	r3, [r4, #12]
 800d020:	181b      	addge	r3, r3, r0
 800d022:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d026:	bfac      	ite	ge
 800d028:	6563      	strge	r3, [r4, #84]	; 0x54
 800d02a:	81a3      	strhlt	r3, [r4, #12]
 800d02c:	bd10      	pop	{r4, pc}

0800d02e <__swrite>:
 800d02e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d032:	461f      	mov	r7, r3
 800d034:	898b      	ldrh	r3, [r1, #12]
 800d036:	05db      	lsls	r3, r3, #23
 800d038:	4605      	mov	r5, r0
 800d03a:	460c      	mov	r4, r1
 800d03c:	4616      	mov	r6, r2
 800d03e:	d505      	bpl.n	800d04c <__swrite+0x1e>
 800d040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d044:	2302      	movs	r3, #2
 800d046:	2200      	movs	r2, #0
 800d048:	f000 f868 	bl	800d11c <_lseek_r>
 800d04c:	89a3      	ldrh	r3, [r4, #12]
 800d04e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d056:	81a3      	strh	r3, [r4, #12]
 800d058:	4632      	mov	r2, r6
 800d05a:	463b      	mov	r3, r7
 800d05c:	4628      	mov	r0, r5
 800d05e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d062:	f000 b817 	b.w	800d094 <_write_r>

0800d066 <__sseek>:
 800d066:	b510      	push	{r4, lr}
 800d068:	460c      	mov	r4, r1
 800d06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d06e:	f000 f855 	bl	800d11c <_lseek_r>
 800d072:	1c43      	adds	r3, r0, #1
 800d074:	89a3      	ldrh	r3, [r4, #12]
 800d076:	bf15      	itete	ne
 800d078:	6560      	strne	r0, [r4, #84]	; 0x54
 800d07a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d07e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d082:	81a3      	strheq	r3, [r4, #12]
 800d084:	bf18      	it	ne
 800d086:	81a3      	strhne	r3, [r4, #12]
 800d088:	bd10      	pop	{r4, pc}

0800d08a <__sclose>:
 800d08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d08e:	f000 b813 	b.w	800d0b8 <_close_r>
	...

0800d094 <_write_r>:
 800d094:	b538      	push	{r3, r4, r5, lr}
 800d096:	4d07      	ldr	r5, [pc, #28]	; (800d0b4 <_write_r+0x20>)
 800d098:	4604      	mov	r4, r0
 800d09a:	4608      	mov	r0, r1
 800d09c:	4611      	mov	r1, r2
 800d09e:	2200      	movs	r2, #0
 800d0a0:	602a      	str	r2, [r5, #0]
 800d0a2:	461a      	mov	r2, r3
 800d0a4:	f7f5 fe19 	bl	8002cda <_write>
 800d0a8:	1c43      	adds	r3, r0, #1
 800d0aa:	d102      	bne.n	800d0b2 <_write_r+0x1e>
 800d0ac:	682b      	ldr	r3, [r5, #0]
 800d0ae:	b103      	cbz	r3, 800d0b2 <_write_r+0x1e>
 800d0b0:	6023      	str	r3, [r4, #0]
 800d0b2:	bd38      	pop	{r3, r4, r5, pc}
 800d0b4:	20000ee4 	.word	0x20000ee4

0800d0b8 <_close_r>:
 800d0b8:	b538      	push	{r3, r4, r5, lr}
 800d0ba:	4d06      	ldr	r5, [pc, #24]	; (800d0d4 <_close_r+0x1c>)
 800d0bc:	2300      	movs	r3, #0
 800d0be:	4604      	mov	r4, r0
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	602b      	str	r3, [r5, #0]
 800d0c4:	f7f5 fe25 	bl	8002d12 <_close>
 800d0c8:	1c43      	adds	r3, r0, #1
 800d0ca:	d102      	bne.n	800d0d2 <_close_r+0x1a>
 800d0cc:	682b      	ldr	r3, [r5, #0]
 800d0ce:	b103      	cbz	r3, 800d0d2 <_close_r+0x1a>
 800d0d0:	6023      	str	r3, [r4, #0]
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	20000ee4 	.word	0x20000ee4

0800d0d8 <_fstat_r>:
 800d0d8:	b538      	push	{r3, r4, r5, lr}
 800d0da:	4d07      	ldr	r5, [pc, #28]	; (800d0f8 <_fstat_r+0x20>)
 800d0dc:	2300      	movs	r3, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	602b      	str	r3, [r5, #0]
 800d0e6:	f7f5 fe20 	bl	8002d2a <_fstat>
 800d0ea:	1c43      	adds	r3, r0, #1
 800d0ec:	d102      	bne.n	800d0f4 <_fstat_r+0x1c>
 800d0ee:	682b      	ldr	r3, [r5, #0]
 800d0f0:	b103      	cbz	r3, 800d0f4 <_fstat_r+0x1c>
 800d0f2:	6023      	str	r3, [r4, #0]
 800d0f4:	bd38      	pop	{r3, r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	20000ee4 	.word	0x20000ee4

0800d0fc <_isatty_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d06      	ldr	r5, [pc, #24]	; (800d118 <_isatty_r+0x1c>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	602b      	str	r3, [r5, #0]
 800d108:	f7f5 fe1f 	bl	8002d4a <_isatty>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	d102      	bne.n	800d116 <_isatty_r+0x1a>
 800d110:	682b      	ldr	r3, [r5, #0]
 800d112:	b103      	cbz	r3, 800d116 <_isatty_r+0x1a>
 800d114:	6023      	str	r3, [r4, #0]
 800d116:	bd38      	pop	{r3, r4, r5, pc}
 800d118:	20000ee4 	.word	0x20000ee4

0800d11c <_lseek_r>:
 800d11c:	b538      	push	{r3, r4, r5, lr}
 800d11e:	4d07      	ldr	r5, [pc, #28]	; (800d13c <_lseek_r+0x20>)
 800d120:	4604      	mov	r4, r0
 800d122:	4608      	mov	r0, r1
 800d124:	4611      	mov	r1, r2
 800d126:	2200      	movs	r2, #0
 800d128:	602a      	str	r2, [r5, #0]
 800d12a:	461a      	mov	r2, r3
 800d12c:	f7f5 fe18 	bl	8002d60 <_lseek>
 800d130:	1c43      	adds	r3, r0, #1
 800d132:	d102      	bne.n	800d13a <_lseek_r+0x1e>
 800d134:	682b      	ldr	r3, [r5, #0]
 800d136:	b103      	cbz	r3, 800d13a <_lseek_r+0x1e>
 800d138:	6023      	str	r3, [r4, #0]
 800d13a:	bd38      	pop	{r3, r4, r5, pc}
 800d13c:	20000ee4 	.word	0x20000ee4

0800d140 <_read_r>:
 800d140:	b538      	push	{r3, r4, r5, lr}
 800d142:	4d07      	ldr	r5, [pc, #28]	; (800d160 <_read_r+0x20>)
 800d144:	4604      	mov	r4, r0
 800d146:	4608      	mov	r0, r1
 800d148:	4611      	mov	r1, r2
 800d14a:	2200      	movs	r2, #0
 800d14c:	602a      	str	r2, [r5, #0]
 800d14e:	461a      	mov	r2, r3
 800d150:	f7f5 fda6 	bl	8002ca0 <_read>
 800d154:	1c43      	adds	r3, r0, #1
 800d156:	d102      	bne.n	800d15e <_read_r+0x1e>
 800d158:	682b      	ldr	r3, [r5, #0]
 800d15a:	b103      	cbz	r3, 800d15e <_read_r+0x1e>
 800d15c:	6023      	str	r3, [r4, #0]
 800d15e:	bd38      	pop	{r3, r4, r5, pc}
 800d160:	20000ee4 	.word	0x20000ee4

0800d164 <_init>:
 800d164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d166:	bf00      	nop
 800d168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d16a:	bc08      	pop	{r3}
 800d16c:	469e      	mov	lr, r3
 800d16e:	4770      	bx	lr

0800d170 <_fini>:
 800d170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d172:	bf00      	nop
 800d174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d176:	bc08      	pop	{r3}
 800d178:	469e      	mov	lr, r3
 800d17a:	4770      	bx	lr
